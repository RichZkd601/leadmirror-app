import type { Analysis } from "@shared/schema";

export class TrelloIntegration {
  private apiKey: string;
  private token: string;
  private baseUrl = 'https://api.trello.com/1';

  constructor(apiKey: string, token: string) {
    this.apiKey = apiKey;
    this.token = token;
  }

  async exportAnalysis(analysis: Analysis, listId: string): Promise<string> {
    try {
      const cardData = {
        name: `üìû ${analysis.title}`,
        desc: this.formatAnalysisDescription(analysis),
        idList: listId,
        pos: 'top',
        key: this.apiKey,
        token: this.token,
      };

      const response = await fetch(`${this.baseUrl}/cards`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(cardData),
      });

      if (!response.ok) {
        throw new Error(`Erreur Trello: ${response.statusText}`);
      }

      const card = await response.json();

      // Ajouter des labels bas√©s sur le niveau d'int√©r√™t
      await this.addLabels(card.id, analysis.interestLevel);

      // Ajouter une checklist si il y a des actions √† faire
      if (analysis.nextSteps && analysis.nextSteps.length > 0) {
        await this.addChecklist(card.id, analysis.nextSteps);
      }

      return card.id;
    } catch (error) {
      console.error("Erreur lors de l'export vers Trello:", error);
      throw new Error("√âchec de l'export vers Trello");
    }
  }

  private formatAnalysisDescription(analysis: Analysis): string {
    return `
## üìä Analyse LeadMirror

**Niveau d'int√©r√™t:** ${analysis.interestLevel === 'hot' ? 'üî• Chaud' : 
                         analysis.interestLevel === 'warm' ? 'üå§ Ti√®de' : '‚ùÑÔ∏è Froid'}

**Justification:** ${analysis.interestJustification}

## üéØ Conseils strat√©giques
${analysis.strategicAdvice}

## üìß Message de relance sugg√©r√©
**Objet:** ${analysis.followUpSubject}

\`\`\`
${analysis.followUpMessage}
\`\`\`

${analysis.objections && analysis.objections.length > 0 ? `
## ‚ö†Ô∏è Objections identifi√©es
${analysis.objections.map((obj: any) => `‚Ä¢ **${obj.type}** (${obj.intensity}): ${obj.description}`).join('\n')}

**Strat√©gies de r√©ponse:**
${analysis.objections.map((obj: any) => `‚Ä¢ ${obj.responseStrategy || 'Strat√©gie √† d√©finir'}`).join('\n')}
` : ''}

${analysis.buyingSignals && analysis.buyingSignals.length > 0 ? `
## ‚úÖ Signaux d'achat d√©tect√©s
${analysis.buyingSignals.map((signal: any) => `‚Ä¢ **${signal.signal}** (${signal.strength}): ${signal.description}`).join('\n')}
` : ''}

${analysis.advancedInsights ? `
## üß† Insights avanc√©s
**Score de qualit√©:** ${analysis.advancedInsights.conversationQualityScore}/100
**Probabilit√© de closing:** ${analysis.advancedInsights.predictions?.closingProbability || 'N/A'}%
**Temps estim√© pour closer:** ${analysis.advancedInsights.salesTiming?.timeToClose || 'N/A'}
` : ''}

---
*Analys√© automatiquement par LeadMirror le ${new Date(analysis.createdAt).toLocaleDateString('fr-FR')}*
    `.trim();
  }

  private async addLabels(cardId: string, interestLevel: string): Promise<void> {
    try {
      const boardResponse = await fetch(`${this.baseUrl}/cards/${cardId}/board?key=${this.apiKey}&token=${this.token}`);
      const board = await boardResponse.json();

      const labelsResponse = await fetch(`${this.baseUrl}/boards/${board.id}/labels?key=${this.apiKey}&token=${this.token}`);
      const labels = await labelsResponse.json();

      // Trouver ou cr√©er le label appropri√©
      const colorMap = {
        hot: 'red',
        warm: 'orange', 
        cold: 'blue'
      };

      const labelName = interestLevel === 'hot' ? 'üî• Chaud' : 
                       interestLevel === 'warm' ? 'üå§ Ti√®de' : '‚ùÑÔ∏è Froid';

      let targetLabel = labels.find((label: any) => label.name === labelName);

      if (!targetLabel) {
        // Cr√©er le label s'il n'existe pas
        const createLabelResponse = await fetch(`${this.baseUrl}/boards/${board.id}/labels`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: labelName,
            color: colorMap[interestLevel as keyof typeof colorMap],
            key: this.apiKey,
            token: this.token,
          }),
        });
        targetLabel = await createLabelResponse.json();
      }

      // Ajouter le label √† la carte
      await fetch(`${this.baseUrl}/cards/${cardId}/idLabels`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          value: targetLabel.id,
          key: this.apiKey,
          token: this.token,
        }),
      });
    } catch (error) {
      console.warn('Impossible d\'ajouter des labels √† la carte Trello');
    }
  }

  private async addChecklist(cardId: string, nextSteps: any[]): Promise<void> {
    try {
      // Cr√©er une checklist
      const checklistResponse = await fetch(`${this.baseUrl}/cards/${cardId}/checklists`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: 'üìã Actions √† r√©aliser',
          key: this.apiKey,
          token: this.token,
        }),
      });

      const checklist = await checklistResponse.json();

      // Ajouter les √©l√©ments √† la checklist
      for (const step of nextSteps) {
        await fetch(`${this.baseUrl}/checklists/${checklist.id}/checkItems`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: `${step.action} (${step.timeframe || '√Ä planifier'})`,
            key: this.apiKey,
            token: this.token,
          }),
        });
      }
    } catch (error) {
      console.warn('Impossible d\'ajouter une checklist √† la carte Trello');
    }
  }

  async testConnection(): Promise<boolean> {
    try {
      const response = await fetch(`${this.baseUrl}/members/me?key=${this.apiKey}&token=${this.token}`);
      return response.ok;
    } catch (error) {
      return false;
    }
  }
}