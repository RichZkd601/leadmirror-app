{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# LeadMirror\n\n## Overview\n\nLeadMirror is the world's most advanced SaaS application for analyzing commercial conversations using revolutionary AI technology. The application provides comprehensive sales conversation analysis with advanced psychological profiling, competitive intelligence, and predictive analytics. Built with cutting-edge AI capabilities including:\n\n- **Deep Psychological Analysis**: Personality profiling, emotional state detection, and behavioral pattern recognition\n- **Advanced Sales Intelligence**: Conversation quality scoring, sales timing optimization, and closing probability predictions\n- **Competitive Analysis**: Automatic competitor detection, threat assessment, and strategic counter-measures\n- **Predictive AI**: Objection prediction, next-step recommendations, and risk factor identification\n- **Emotional Journey Mapping**: Real-time sentiment analysis and emotional trigger detection\n\nThe platform combines the expertise of top sales methodologies with advanced AI to provide unprecedented insights into sales conversations, making it the definitive tool for sales professionals, coaches, and commercial teams worldwide.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nLanguage: French language support implemented throughout the application interface.\n\n## Recent Changes (January 2025)\n\n### Authentication System Migration\n- **Date**: January 3, 2025\n- **Change**: Migrated from Google OAuth to simple email/password authentication\n- **Reason**: Simplified user onboarding without requiring external OAuth setup\n- **Implementation**: Added bcrypt password hashing, email/password forms, session management\n\n### Lifetime Offer Launch\n- **Date**: January 3, 2025\n- **Change**: Introduced exclusive lifetime offer for first 50 users\n- **Pricing**: €99 one-time payment for lifetime access (vs €15/month regular pricing)\n- **Features**: Landing page redesign, dedicated offer page, Stripe Checkout integration\n- **Marketing**: Urgency-driven messaging with countdown timer and limited availability\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript and Vite for build tooling\n- **UI Framework**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming support\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation via @hookform/resolvers\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Authentication**: Replit Auth with OpenID Connect integration\n- **Session Management**: Express sessions with PostgreSQL storage via connect-pg-simple\n- **API Design**: RESTful endpoints with Express middleware for authentication\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL via Neon Database serverless\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Session Storage**: PostgreSQL table for user sessions\n- **Database Tables**:\n  - Users: Profile information and subscription status\n  - Analyses: Conversation analysis results and metadata\n  - Sessions: User authentication sessions\n\n### Authentication and Authorization\n- **Provider**: Simple email/password authentication system\n- **Password Security**: bcrypt hashing for secure password storage\n- **Session Management**: Express sessions with PostgreSQL storage via connect-pg-simple\n- **User Management**: Manual user registration and login with form validation\n- **Authorization**: Session-based middleware protection for authenticated endpoints\n\n### Revolutionary AI Integration\n- **Primary AI**: OpenAI GPT-4o model with advanced prompt engineering for world-class analysis\n- **Multi-Layer Analysis System**:\n  - **Core Analysis**: Interest level, objections, strategic advice, follow-up generation\n  - **Psychological Profiling**: DISC personality analysis, communication style detection, behavioral traits\n  - **Emotional Intelligence**: Sentiment tracking, emotional state detection, trigger identification\n  - **Predictive Analytics**: Closing probability, objection prediction, timing optimization\n  - **Competitive Intelligence**: Competitor detection, threat assessment, advantage identification\n  - **Advanced Insights**: Conversation quality scoring, prospect maturity assessment, key moment detection\n- **Triple-AI Architecture**: \n  - Primary conversation analysis\n  - Advanced insights generation\n  - Emotional journey mapping\n- **Response Handling**: Multi-structured JSON responses with comprehensive validation\n\n### Payment Processing\n- **Provider**: Stripe for subscription management and lifetime offer\n- **Integration**: React Stripe.js for frontend payment forms and Checkout sessions\n- **Lifetime Offer**: Exclusive launch offer at €99 for lifetime access (limited to 50 users)\n- **Features**: Premium subscription with usage limits for free users (3 analyses/month)\n- **Billing Model**: \n  - Launch offer: €99 one-time payment for lifetime access\n  - Regular pricing: €15/month after launch offer ends\n\n### Development Architecture\n- **Monorepo Structure**: Shared types and schemas between client and server\n- **Build Process**: Vite for client bundling, esbuild for server compilation\n- **Development Tools**: Hot reload in development, TypeScript compilation checking\n- **Path Aliases**: Configured for clean imports across client, server, and shared code\n\n## External Dependencies\n\n### Core Services\n- **Neon Database**: Serverless PostgreSQL hosting for data persistence\n- **OpenAI API**: GPT-4o model for conversation analysis and insight generation\n- **Stripe**: Payment processing and subscription management\n- **Replit Auth**: User authentication and session management\n\n### SEO & Accessibility Optimization (Janvier 2025)\n- **Référencement naturel complet**: Meta tags optimisés, JSON-LD Schema.org, sitemap.xml\n- **Accessibilité web**: Attributs ARIA, navigation sémantique, support lecteurs d'écran\n- **Performance**: Preconnect, DNS prefetch, manifeste web pour PWA\n- **Découvrabilité moteurs**: Robots.txt optimisé, méta géo-targeting France\n- **Standards internationaux**: Lang tags français, conformité WCAG\n\n### Frontend Libraries\n- **shadcn/ui**: Complete UI component library built on Radix UI\n- **TanStack Query**: Server state management and caching\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **React Hook Form**: Form validation and state management\n- **Wouter**: Lightweight routing library\n\n### Backend Libraries\n- **Drizzle ORM**: Type-safe database operations and migrations\n- **Express.js**: Web application framework\n- **Passport.js**: Authentication middleware with OpenID Connect strategy\n- **connect-pg-simple**: PostgreSQL session store for Express\n\n### Development Tools\n- **Vite**: Frontend build tool with hot module replacement\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Drizzle Kit**: Database schema management and migration tools","size_bytes":7174},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/advancedAnalytics.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\nexport interface ConversationInsights {\n  // Score global de qualité de la conversation (0-100)\n  conversationQualityScore: number;\n  \n  // Analyse du timing commercial\n  salesTiming: {\n    currentPhase: \"découverte\" | \"présentation\" | \"négociation\" | \"closing\" | \"suivi\";\n    nextPhaseRecommendation: string;\n    timeToClose: \"immédiat\" | \"court\" | \"moyen\" | \"long\";\n    urgencyIndicators: string[];\n  };\n  \n  // Détection des moments clés\n  keyMoments: Array<{\n    moment: string;\n    significance: \"critique\" | \"important\" | \"notable\";\n    action: string;\n  }>;\n  \n  // Analyse competitive\n  competitiveAnalysis: {\n    competitorsDetected: string[];\n    competitiveAdvantages: string[];\n    threatLevel: \"low\" | \"medium\" | \"high\";\n    counterStrategies: string[];\n  };\n  \n  // Score de maturité du prospect\n  prospectMaturity: {\n    decisionMakingStage: \"reconnaissance\" | \"évaluation\" | \"comparaison\" | \"décision\";\n    readinessScore: number; // 0-100\n    missingElements: string[];\n  };\n  \n  // Prédictions IA avancées\n  predictions: {\n    closingProbability: number; // 0-100\n    bestApproachVector: string;\n    predictedObjections: Array<{\n      objection: string;\n      probability: number;\n      preventiveStrategy: string;\n    }>;\n  };\n}\n\nexport async function generateAdvancedInsights(conversationText: string): Promise<ConversationInsights> {\n  try {\n    const prompt = `Tu es le meilleur analyste commercial IA au monde, expert en neuro-science commerciale et psychologie comportementale. Analyse cette conversation commerciale avec la précision d'un super-ordinateur :\n\nCONVERSATION :\n${conversationText}\n\nANALYSE ULTRA-AVANCÉE REQUISE (JSON UNIQUEMENT) :\n\n1. SCORE DE QUALITÉ CONVERSATION (0-100) basé sur l'efficacité commerciale\n2. ANALYSE DE TIMING COMMERCIAL avec phase actuelle et recommandations de progression\n3. MOMENTS CLÉS CRITIQUES détectés dans la conversation \n4. ANALYSE COMPETITIVE avec détection de concurrents et stratégies\n5. MATURITÉ DU PROSPECT avec niveau de préparation à l'achat\n6. PRÉDICTIONS IA avec probabilité de closing et stratégies optimales\n\nSTRUCTURE JSON OBLIGATOIRE :\n{\n  \"conversationQualityScore\": 85,\n  \"salesTiming\": {\n    \"currentPhase\": \"découverte|présentation|négociation|closing|suivi\",\n    \"nextPhaseRecommendation\": \"stratégie pour passer à la phase suivante\",\n    \"timeToClose\": \"immédiat|court|moyen|long\",\n    \"urgencyIndicators\": [\"indicateur1\", \"indicateur2\"]\n  },\n  \"keyMoments\": [\n    {\n      \"moment\": \"moment clé détecté\",\n      \"significance\": \"critique|important|notable\",\n      \"action\": \"action recommandée\"\n    }\n  ],\n  \"competitiveAnalysis\": {\n    \"competitorsDetected\": [\"concurrent1\", \"concurrent2\"],\n    \"competitiveAdvantages\": [\"avantage1\", \"avantage2\"],\n    \"threatLevel\": \"low|medium|high\",\n    \"counterStrategies\": [\"stratégie1\", \"stratégie2\"]\n  },\n  \"prospectMaturity\": {\n    \"decisionMakingStage\": \"reconnaissance|évaluation|comparaison|décision\",\n    \"readinessScore\": 75,\n    \"missingElements\": [\"élément1\", \"élément2\"]\n  },\n  \"predictions\": {\n    \"closingProbability\": 65,\n    \"bestApproachVector\": \"meilleure approche recommandée\",\n    \"predictedObjections\": [\n      {\n        \"objection\": \"objection prédite\",\n        \"probability\": 70,\n        \"preventiveStrategy\": \"stratégie préventive\"\n      }\n    ]\n  }\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"Tu es le meilleur analyste commercial IA au monde. Génère uniquement du JSON valide selon la structure exacte demandée.\"\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.2,\n      max_tokens: 3000,\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    // Validation des champs requis\n    const requiredFields = [\n      'conversationQualityScore', 'salesTiming', 'keyMoments', \n      'competitiveAnalysis', 'prospectMaturity', 'predictions'\n    ];\n    \n    for (const field of requiredFields) {\n      if (!(field in result)) {\n        throw new Error(`Champ requis manquant: ${field}`);\n      }\n    }\n\n    return result as ConversationInsights;\n  } catch (error) {\n    console.error(\"Erreur lors de l'analyse avancée:\", error);\n    throw new Error(\"Échec de l'analyse avancée: \" + (error as Error).message);\n  }\n}\n\n// Analyse de sentiment émotionnel avancée\nexport async function analyzeEmotionalJourney(conversationText: string): Promise<{\n  emotionalTrajectory: Array<{\n    phase: string;\n    emotion: string;\n    intensity: number;\n    triggers: string[];\n  }>;\n  overallSentiment: number; // -100 to +100\n  emotionalTriggers: string[];\n  recommendedEmotionalApproach: string;\n}> {\n  try {\n    const prompt = `Analyse le parcours émotionnel de cette conversation commerciale :\n\n${conversationText}\n\nTrace la trajectoire émotionnelle du prospect et identifie les déclencheurs émotionnels.\n\nJSON structure:\n{\n  \"emotionalTrajectory\": [\n    {\n      \"phase\": \"début de conversation\",\n      \"emotion\": \"curiosité\",\n      \"intensity\": 7,\n      \"triggers\": [\"mention du problème\", \"solution proposée\"]\n    }\n  ],\n  \"overallSentiment\": 65,\n  \"emotionalTriggers\": [\"trigger1\", \"trigger2\"],\n  \"recommendedEmotionalApproach\": \"approche émotionnelle recommandée\"\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        { role: \"system\", content: \"Tu es un expert en psychologie émotionnelle commerciale.\" },\n        { role: \"user\", content: prompt }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3\n    });\n\n    return JSON.parse(response.choices[0].message.content || \"{}\");\n  } catch (error) {\n    console.error(\"Erreur analyse émotionnelle:\", error);\n    throw error;\n  }\n}","size_bytes":6092},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\n// Configure Neon with WebSocket constructor and connection settings\nneonConfig.webSocketConstructor = ws;\nneonConfig.useSecureWebSocket = true;\nneonConfig.pipelineConnect = false;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Configure pool with proper connection settings\nexport const pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  max: 10,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 5000,\n});\n\nexport const db = drizzle({ client: pool, schema });\n\n// Graceful shutdown\nprocess.on('SIGINT', async () => {\n  console.log('Closing database pool...');\n  await pool.end();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', async () => {\n  console.log('Closing database pool...');\n  await pool.end();\n  process.exit(0);\n});","size_bytes":1018},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Enhanced error handler\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    console.error('Error handler caught:', err);\n    \n    const status = err.status || err.statusCode || 500;\n    let message = err.message || \"Internal Server Error\";\n    \n    // Translate common errors to French and hide internal details\n    if (status === 400) {\n      message = 'Requête invalide';\n    } else if (status === 401) {\n      message = 'Authentification requise';\n    } else if (status === 403) {\n      message = 'Accès interdit';\n    } else if (status === 404) {\n      message = 'Ressource introuvable';\n    } else if (status >= 500) {\n      message = 'Erreur temporaire du serveur. Veuillez réessayer.';\n      // Log detailed error but don't expose to client\n      console.error('Server error details:', err.stack);\n    }\n\n    res.status(status).json({ \n      message,\n      ...(process.env.NODE_ENV === 'development' && { error: err.message })\n    });\n  });\n  \n  // 404 handler for API routes\n  app.use('/api/*', (_req: Request, res: Response) => {\n    res.status(404).json({ message: 'Endpoint API introuvable' });\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2957},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      \n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `private, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an audio file\n  async getAudioUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const audioId = randomUUID();\n    const fullPath = `${privateObjectDir}/audio/${audioId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900, // 15 minutes\n    });\n  }\n\n  // Gets the audio file from the object path.\n  async getAudioFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/audio/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const audioId = parts.slice(1).join(\"/\");\n    let audioDir = this.getPrivateObjectDir();\n    if (!audioDir.endsWith(\"/\")) {\n      audioDir = `${audioDir}/`;\n    }\n    const audioObjectPath = `${audioDir}${objectPath.slice(1)}`;\n    const { bucketName, objectName } = parseObjectPath(audioObjectPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const audioFile = bucket.file(objectName);\n    const [exists] = await audioFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return audioFile;\n  }\n\n  // Downloads an audio file to a local temporary path for processing\n  async downloadAudioToTemp(audioFile: File): Promise<string> {\n    const fs = require('fs');\n    const tempPath = `/tmp/audio_${randomUUID()}.tmp`;\n    \n    return new Promise((resolve, reject) => {\n      const writeStream = fs.createWriteStream(tempPath);\n      const readStream = audioFile.createReadStream();\n      \n      readStream.on('error', reject);\n      writeStream.on('error', reject);\n      writeStream.on('finish', () => resolve(tempPath));\n      \n      readStream.pipe(writeStream);\n    });\n  }\n\n  normalizeAudioPath(rawPath: string): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let audioDir = this.getPrivateObjectDir();\n    if (!audioDir.endsWith(\"/\")) {\n      audioDir = `${audioDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(audioDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the audio ID from the path\n    const audioId = rawObjectPath.slice(audioDir.length);\n    return `/audio/${audioId}`;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":7667},"server/openai.ts":{"content":"import OpenAI from \"openai\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { AdvancedAudioProcessor } from \"./audioProcessor\";\nimport { createHash } from \"crypto\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nif (!process.env.OPENAI_API_KEY) {\n  throw new Error(\"OPENAI_API_KEY environment variable is required\");\n}\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY,\n  timeout: 60000, // 60 seconds timeout for robust processing\n  maxRetries: 3, // Auto-retry on failure\n});\n\n// Advanced audio processing utilities\nclass AudioProcessor {\n  private static readonly SUPPORTED_FORMATS = [\n    '.mp3', '.mp4', '.mpeg', '.mpga', '.m4a', '.wav', '.webm', '.flac', '.ogg', '.opus'\n  ];\n  \n  private static readonly MAX_FILE_SIZE = 25 * 1024 * 1024; // 25MB (Whisper limit)\n  private static readonly MIN_FILE_SIZE = 1024; // 1KB minimum\n  \n  static validateAudioFile(filePath: string): void {\n    if (!fs.existsSync(filePath)) {\n      throw new Error(\"Fichier audio introuvable\");\n    }\n    \n    const stats = fs.statSync(filePath);\n    const fileSize = stats.size;\n    const fileExt = path.extname(filePath).toLowerCase();\n    \n    if (fileSize < this.MIN_FILE_SIZE) {\n      throw new Error(\"Fichier audio trop petit (minimum 1KB)\");\n    }\n    \n    if (fileSize > this.MAX_FILE_SIZE) {\n      throw new Error(`Fichier audio trop volumineux (maximum 25MB, reçu ${Math.round(fileSize / 1024 / 1024)}MB)`);\n    }\n    \n    if (!this.SUPPORTED_FORMATS.includes(fileExt)) {\n      throw new Error(`Format audio non supporté: ${fileExt}. Formats acceptés: ${this.SUPPORTED_FORMATS.join(', ')}`);\n    }\n  }\n  \n  static generateFileHash(filePath: string): string {\n    const fileBuffer = fs.readFileSync(filePath);\n    return createHash('sha256').update(fileBuffer).digest('hex');\n  }\n  \n  static estimateDuration(fileSize: number): number {\n    // Rough estimation: 1MB ≈ 1 minute for average quality audio\n    return Math.max(1, Math.round(fileSize / (1024 * 1024)));\n  }\n}\n\n// Advanced text preprocessing for optimal analysis\nclass TextProcessor {\n  private static readonly MIN_TEXT_LENGTH = 10;\n  private static readonly MAX_TEXT_LENGTH = 100000; // Increased limit\n  private static readonly CONVERSATION_PATTERNS = [\n    /\\b(vendeur|commercial|client|prospect|acheteur|représentant)\\s*:/gi,\n    /\\b(moi|vous|nous|je|tu|il|elle)\\s*:/gi,\n    /\\b\\d{1,2}:\\d{2}\\s*(am|pm)?\\b/gi, // Timestamps\n  ];\n  \n  static preprocessConversation(text: string): {\n    cleanedText: string;\n    metadata: {\n      originalLength: number;\n      cleanedLength: number;\n      hasTimestamps: boolean;\n      hasSpeakerLabels: boolean;\n      estimatedParticipants: number;\n      language: 'fr' | 'en' | 'mixed';\n    };\n  } {\n    if (!text || typeof text !== 'string') {\n      throw new Error(\"Texte de conversation invalide\");\n    }\n    \n    const originalLength = text.length;\n    \n    if (originalLength < this.MIN_TEXT_LENGTH) {\n      throw new Error(`Texte trop court (minimum ${this.MIN_TEXT_LENGTH} caractères)`);\n    }\n    \n    if (originalLength > this.MAX_TEXT_LENGTH) {\n      throw new Error(`Texte trop long (maximum ${this.MAX_TEXT_LENGTH} caractères, reçu ${originalLength})`);\n    }\n    \n    // Clean and normalize text\n    let cleanedText = text\n      .replace(/\\r\\n/g, '\\n') // Normalize line endings\n      .replace(/\\s+/g, ' ') // Normalize whitespace\n      .trim();\n    \n    // Detect conversation patterns\n    const hasTimestamps = /\\b\\d{1,2}:\\d{2}/.test(cleanedText);\n    const hasSpeakerLabels = /:/.test(cleanedText) && /\\b(vendeur|commercial|client|prospect|moi|vous)\\s*:/i.test(cleanedText);\n    \n    // Estimate participants\n    const speakerMatches = cleanedText.match(/\\b\\w+\\s*:/g) || [];\n    const uniqueSpeakers = new Set(speakerMatches.map(s => s.toLowerCase()));\n    const estimatedParticipants = Math.max(2, uniqueSpeakers.size);\n    \n    // Detect language\n    const frenchWords = (cleanedText.match(/\\b(le|la|les|un|une|des|et|de|du|dans|sur|avec|pour|par|ce|cette|qui|que|dont|où|oui|non|très|mais|comme|tout|bien|plus|encore|aussi|peut|être|avoir|faire|dire|aller|voir|savoir|nous|vous|ils|elles)\\b/gi) || []).length;\n    const englishWords = (cleanedText.match(/\\b(the|and|or|but|in|on|at|to|for|of|with|by|from|this|that|which|who|what|where|when|why|how|yes|no|very|more|also|can|will|would|could|should|have|has|had|do|does|did|go|come|see|know|think|say|get|make|take|give|find|use|work|try|ask|tell|show|play|run|move|live|feel|seem|become|leave|turn|start|stop|help|talk|walk|look|want|need|like|love|hate|hope|wish|believe|understand|remember|forget|learn|teach|study|read|write|listen|hear|speak|call|answer|open|close|buy|sell|pay|cost|spend|save|win|lose|choose|decide|agree|disagree|accept|refuse|allow|prevent|protect|attack|defend|fight|argue|discuss|explain|describe|compare|contrast|analyze|solve|create|build|destroy|repair|clean|cook|eat|drink|sleep|wake|dream|smile|laugh|cry|sing|dance|drive|ride|fly|swim|jump|run|walk|sit|stand|lie|fall|rise|grow|change|improve|increase|decrease|begin|end|continue|stop|start|finish|complete|succeed|fail|try|attempt|achieve|reach|arrive|leave|return|stay|remain|exist|happen|occur|appear|disappear|seem|look|sound|feel|taste|smell|touch|hold|carry|bring|take|put|place|keep|store|find|lose|search|discover|invent|create)\\b/gi) || []).length;\n    \n    let language: 'fr' | 'en' | 'mixed' = 'fr';\n    if (englishWords > frenchWords * 1.5) {\n      language = 'en';\n    } else if (englishWords > frenchWords * 0.3) {\n      language = 'mixed';\n    }\n    \n    return {\n      cleanedText,\n      metadata: {\n        originalLength,\n        cleanedLength: cleanedText.length,\n        hasTimestamps,\n        hasSpeakerLabels,\n        estimatedParticipants,\n        language,\n      }\n    };\n  }\n}\n\nexport interface AnalysisResult {\n  interestLevel: \"hot\" | \"warm\" | \"cold\";\n  interestJustification: string;\n  confidenceScore: number; // 0-100\n  personalityProfile: {\n    type: \"analytical\" | \"driver\" | \"expressive\" | \"amiable\";\n    traits: string[];\n    communicationStyle: string;\n  };\n  emotionalState: {\n    primary: \"excited\" | \"cautious\" | \"frustrated\" | \"neutral\" | \"enthusiastic\";\n    intensity: number; // 0-10\n    indicators: string[];\n  };\n  objections: Array<{\n    type: \"prix\" | \"timing\" | \"autorité\" | \"besoin\" | \"confiance\" | \"budget\" | \"concurrent\";\n    intensity: \"high\" | \"medium\" | \"low\";\n    description: string;\n    responseStrategy: string;\n    probability: number; // 0-100\n  }>;\n  buyingSignals: Array<{\n    signal: string;\n    strength: \"strong\" | \"medium\" | \"weak\";\n    description: string;\n  }>;\n  nextSteps: Array<{\n    action: string;\n    priority: \"high\" | \"medium\" | \"low\";\n    timeframe: string;\n    reasoning: string;\n  }>;\n  strategicAdvice: string;\n  talkingPoints: string[];\n  followUpSubject: string;\n  followUpMessage: string;\n  alternativeApproaches: Array<{\n    approach: string;\n    when: string;\n    message: string;\n  }>;\n  riskFactors: Array<{\n    risk: string;\n    impact: \"high\" | \"medium\" | \"low\";\n    mitigation: string;\n  }>;\n}\n\nexport async function analyzeConversation(conversationText: string): Promise<AnalysisResult & {\n  processingMetadata?: {\n    textLength: number;\n    language: string;\n    participants: number;\n    processingTime: number;\n    confidenceFactors: string[];\n  };\n}> {\n  const startTime = Date.now();\n  \n  try {\n    // Advanced text preprocessing\n    const { cleanedText, metadata } = TextProcessor.preprocessConversation(conversationText);\n    \n    console.log(`Processing conversation: ${metadata.cleanedLength} chars, ${metadata.estimatedParticipants} participants, language: ${metadata.language}`);\n    // Dynamic prompt adaptation based on text analysis\n    const languageInstruction = metadata.language === 'en' ? \n      \"IMPORTANT: This conversation is in English. Provide analysis in French but acknowledge the original language.\" :\n      metadata.language === 'mixed' ? \n      \"IMPORTANT: This is a multilingual conversation. Analyze language switches as psychological indicators.\" :\n      \"Conversation en français détectée.\";\n    \n    const participantContext = metadata.estimatedParticipants > 2 ? \n      `CONTEXTE: Conversation multi-participants (${metadata.estimatedParticipants} personnes détectées). Analyse la dynamique de groupe.` :\n      \"CONTEXTE: Dialogue commercial standard (2 participants).\";\n    \n    const prompt = `Tu es l'analyste commercial le plus avancé au monde, combinant l'expertise de:\n    - Grant Cardone (psychologie de vente agressive)\n    - Jordan Belfort (persuasion et closing)\n    - Daniel Kahneman (biais cognitifs et prise de décision)\n    - Robert Cialdini (influence et persuasion)\n    - Dale Carnegie (relations humaines)\n    - Neil Rackham (SPIN Selling)\n    - Challenger Sale methodology\n    - Sandler Sales methodology\n\n${languageInstruction}\n${participantContext}\n\nMÉTADONNÉES DE LA CONVERSATION :\n- Longueur: ${metadata.cleanedLength} caractères\n- Participants estimés: ${metadata.estimatedParticipants}\n- Marqueurs temporels détectés: ${metadata.hasTimestamps ? 'Oui' : 'Non'}\n- Labels d'interlocuteurs: ${metadata.hasSpeakerLabels ? 'Oui' : 'Non'}\n- Langue détectée: ${metadata.language}\n\nCONVERSATION À ANALYSER :\n${cleanedText}\n\nANALYSE COMMERCIALE RÉVOLUTIONNAIRE REQUISE (JSON uniquement) :\n\n🎯 ANALYSE PRIMAIRE:\n1. ÉVALUATION NIVEAU D'INTÉRÊT (hot/warm/cold) avec score de confiance précis (0-100)\n2. PROFIL PSYCHOLOGIQUE DISC complet (Dominant/Influent/Stable/Consciencieux) avec sous-types\n3. ÉTAT ÉMOTIONNEL multi-dimensionnel avec intensité et triggers\n4. OBJECTIONS PRÉDICTIVES avec probabilités calculées et contre-stratégies\n5. SIGNAUX D'ACHAT micro et macro avec scoring de force\n\n🧠 ANALYSE PSYCHOLOGIQUE AVANCÉE:\n6. BIAIS COGNITIFS détectés (anchoring, loss aversion, social proof, etc.)\n7. TRIGGERS ÉMOTIONNELS identifiés (peur, prestige, urgence, appartenance)\n8. STYLE DE COMMUNICATION préféré et adaptation requise\n9. NIVEAU D'AUTORITÉ et processus de décision\n10. MOTIVATIONS CACHÉES et besoins non exprimés\n\n🚀 STRATÉGIE COMMERCIALE:\n11. ÉTAPES SUIVANTES tactiques avec timing optimal\n12. CONSEILS STRATÉGIQUES multi-niveaux\n13. POINTS DE LEVIER psychologiques à exploiter\n14. MESSAGE DE RELANCE personnalisé avec A/B variants\n15. APPROCHES ALTERNATIVES selon résistances\n16. FACTEURS DE RISQUE avec plans de mitigation\n17. CLOSING STRATEGIES adaptées au profil\n\nStructure JSON EXACTE obligatoire :\n{\n  \"interestLevel\": \"hot|warm|cold\",\n  \"interestJustification\": \"analyse psychologique détaillée...\",\n  \"confidenceScore\": 85,\n  \"personalityProfile\": {\n    \"type\": \"analytical|driver|expressive|amiable\",\n    \"traits\": [\"trait1\", \"trait2\", \"trait3\"],\n    \"communicationStyle\": \"description du style de communication préféré\"\n  },\n  \"emotionalState\": {\n    \"primary\": \"excited|cautious|frustrated|neutral|enthusiastic\",\n    \"intensity\": 7,\n    \"indicators\": [\"indicateur1\", \"indicateur2\"]\n  },\n  \"objections\": [\n    {\n      \"type\": \"prix|timing|autorité|besoin|confiance|budget|concurrent\",\n      \"intensity\": \"high|medium|low\",\n      \"description\": \"description de l'objection\",\n      \"responseStrategy\": \"stratégie de réponse spécifique\",\n      \"probability\": 75\n    }\n  ],\n  \"buyingSignals\": [\n    {\n      \"signal\": \"signal détecté\",\n      \"strength\": \"strong|medium|weak\",\n      \"description\": \"explication du signal\"\n    }\n  ],\n  \"nextSteps\": [\n    {\n      \"action\": \"action spécifique\",\n      \"priority\": \"high|medium|low\",\n      \"timeframe\": \"délai recommandé\",\n      \"reasoning\": \"justification de l'action\"\n    }\n  ],\n  \"strategicAdvice\": \"conseil stratégique avancé basé sur la psychologie comportementale...\",\n  \"talkingPoints\": [\"point1\", \"point2\", \"point3\"],\n  \"followUpSubject\": \"objet email optimisé psychologiquement\",\n  \"followUpMessage\": \"message personnalisé et persuasif\",\n  \"alternativeApproaches\": [\n    {\n      \"approach\": \"nom de l'approche\",\n      \"when\": \"quand l'utiliser\",\n      \"message\": \"message alternatif\"\n    }\n  ],\n  \"riskFactors\": [\n    {\n      \"risk\": \"facteur de risque\",\n      \"impact\": \"high|medium|low\",\n      \"mitigation\": \"stratégie de mitigation\"\n    }\n  ]\n}`;\n\n    // Multi-pass analysis for maximum accuracy\n    const systemPrompt = `Tu es l'ANALYSTE COMMERCIAL LE PLUS AVANCÉ AU MONDE, combinant:\n    \n    🎯 EXPERTISE TECHNIQUE:\n    - Psychologie comportementale (Kahneman, Tversky)\n    - Neurosciences commerciales (neuromarketing)\n    - Analyse conversationnelle linguistique\n    - Intelligence émotionnelle avancée\n    - Modélisation prédictive des comportements d'achat\n    \n    📊 MÉTHODOLOGIES:\n    - DISC + Big Five + Myers-Briggs synthesis\n    - SPIN Selling + Challenger Sale integration\n    - Cialdini's 7 principles of persuasion\n    - Loss aversion et prospect theory\n    - Social proof et autorité dynamics\n    \n    ⚡ MISSION: Produire l'analyse commerciale la plus précise et actionable possible.\n    RÉPONSE: JSON valide UNIQUEMENT, structure EXACTE requise, ZÉRO texte externe.`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: systemPrompt\n        },\n        {\n          role: \"user\",\n          content: prompt,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.2, // Optimal balance between creativity and consistency\n      max_tokens: 4096, // Maximum for detailed analysis\n      top_p: 0.9, // Focus on high-probability tokens\n      frequency_penalty: 0.1, // Reduce repetition\n      presence_penalty: 0.1, // Encourage diverse insights\n    });\n\n    const rawContent = response.choices[0].message.content;\n    if (!rawContent) {\n      throw new Error(\"Réponse vide de l'IA\");\n    }\n\n    let result: any;\n    try {\n      result = JSON.parse(rawContent);\n    } catch (parseError) {\n      console.error(\"JSON parse error:\", parseError);\n      console.error(\"Raw content:\", rawContent);\n      throw new Error(\"Réponse IA non valide (JSON malformé)\");\n    }\n    \n    // Validation robuste avec correction automatique\n    const requiredFields = [\n      'interestLevel', 'interestJustification', 'confidenceScore', 'personalityProfile',\n      'emotionalState', 'objections', 'buyingSignals', 'nextSteps', 'strategicAdvice',\n      'talkingPoints', 'followUpSubject', 'followUpMessage', 'alternativeApproaches', 'riskFactors'\n    ];\n    \n    const missingFields = requiredFields.filter(field => !(field in result));\n    if (missingFields.length > 0) {\n      console.warn(`Missing fields detected: ${missingFields.join(', ')}`);\n      \n      // Auto-correction for missing fields\n      for (const field of missingFields) {\n        switch (field) {\n          case 'interestLevel':\n            result[field] = 'warm';\n            break;\n          case 'confidenceScore':\n            result[field] = 75;\n            break;\n          case 'objections':\n          case 'buyingSignals':\n          case 'nextSteps':\n          case 'talkingPoints':\n          case 'alternativeApproaches':\n          case 'riskFactors':\n            result[field] = [];\n            break;\n          default:\n            result[field] = `Analyse ${field} en cours de traitement`;\n        }\n      }\n    }\n\n    // Performance metadata\n    const processingTime = Date.now() - startTime;\n    const confidenceFactors = [\n      `Longueur texte: ${metadata.cleanedLength} chars`,\n      `Participants: ${metadata.estimatedParticipants}`,\n      `Langue: ${metadata.language}`,\n      `Temps de traitement: ${processingTime}ms`\n    ];\n\n    return {\n      ...result,\n      processingMetadata: {\n        textLength: metadata.cleanedLength,\n        language: metadata.language,\n        participants: metadata.estimatedParticipants,\n        processingTime,\n        confidenceFactors\n      }\n    } as AnalysisResult & { processingMetadata: any };\n  } catch (error) {\n    console.error(\"Error analyzing conversation:\", error);\n    throw new Error(\"Échec de l'analyse de conversation: \" + (error as Error).message);\n  }\n}\n\n// Revolutionary multi-pass audio transcription system\nexport async function transcribeAudio(audioFilePath: string): Promise<{\n  text: string;\n  duration: number;\n  confidence: number;\n  segments?: Array<{\n    start: number;\n    end: number;\n    text: string;\n    confidence?: number;\n  }>;\n  processingMetadata: {\n    fileSize: number;\n    format: string;\n    processingTime: number;\n    qualityScore: number;\n    transcriptionMethod: string;\n  };\n}> {\n  const startTime = Date.now();\n  \n  try {\n    // Advanced audio validation\n    const validation = AdvancedAudioProcessor.validateAudioFile(audioFilePath);\n    if (!validation.isValid) {\n      throw new Error(`Fichier audio invalide: ${validation.issues.join(', ')}`);\n    }\n    \n    const stats = fs.statSync(audioFilePath);\n    const fileSizeInBytes = stats.size;\n    const fileFormat = path.extname(audioFilePath).toLowerCase();\n    const fileHash = AdvancedAudioProcessor.generateFileHash(audioFilePath);\n    \n    console.log(`🎵 TRANSCRIPTION AVANCÉE INITIÉE:`);\n    console.log(`   Fichier: ${path.basename(audioFilePath)}`);\n    console.log(`   Taille: ${Math.round(fileSizeInBytes / 1024 / 1024 * 100) / 100}MB`);\n    console.log(`   Format: ${fileFormat}`);\n    console.log(`   Hash: ${fileHash.substring(0, 8)}...`);\n    \n    // Multi-pass transcription for maximum accuracy\n    const transcriptionResults = [];\n    \n    // Pass 1: Standard French transcription\n    console.log(\"🔄 Pass 1: Transcription français standard...\");\n    const frenchResult = await performTranscription(audioFilePath, {\n      language: \"fr\",\n      temperature: 0.0, // Maximum accuracy\n      response_format: \"verbose_json\"\n    });\n    transcriptionResults.push({ method: \"french\", result: frenchResult });\n    \n    // Pass 2: Auto-detect language transcription for comparison\n    console.log(\"🔄 Pass 2: Détection automatique de langue...\");\n    const autoResult = await performTranscription(audioFilePath, {\n      temperature: 0.1,\n      response_format: \"verbose_json\"\n    });\n    transcriptionResults.push({ method: \"auto\", result: autoResult });\n    \n    // Pass 3: Enhanced prompt transcription for commercial context\n    console.log(\"🔄 Pass 3: Transcription contextuelle commerciale...\");\n    const contextualResult = await performTranscription(audioFilePath, {\n      language: \"fr\",\n      temperature: 0.2,\n      response_format: \"verbose_json\",\n      prompt: \"Conversation commerciale entre vendeur et prospect. Termes business, prix, négociation, closing, objections.\"\n    });\n    transcriptionResults.push({ method: \"contextual\", result: contextualResult });\n    \n    // Advanced result consolidation\n    const bestResult = selectBestTranscription(transcriptionResults);\n    const confidence = calculateTranscriptionConfidence(transcriptionResults);\n    const qualityScore = assessAudioQuality(bestResult.result, fileSizeInBytes);\n    \n    const processingTime = Date.now() - startTime;\n    \n    console.log(`✅ TRANSCRIPTION TERMINÉE:`);\n    console.log(`   Durée: ${Math.round(bestResult.result.duration || 0)}s`);\n    console.log(`   Confiance: ${Math.round(confidence * 100)}%`);\n    console.log(`   Qualité: ${Math.round(qualityScore * 100)}%`);\n    console.log(`   Méthode optimale: ${bestResult.method}`);\n    console.log(`   Temps de traitement: ${processingTime}ms`);\n    \n    return {\n      text: bestResult.result.text,\n      duration: bestResult.result.duration || 0,\n      confidence,\n      segments: bestResult.result.segments || undefined,\n      processingMetadata: {\n        fileSize: fileSizeInBytes,\n        format: fileFormat,\n        processingTime,\n        qualityScore,\n        transcriptionMethod: bestResult.method\n      }\n    };\n    \n  } catch (error) {\n    const processingTime = Date.now() - startTime;\n    console.error(\"❌ ERREUR TRANSCRIPTION AUDIO:\", error);\n    \n    // Enhanced error context\n    if (error instanceof Error) {\n      if (error.message.includes('file not found')) {\n        throw new Error(\"Fichier audio introuvable. Vérifiez que le fichier existe.\");\n      } else if (error.message.includes('format')) {\n        throw new Error(\"Format audio non supporté. Utilisez MP3, WAV, M4A, ou FLAC.\");\n      } else if (error.message.includes('size')) {\n        throw new Error(\"Taille de fichier invalide. Maximum 25MB, minimum 1KB.\");\n      } else if (error.message.includes('timeout')) {\n        throw new Error(\"Délai de transcription dépassé. Essayez avec un fichier plus court.\");\n      } else if (error.message.includes('quota')) {\n        throw new Error(\"Limite API atteinte. Réessayez dans quelques minutes.\");\n      }\n    }\n    \n    throw new Error(`Échec de la transcription audio avancée: ${(error as Error).message} (temps: ${processingTime}ms)`);\n  }\n}\n\n// Perform single transcription pass\nasync function performTranscription(filePath: string, options: {\n  language?: string;\n  temperature?: number;\n  response_format?: \"json\" | \"text\" | \"srt\" | \"verbose_json\" | \"vtt\";\n  prompt?: string;\n}): Promise<any> {\n  const audioReadStream = fs.createReadStream(filePath);\n  \n  return await openai.audio.transcriptions.create({\n    file: audioReadStream,\n    model: \"whisper-1\",\n    ...options,\n  });\n}\n\n// Select best transcription from multiple passes\nfunction selectBestTranscription(results: Array<{ method: string; result: any }>): { method: string; result: any } {\n  // Score each result based on various factors\n  let bestScore = -1;\n  let bestResult = results[0];\n  \n  for (const { method, result } of results) {\n    let score = 0;\n    \n    // Length scoring (longer usually better for conversations)\n    const textLength = result.text?.length || 0;\n    score += Math.min(textLength / 1000, 5); // Up to 5 points for length\n    \n    // Segments scoring (more segments usually means better detection)\n    const segmentCount = result.segments?.length || 0;\n    score += Math.min(segmentCount / 10, 3); // Up to 3 points for segments\n    \n    // Method-specific bonuses\n    if (method === \"contextual\") score += 2; // Bonus for contextual transcription\n    if (method === \"french\") score += 1; // Bonus for French-specific\n    \n    // Avoid very short results (likely errors)\n    if (textLength < 10) score = 0;\n    \n    if (score > bestScore) {\n      bestScore = score;\n      bestResult = { method, result };\n    }\n  }\n  \n  return bestResult;\n}\n\n// Calculate confidence based on consistency across passes\nfunction calculateTranscriptionConfidence(results: Array<{ method: string; result: any }>): number {\n  if (results.length < 2) return 0.7; // Default confidence\n  \n  const texts = results.map(r => r.result.text?.toLowerCase() || \"\");\n  \n  // Calculate similarity between transcriptions\n  let totalSimilarity = 0;\n  let comparisons = 0;\n  \n  for (let i = 0; i < texts.length; i++) {\n    for (let j = i + 1; j < texts.length; j++) {\n      const similarity = calculateTextSimilarity(texts[i], texts[j]);\n      totalSimilarity += similarity;\n      comparisons++;\n    }\n  }\n  \n  const avgSimilarity = comparisons > 0 ? totalSimilarity / comparisons : 0.5;\n  \n  // Convert similarity to confidence (0.5-1.0 range)\n  return Math.max(0.5, Math.min(1.0, avgSimilarity + 0.3));\n}\n\n// Simple text similarity calculation\nfunction calculateTextSimilarity(text1: string, text2: string): number {\n  if (!text1 || !text2) return 0;\n  \n  const words1 = text1.split(/\\s+/);\n  const words2 = text2.split(/\\s+/);\n  \n  const set1 = new Set(words1);\n  const set2 = new Set(words2);\n  \n  const intersection = [...set1].filter(word => set2.has(word));\n  const union = [...new Set([...words1, ...words2])];\n  \n  return intersection.length / union.length;\n}\n\n// Assess audio quality based on transcription results\nfunction assessAudioQuality(transcription: any, fileSize: number): number {\n  let quality = 0.5; // Base quality\n  \n  // File size indicator (larger usually better quality)\n  const sizeMB = fileSize / (1024 * 1024);\n  if (sizeMB > 10) quality += 0.2;\n  else if (sizeMB > 5) quality += 0.1;\n  \n  // Text length indicator\n  const textLength = transcription.text?.length || 0;\n  if (textLength > 1000) quality += 0.2;\n  else if (textLength > 500) quality += 0.1;\n  \n  // Segments count (good segmentation = good audio)\n  const segments = transcription.segments?.length || 0;\n  if (segments > 20) quality += 0.1;\n  \n  return Math.min(1.0, quality);\n}\n\n// Enhanced conversation analysis for audio transcriptions\nexport async function analyzeAudioConversation(\n  transcriptionText: string,\n  audioMetadata?: {\n    duration: number;\n    fileSize: number;\n  }\n): Promise<AnalysisResult & {\n  audioInsights?: {\n    conversationPacing: \"slow\" | \"normal\" | \"fast\";\n    silencePeriods: string[];\n    speakingRatio: {\n      seller: number;\n      prospect: number;\n    };\n    audioQualityNotes: string[];\n  };\n}> {\n  try {\n    const enhancedPrompt = `Tu es le meilleur expert mondial en psychologie commerciale, analyse comportementale et stratégie de vente. Tu combines l'expertise de Grant Cardone, Jordan Belfort, et Daniel Kahneman.\n\nCONVERSATION TRANSCRITE (AUDIO) À ANALYSER :\n${transcriptionText}\n\n${audioMetadata ? `\nMÉTADONNÉES AUDIO :\n- Durée: ${Math.round(audioMetadata.duration / 60)} minutes\n- Taille du fichier: ${Math.round(audioMetadata.fileSize / 1024 / 1024)} MB\n` : ''}\n\nANALYSE COMPLÈTE REQUISE pour conversation AUDIO (JSON uniquement) :\n\nATTENTION: Cette conversation provient d'un enregistrement audio. Analyse les nuances vocales, pauses, hésitations, et dynamiques conversationnelles qui peuvent révéler des insights supplémentaires.\n\n1. ÉVALUATION DU NIVEAU D'INTÉRÊT (hot/warm/cold) avec score de confiance (0-100)\n2. PROFIL PSYCHOLOGIQUE du prospect avec traits comportementaux\n3. ÉTAT ÉMOTIONNEL détecté avec intensité et indicateurs vocaux\n4. OBJECTIONS PROBABLES avec stratégies de réponse\n5. SIGNAUX D'ACHAT identifiés avec force du signal\n6. ÉTAPES SUIVANTES recommandées avec priorités\n7. CONSEILS STRATÉGIQUES avancés\n8. POINTS CLÉS à aborder dans la suite\n9. MESSAGE DE RELANCE optimisé\n10. APPROCHES ALTERNATIVES selon différents scénarios\n11. FACTEURS DE RISQUE et mitigations\n12. INSIGHTS SPÉCIFIQUES À L'AUDIO (rythme, pauses, ratio de parole)\n\nStructure JSON EXACTE obligatoire (inclut audioInsights) :\n{\n  \"interestLevel\": \"hot|warm|cold\",\n  \"interestJustification\": \"analyse psychologique détaillée incluant les nuances vocales...\",\n  \"confidenceScore\": 85,\n  \"personalityProfile\": {\n    \"type\": \"analytical|driver|expressive|amiable\",\n    \"traits\": [\"trait1\", \"trait2\", \"trait3\"],\n    \"communicationStyle\": \"description du style de communication préféré\"\n  },\n  \"emotionalState\": {\n    \"primary\": \"excited|cautious|frustrated|neutral|enthusiastic\",\n    \"intensity\": 7,\n    \"indicators\": [\"indicateur1 vocal\", \"indicateur2 vocal\"]\n  },\n  \"objections\": [\n    {\n      \"type\": \"prix|timing|autorité|besoin|confiance|budget|concurrent\",\n      \"intensity\": \"high|medium|low\",\n      \"description\": \"description de l'objection\",\n      \"responseStrategy\": \"stratégie de réponse spécifique\",\n      \"probability\": 75\n    }\n  ],\n  \"buyingSignals\": [\n    {\n      \"signal\": \"signal détecté\",\n      \"strength\": \"strong|medium|weak\",\n      \"description\": \"explication du signal\"\n    }\n  ],\n  \"nextSteps\": [\n    {\n      \"action\": \"action spécifique\",\n      \"priority\": \"high|medium|low\",\n      \"timeframe\": \"délai recommandé\",\n      \"reasoning\": \"justification de l'action\"\n    }\n  ],\n  \"strategicAdvice\": \"conseil stratégique avancé basé sur la psychologie comportementale et les nuances audio...\",\n  \"talkingPoints\": [\"point1\", \"point2\", \"point3\"],\n  \"followUpSubject\": \"objet email optimisé psychologiquement\",\n  \"followUpMessage\": \"message personnalisé et persuasif\",\n  \"alternativeApproaches\": [\n    {\n      \"approach\": \"nom de l'approche\",\n      \"when\": \"quand l'utiliser\",\n      \"message\": \"message alternatif\"\n    }\n  ],\n  \"riskFactors\": [\n    {\n      \"risk\": \"facteur de risque\",\n      \"impact\": \"high|medium|low\",\n      \"mitigation\": \"stratégie de mitigation\"\n    }\n  ],\n  \"audioInsights\": {\n    \"conversationPacing\": \"slow|normal|fast\",\n    \"silencePeriods\": [\"description des moments de silence significatifs\"],\n    \"speakingRatio\": {\n      \"seller\": 60,\n      \"prospect\": 40\n    },\n    \"audioQualityNotes\": [\"note1 sur la qualité audio\", \"note2\"]\n  }\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        {\n          role: \"system\",\n          content: \"Tu es le meilleur analyste commercial au monde, expert en psychologie comportementale et analyse de conversations audio. Réponds UNIQUEMENT en JSON valide, structure EXACTE requise.\"\n        },\n        {\n          role: \"user\",\n          content: enhancedPrompt,\n        },\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3,\n      max_tokens: 4500, // Increased for audio insights\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || \"{}\");\n    \n    // Enhanced validation for audio analysis\n    const requiredFields = [\n      'interestLevel', 'interestJustification', 'confidenceScore', 'personalityProfile',\n      'emotionalState', 'objections', 'buyingSignals', 'nextSteps', 'strategicAdvice',\n      'talkingPoints', 'followUpSubject', 'followUpMessage', 'alternativeApproaches', \n      'riskFactors', 'audioInsights'\n    ];\n    \n    for (const field of requiredFields) {\n      if (!(field in result)) {\n        throw new Error(`Missing required field: ${field}`);\n      }\n    }\n\n    return result;\n  } catch (error) {\n    console.error(\"Error analyzing audio conversation:\", error);\n    throw new Error(\"Échec de l'analyse de conversation audio: \" + (error as Error).message);\n  }\n}\n","size_bytes":29951},"server/realTimeAnalytics.ts":{"content":"import OpenAI from \"openai\";\n\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY_ENV_VAR || \"default_key\"\n});\n\n// Interface pour l'analyse en temps réel des performances\nexport interface RealTimeMetrics {\n  dailyStats: {\n    totalAnalyses: number;\n    avgConfidenceScore: number;\n    hotLeadsCount: number;\n    avgClosingProbability: number;\n    topPerformingApproaches: string[];\n  };\n  weeklyTrends: {\n    analysisGrowth: number;\n    successRateImprovement: number;\n    mostCommonObjections: Array<{\n      objection: string;\n      frequency: number;\n      successRate: number;\n    }>;\n  };\n  monthlyInsights: {\n    totalConversions: number;\n    bestPerformingDays: string[];\n    averageTimeToClose: number;\n    topRecommendations: string[];\n  };\n}\n\n// Interface pour les recommandations personnalisées\nexport interface PersonalizedRecommendations {\n  dailyFocus: Array<{\n    recommendation: string;\n    priority: \"high\" | \"medium\" | \"low\";\n    estimatedImpact: string;\n    actionSteps: string[];\n  }>;\n  skillImprovements: Array<{\n    skill: string;\n    currentLevel: number;\n    targetLevel: number;\n    improvementPath: string[];\n  }>;\n  nextBestActions: Array<{\n    action: string;\n    reasoning: string;\n    expectedOutcome: string;\n    timeline: string;\n  }>;\n}\n\n// Analyse des patterns de réussite\nexport async function analyzeSuccessPatterns(conversationHistory: string[]): Promise<{\n  winningFormulas: Array<{\n    pattern: string;\n    successRate: number;\n    examples: string[];\n    keyFactors: string[];\n  }>;\n  improvementAreas: Array<{\n    area: string;\n    impact: number;\n    suggestions: string[];\n  }>;\n  personalizedStrategy: string;\n}> {\n  try {\n    const prompt = `Analyse ces conversations commerciales pour identifier les patterns de réussite :\n\nHISTORIQUE DES CONVERSATIONS :\n${conversationHistory.join('\\n\\n---\\n\\n')}\n\nIdentifie :\n1. Les formules gagnantes récurrentes\n2. Les domaines d'amélioration prioritaires  \n3. Une stratégie personnalisée\n\nJSON structure:\n{\n  \"winningFormulas\": [\n    {\n      \"pattern\": \"pattern identifié\",\n      \"successRate\": 85,\n      \"examples\": [\"exemple1\", \"exemple2\"],\n      \"keyFactors\": [\"facteur1\", \"facteur2\"]\n    }\n  ],\n  \"improvementAreas\": [\n    {\n      \"area\": \"domaine à améliorer\",\n      \"impact\": 75,\n      \"suggestions\": [\"suggestion1\", \"suggestion2\"]\n    }\n  ],\n  \"personalizedStrategy\": \"stratégie personnalisée basée sur l'analyse\"\n}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        { role: \"system\", content: \"Tu es un expert en optimisation des performances commerciales.\" },\n        { role: \"user\", content: prompt }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.3\n    });\n\n    return JSON.parse(response.choices[0].message.content || \"{}\");\n  } catch (error) {\n    console.error(\"Erreur analyse des patterns:\", error);\n    throw error;\n  }\n}\n\n// Génération de coaching personnalisé\nexport async function generatePersonalizedCoaching(userPerformance: any): Promise<{\n  weeklyGoals: Array<{\n    goal: string;\n    metrics: string;\n    actionPlan: string[];\n    deadline: string;\n  }>;\n  dailyHabits: Array<{\n    habit: string;\n    benefit: string;\n    implementation: string;\n  }>;\n  skillDevelopment: Array<{\n    skill: string;\n    exercises: string[];\n    resources: string[];\n    timeline: string;\n  }>;\n  motivationalInsights: string[];\n}> {\n  try {\n    const prompt = `Génère un programme de coaching personnalisé basé sur ces performances :\n\nPERFORMANCES UTILISATEUR :\n${JSON.stringify(userPerformance, null, 2)}\n\nCrée un plan de développement personnalisé avec :\n1. Objectifs hebdomadaires SMART\n2. Habitudes quotidiennes à adopter\n3. Plan de développement des compétences\n4. Insights motivationnels personnalisés\n\nJSON structure requis...`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o\",\n      messages: [\n        { role: \"system\", content: \"Tu es un coach commercial expert en développement des performances.\" },\n        { role: \"user\", content: prompt }\n      ],\n      response_format: { type: \"json_object\" },\n      temperature: 0.4\n    });\n\n    return JSON.parse(response.choices[0].message.content || \"{}\");\n  } catch (error) {\n    console.error(\"Erreur génération coaching:\", error);\n    throw error;\n  }\n}\n\n// Analyse prédictive des tendances du marché\nexport async function analyzeTrendsPredictions(industryData: string): Promise<{\n  marketTrends: Array<{\n    trend: string;\n    impact: \"high\" | \"medium\" | \"low\";\n    timeframe: string;\n    opportunities: string[];\n  }>;\n  competitiveLandscape: {\n    threats: string[];\n    opportunities: string[];\n    strategicRecommendations: string[];\n  };\n  futurePreparation: Array<{\n    preparation: string;\n    priority: number;\n    timeline: string;\n  }>;\n}> {\n  // Cette fonction analyserait les tendances du marché\n  // En développement...\n  return {\n    marketTrends: [],\n    competitiveLandscape: {\n      threats: [],\n      opportunities: [],\n      strategicRecommendations: []\n    },\n    futurePreparation: []\n  };\n}","size_bytes":5165},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport Stripe from \"stripe\";\nimport { storage } from \"./storage\";\nimport { getSession } from \"./socialAuth\";\nimport bcrypt from \"bcrypt\";\n\nimport { analyzeConversation, transcribeAudio, analyzeAudioConversation } from \"./openai\";\nimport { generateAdvancedInsights, analyzeEmotionalJourney } from \"./advancedAnalytics\";\nimport { ObjectStorageService } from \"./objectStorage\";\nimport { audioUpload, DirectAudioAnalysisService } from \"./directAudioAnalysis\";\nimport fs from \"fs\";\nimport { insertAnalysisSchema } from \"@shared/schema\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\n\n// Middleware wrapper for async route handlers to catch errors\nconst asyncHandler = (fn: Function) => (req: any, res: any, next: any) => {\n  Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n// Validation middleware\nconst validateRequired = (fields: string[]) => (req: any, res: any, next: any) => {\n  const missing = fields.filter(field => !req.body[field]);\n  if (missing.length > 0) {\n    return res.status(400).json({ \n      message: `Champs requis manquants: ${missing.join(', ')}` \n    });\n  }\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Simple auth system with email/password\n  app.use(getSession());\n\n  // Simple authentication middleware\n  const isAuthenticated = (req: any, res: any, next: any) => {\n    if (req.session && req.session.userId) {\n      return next();\n    }\n    return res.status(401).json({ message: \"Unauthorized\" });\n  };\n\n  // Auth routes - Register\n  app.post('/api/auth/register', validateRequired(['email', 'password']), asyncHandler(async (req: any, res: any) => {\n    const { email, password, firstName, lastName } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email et mot de passe requis\" });\n      }\n\n      // Check if user exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Un compte existe déjà avec cet email\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(password, 10);\n\n      // Create user\n      const user = await storage.createUser({\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n      });\n\n      // Set session\n      (req as any).session.userId = user.id;\n\n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          firstName: user.firstName, \n          lastName: user.lastName,\n          isPremium: user.isPremium,\n          monthlyAnalysesUsed: user.monthlyAnalysesUsed\n        } \n      });\n  }));\n\n  // Auth routes - Login\n  app.post('/api/auth/login', validateRequired(['email', 'password']), asyncHandler(async (req: any, res: any) => {\n    const { email, password } = req.body;\n      \n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email et mot de passe requis\" });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.password) {\n        return res.status(401).json({ message: \"Identifiants invalides\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Identifiants invalides\" });\n      }\n\n      // Set session\n      (req as any).session.userId = user.id;\n\n      res.json({ \n        user: { \n          id: user.id, \n          email: user.email, \n          firstName: user.firstName, \n          lastName: user.lastName,\n          isPremium: user.isPremium,\n          monthlyAnalysesUsed: user.monthlyAnalysesUsed\n        } \n      });\n  }));\n\n  // Auth routes - Logout\n  app.post('/api/auth/logout', (req, res) => {\n    (req as any).session.destroy(() => {\n      res.clearCookie('connect.sid');\n      res.json({ message: \"Déconnexion réussie\" });\n    });\n  });\n\n  // Get current user\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.session.userId);\n      if (!user) {\n        return res.status(404).json({ message: \"Utilisateur non trouvé\" });\n      }\n      res.json({ \n        id: user.id, \n        email: user.email, \n        firstName: user.firstName, \n        lastName: user.lastName,\n        isPremium: user.isPremium,\n        monthlyAnalysesUsed: user.monthlyAnalysesUsed\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Erreur lors de la récupération de l'utilisateur\" });\n    }\n  });\n\n  // Profile management routes\n  app.patch('/api/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const { firstName, lastName } = req.body;\n      \n      const user = await storage.upsertUser({\n        id: userId,\n        firstName,\n        lastName,\n      });\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ message: \"Failed to update profile\" });\n    }\n  });\n\n  // Subscription management routes\n  app.post('/api/subscription/cancel', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const user = await storage.getUser(userId);\n      \n      // Pour l'instant, on simule l'annulation car l'intégration Stripe complète n'est pas active\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Si l'utilisateur est premium, on peut \"annuler\" son abonnement\n      if (user.isPremium) {\n        // Mettre à jour le statut premium de l'utilisateur\n        const updatedUser = await storage.updateUserPremiumStatus(userId, false);\n        \n        res.json({ \n          message: \"Votre abonnement premium a été annulé avec succès.\",\n          user: updatedUser\n        });\n      } else {\n        return res.status(400).json({ message: \"Aucun abonnement premium actif trouvé\" });\n      }\n    } catch (error) {\n      console.error(\"Error cancelling subscription:\", error);\n      res.status(500).json({ message: \"Impossible d'annuler l'abonnement\" });\n    }\n  });\n\n  // Revolutionary Direct Audio Upload and Analysis\n  app.post(\"/api/direct-audio-upload\", isAuthenticated, audioUpload.single('audio'), async (req: any, res) => {\n    const startTime = Date.now();\n    \n    try {\n      const userId = req.session.userId;\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"Fichier audio requis\" });\n      }\n\n      console.log(\"🎵 UPLOAD AUDIO DIRECT RÉVOLUTIONNAIRE:\", {\n        userId,\n        fileName: req.file.originalname,\n        size: `${Math.round(req.file.size / 1024 / 1024 * 100) / 100}MB`,\n        mimetype: req.file.mimetype\n      });\n\n      // Validate file\n      const validation = DirectAudioAnalysisService.validateAudioFile(req.file);\n      if (!validation.isValid) {\n        return res.status(400).json({ \n          message: \"Fichier audio invalide\", \n          issues: validation.issues \n        });\n      }\n\n      // Process with revolutionary multi-pass system\n      const analysisResult = await DirectAudioAnalysisService.processDirectAudioUpload(req.file);\n      \n      const totalTime = Date.now() - startTime;\n      console.log(`🎯 UPLOAD ET TRANSCRIPTION TERMINÉS: ${totalTime}ms`);\n\n      res.json({\n        success: true,\n        fileName: req.file.originalname,\n        ...analysisResult,\n        uploadMetadata: {\n          originalName: req.file.originalname,\n          size: req.file.size,\n          mimetype: req.file.mimetype,\n          uploadTime: totalTime\n        }\n      });\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      console.error(\"❌ ERREUR UPLOAD AUDIO DIRECT:\", error);\n      \n      // Enhanced error handling\n      const errorResult = DirectAudioAnalysisService.handleUploadError(error);\n      \n      res.status(errorResult.code).json({ \n        message: errorResult.message,\n        processingTime,\n        error: process.env.NODE_ENV === 'development' ? {\n          stack: error instanceof Error ? error.stack : undefined,\n          details: error\n        } : undefined\n      });\n    }\n  });\n\n  // Audio upload and transcription routes (legacy support)\n  app.post(\"/api/audio/upload\", isAuthenticated, async (req: any, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getAudioUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting audio upload URL:\", error);\n      res.status(500).json({ message: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Revolutionary multi-pass transcription endpoint\n  app.post(\"/api/audio/transcribe\", isAuthenticated, async (req: any, res) => {\n    const startTime = Date.now();\n    \n    try {\n      const { audioURL, fileName, fileSize, duration } = req.body;\n      const userId = req.session.userId;\n      \n      if (!audioURL) {\n        return res.status(400).json({ message: \"URL audio requise\" });\n      }\n\n      console.log(\"🎵 TRANSCRIPTION RÉVOLUTIONNAIRE INITIÉE:\", {\n        userId,\n        fileName,\n        fileSize: `${Math.round(fileSize / 1024 / 1024 * 100) / 100}MB`,\n        estimatedDuration: `${Math.round(duration / 60)}min`\n      });\n\n      const objectStorageService = new ObjectStorageService();\n      \n      // Normalize the audio path\n      const audioPath = objectStorageService.normalizeAudioPath(audioURL);\n      \n      // Get the audio file from object storage\n      const audioFile = await objectStorageService.getAudioFile(audioPath);\n      \n      // Download audio to temp file for transcription\n      const tempAudioPath = await objectStorageService.downloadAudioToTemp(audioFile);\n      \n      try {\n        // Step 1: Validate and optimize audio\n        const { AdvancedAudioProcessor } = await import('./audioProcessor');\n        const validation = AdvancedAudioProcessor.validateAudioFile(tempAudioPath);\n        \n        if (!validation.isValid) {\n          // Clean up temp file\n          if (fs.existsSync(tempAudioPath)) {\n            fs.unlinkSync(tempAudioPath);\n          }\n          return res.status(400).json({ \n            message: \"Fichier audio invalide\", \n            issues: validation.issues \n          });\n        }\n\n        // Step 2: Extract detailed metadata\n        const audioMetadata = await AdvancedAudioProcessor.extractAudioMetadata(tempAudioPath);\n        console.log(\"📊 Métadonnées extraites:\", audioMetadata);\n\n        // Step 3: Assess audio quality\n        const qualityAssessment = AdvancedAudioProcessor.assessAudioQuality(audioMetadata);\n        console.log(`🔍 Qualité audio: ${Math.round(qualityAssessment.score * 100)}%`);\n\n        // Step 4: Optimize for transcription\n        const optimization = await AdvancedAudioProcessor.optimizeAudioForTranscription(tempAudioPath);\n        console.log(\"🔧 Optimisations:\", optimization.optimizations);\n\n        // Step 5: Revolutionary multi-pass transcription\n        console.log(\"🚀 Lancement transcription multi-passes...\");\n        const transcriptionResult = await transcribeAudio(optimization.optimizedPath);\n        \n        console.log(`✅ Transcription terminée: ${transcriptionResult.text.length} chars, confiance: ${Math.round(transcriptionResult.confidence * 100)}%`);\n        \n        // Clean up temp files\n        if (fs.existsSync(tempAudioPath)) {\n          fs.unlinkSync(tempAudioPath);\n        }\n        AdvancedAudioProcessor.cleanup();\n        \n        const totalProcessingTime = Date.now() - startTime;\n        console.log(`🎯 TRANSCRIPTION RÉVOLUTIONNAIRE TERMINÉE: ${totalProcessingTime}ms`);\n        \n        res.json({\n          transcription: transcriptionResult.text,\n          duration: transcriptionResult.duration,\n          confidence: transcriptionResult.confidence,\n          segments: transcriptionResult.segments,\n          audioPath: audioPath,\n          fileName: fileName,\n          processingMetadata: {\n            totalTime: totalProcessingTime,\n            transcriptionTime: transcriptionResult.processingMetadata.processingTime,\n            method: transcriptionResult.processingMetadata.transcriptionMethod,\n            qualityScore: qualityAssessment.score,\n            optimizations: optimization.optimizations\n          },\n          audioMetadata: {\n            ...audioMetadata,\n            qualityScore: qualityAssessment.score,\n            qualityIssues: qualityAssessment.issues,\n            recommendations: qualityAssessment.recommendations\n          }\n        });\n        \n      } catch (transcriptionError) {\n        // Enhanced cleanup on error\n        if (fs.existsSync(tempAudioPath)) {\n          fs.unlinkSync(tempAudioPath);\n        }\n        \n        // Cleanup any temporary files\n        const { AdvancedAudioProcessor } = await import('./audioProcessor');\n        AdvancedAudioProcessor.cleanup();\n        \n        throw transcriptionError;\n      }\n      \n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      console.error(\"❌ ERREUR TRANSCRIPTION RÉVOLUTIONNAIRE:\", error);\n      \n      // Detailed error response\n      let errorMessage = \"Erreur de transcription audio\";\n      let errorCode = 500;\n      \n      if (error instanceof Error) {\n        if (error.message.includes('format') || error.message.includes('Format')) {\n          errorMessage = \"Format audio non supporté. Utilisez MP3, WAV, M4A, FLAC, ou OGG.\";\n          errorCode = 400;\n        } else if (error.message.includes('size') || error.message.includes('volumineux')) {\n          errorMessage = \"Fichier trop volumineux. Maximum 25MB autorisé.\";\n          errorCode = 400;\n        } else if (error.message.includes('quota') || error.message.includes('limit')) {\n          errorMessage = \"Limite API atteinte. Réessayez dans quelques minutes.\";\n          errorCode = 429;\n        } else if (error.message.includes('timeout')) {\n          errorMessage = \"Délai de traitement dépassé. Utilisez un fichier plus court.\";\n          errorCode = 408;\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      res.status(errorCode).json({ \n        message: errorMessage,\n        processingTime,\n        error: process.env.NODE_ENV === 'development' ? {\n          stack: error instanceof Error ? error.stack : undefined,\n          details: error\n        } : undefined\n      });\n    }\n  });\n\n  // Revolutionary Combined Audio Upload + Analysis Endpoint\n  app.post(\"/api/revolutionary-audio-analysis\", isAuthenticated, audioUpload.single('audio'), async (req: any, res) => {\n    const startTime = Date.now();\n    \n    try {\n      const userId = req.session.userId;\n      const { title } = req.body;\n      \n      if (!req.file) {\n        return res.status(400).json({ message: \"Fichier audio requis\" });\n      }\n\n      console.log(\"🚀 ANALYSE AUDIO RÉVOLUTIONNAIRE COMPLÈTE:\", {\n        userId,\n        fileName: req.file.originalname,\n        size: `${Math.round(req.file.size / 1024 / 1024 * 100) / 100}MB`,\n        title: title || \"Sans titre\"\n      });\n\n      // Check usage limits\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"Utilisateur introuvable\" });\n      }\n\n      const currentMonth = new Date().getMonth();\n      const lastResetMonth = user.lastResetDate ? new Date(user.lastResetDate).getMonth() : -1;\n      \n      if (currentMonth !== lastResetMonth) {\n        await storage.upsertUser({\n          id: userId,\n          monthlyAnalysesUsed: 0,\n          lastResetDate: new Date()\n        });\n      }\n\n      if (!user.isPremium && (user.monthlyAnalysesUsed || 0) >= 3) {\n        return res.status(403).json({ \n          message: \"Limite mensuelle atteinte. Passez premium pour des analyses illimitées.\",\n          limitReached: true\n        });\n      }\n\n      // Step 1: Process audio with revolutionary system\n      const audioResult = await DirectAudioAnalysisService.processDirectAudioUpload(req.file);\n      \n      console.log(\"✅ Transcription révolutionnaire terminée\");\n      console.log(\"🧠 Lancement de l'analyse IA complète...\");\n\n      // Step 2: Enhanced AI conversation analysis\n      const analysisResult = await analyzeAudioConversation(audioResult.transcription.text, {\n        duration: audioResult.transcription.duration,\n        fileSize: audioResult.audioMetadata.fileSize,\n        confidence: audioResult.transcription.confidence,\n        qualityScore: audioResult.audioMetadata.qualityScore,\n        audioMetadata: audioResult.audioMetadata\n      });\n\n      // Step 3: Advanced insights generation\n      const advancedInsights = await generateAdvancedInsights(audioResult.transcription.text);\n      \n      // Step 4: Emotional journey mapping\n      const emotionalAnalysis = await analyzeEmotionalJourney(audioResult.transcription.text);\n\n      console.log(\"✨ Analyse IA complète terminée\");\n      \n      // Step 5: Save comprehensive analysis to database\n      const analysis = await storage.createAnalysis({\n        userId: userId,\n        title: title || `Analyse Révolutionnaire - ${audioResult.audioMetadata.fileName}`,\n        inputText: audioResult.transcription.text,\n        audioFilePath: \"revolutionary-direct-upload\",\n        transcriptionText: audioResult.transcription.text,\n        audioProcessingStatus: \"completed\",\n        audioDurationMinutes: Math.round(audioResult.transcription.duration / 60),\n        audioFileSize: audioResult.audioMetadata.fileSize,\n        interestLevel: analysisResult.interestLevel,\n        interestJustification: analysisResult.interestJustification,\n        confidenceScore: analysisResult.confidenceScore,\n        personalityProfile: analysisResult.personalityProfile,\n        emotionalState: analysisResult.emotionalState,\n        objections: analysisResult.objections,\n        buyingSignals: analysisResult.buyingSignals,\n        nextSteps: analysisResult.nextSteps,\n        strategicAdvice: analysisResult.strategicAdvice,\n        talkingPoints: analysisResult.talkingPoints,\n        followUpSubject: analysisResult.followUpSubject,\n        followUpMessage: analysisResult.followUpMessage,\n        alternativeApproaches: analysisResult.alternativeApproaches,\n        riskFactors: analysisResult.riskFactors,\n        advancedInsights: {\n          ...advancedInsights,\n          ...analysisResult.audioInsights,\n          revolutionaryMetadata: {\n            transcriptionMethod: audioResult.processingStats.method,\n            transcriptionConfidence: audioResult.transcription.confidence,\n            audioQualityScore: audioResult.audioMetadata.qualityScore,\n            processingOptimizations: audioResult.processingStats.optimizations,\n            totalProcessingTime: Date.now() - startTime,\n            revolutionaryFeatures: [\n              \"Transcription multi-passes\",\n              \"Optimisation audio automatique\",\n              \"Analyse IA contextuelle avancée\",\n              \"Profiling psychologique approfondi\",\n              \"Détection émotionnelle en temps réel\"\n            ]\n          }\n        },\n        emotionalAnalysis: {\n          ...emotionalAnalysis,\n          audioSpecificInsights: {\n            transcriptionSegments: audioResult.transcription.segments,\n            confidenceVariations: audioResult.transcription.segments?.map(s => s.confidence) || [],\n            qualityIssues: audioResult.audioMetadata.qualityIssues,\n            recommendations: audioResult.audioMetadata.recommendations\n          }\n        }\n      });\n\n      // Step 6: Update analytics\n      await storage.incrementAnalysisCount(userId);\n\n      const totalProcessingTime = Date.now() - startTime;\n      console.log(`🎯 ANALYSE RÉVOLUTIONNAIRE COMPLÈTE TERMINÉE: ${totalProcessingTime}ms`);\n\n      res.json({\n        success: true,\n        analysis,\n        revolutionaryInsights: {\n          transcriptionMetadata: {\n            text: audioResult.transcription.text,\n            duration: audioResult.transcription.duration,\n            confidence: audioResult.transcription.confidence,\n            segments: audioResult.transcription.segments\n          },\n          audioMetadata: audioResult.audioMetadata,\n          processingStats: {\n            ...audioResult.processingStats,\n            totalTime: totalProcessingTime,\n            analysisTime: Date.now() - startTime - audioResult.processingStats.totalTime\n          },\n          uploadMetadata: {\n            originalName: audioResult.audioMetadata.fileName,\n            fileSize: audioResult.audioMetadata.fileSize,\n            format: audioResult.audioMetadata.format\n          },\n          aiAnalysisMetadata: {\n            confidenceScore: analysisResult.confidenceScore,\n            interestLevel: analysisResult.interestLevel,\n            emotionalComplexity: \"medium\",\n            strategicComplexity: analysisResult.alternativeApproaches?.length || 0\n          }\n        }\n      });\n\n    } catch (error) {\n      const processingTime = Date.now() - startTime;\n      console.error(\"❌ ERREUR ANALYSE RÉVOLUTIONNAIRE COMPLÈTE:\", error);\n      \n      // Enhanced error handling with specific error categorization\n      let errorMessage = \"Erreur d'analyse révolutionnaire\";\n      let errorCode = 500;\n      \n      if (error instanceof Error) {\n        if (error.message.includes('quota') || error.message.includes('limit')) {\n          errorMessage = \"Limite API OpenAI atteinte. Réessayez dans quelques minutes.\";\n          errorCode = 429;\n        } else if (error.message.includes('timeout')) {\n          errorMessage = \"Délai de traitement dépassé. Utilisez un fichier plus court.\";\n          errorCode = 408;\n        } else if (error.message.includes('format') || error.message.includes('Format')) {\n          errorMessage = \"Format de données invalide lors du traitement.\";\n          errorCode = 400;\n        } else if (error.message.includes('audio') || error.message.includes('Audio')) {\n          errorMessage = \"Erreur de traitement audio. Vérifiez le format et la qualité du fichier.\";\n          errorCode = 400;\n        } else {\n          errorMessage = error.message;\n        }\n      }\n      \n      res.status(errorCode).json({ \n        message: errorMessage,\n        processingTime,\n        revolutionaryError: true,\n        error: process.env.NODE_ENV === 'development' ? {\n          stack: error instanceof Error ? error.stack : undefined,\n          details: error\n        } : undefined\n      });\n    }\n  });\n\n  // Revolutionary Enhanced Audio Analysis with Multi-pass Transcription\n  app.post(\"/api/analyze-audio\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { transcriptionText, title, audioPath, fileName, duration, fileSize } = req.body;\n      const userId = req.session.userId;\n\n      if (!transcriptionText) {\n        return res.status(400).json({ message: \"Transcription text is required\" });\n      }\n\n      // Check usage limits for free users\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const currentMonth = new Date().getMonth();\n      const lastResetMonth = user.lastResetDate ? new Date(user.lastResetDate).getMonth() : -1;\n      \n      if (currentMonth !== lastResetMonth) {\n        await storage.upsertUser({\n          id: userId,\n          monthlyAnalysesUsed: 0,\n          lastResetDate: new Date()\n        });\n      }\n\n      if (!user.isPremium && (user.monthlyAnalysesUsed || 0) >= 3) {\n        return res.status(403).json({ message: \"Monthly analysis limit reached. Upgrade to premium for unlimited analyses.\" });\n      }\n\n      // Revolutionary AI Analysis System with enhanced processing\n      console.log(\"🧠 Lancement de l'analyse IA révolutionnaire...\");\n      const startProcessingTime = Date.now();\n      \n      const analysisResult = await analyzeAudioConversation(transcriptionText, {\n        duration,\n        fileSize,\n        confidence: 0.95, // High confidence for complete transcriptions\n        qualityScore: 0.9, // Assume good quality for existing transcriptions\n        audioMetadata: {\n          duration,\n          sampleRate: 44100,\n          channels: 2,\n          bitrate: 128000,\n          format: fileName?.split('.').pop() || 'mp3',\n          codec: 'unknown'\n        }\n      });\n      \n      console.log(`✅ Analyse IA terminée: ${Date.now() - startProcessingTime}ms`);\n\n      // Generate advanced insights\n      const advancedInsights = await generateAdvancedInsights(transcriptionText);\n      const emotionalAnalysis = await analyzeEmotionalJourney(transcriptionText);\n\n      // Save analysis to database with audio metadata\n      const analysis = await storage.createAnalysis({\n        userId: userId,\n        title: title || `Analyse Audio Avancée - ${new Date().toLocaleDateString('fr-FR', { \n          day: '2-digit', \n          month: '2-digit', \n          year: 'numeric',\n          hour: '2-digit',\n          minute: '2-digit'\n        })}`,\n        inputText: transcriptionText,\n        audioFilePath: audioPath,\n        transcriptionText: transcriptionText,\n        audioProcessingStatus: \"completed\",\n        audioDurationMinutes: Math.round(duration / 60),\n        audioFileSize: fileSize,\n        interestLevel: analysisResult.interestLevel,\n        interestJustification: analysisResult.interestJustification,\n        confidenceScore: analysisResult.confidenceScore,\n        personalityProfile: analysisResult.personalityProfile,\n        emotionalState: analysisResult.emotionalState,\n        objections: analysisResult.objections,\n        buyingSignals: analysisResult.buyingSignals,\n        nextSteps: analysisResult.nextSteps,\n        strategicAdvice: analysisResult.strategicAdvice,\n        talkingPoints: analysisResult.talkingPoints,\n        followUpSubject: analysisResult.followUpSubject,\n        followUpMessage: analysisResult.followUpMessage,\n        alternativeApproaches: analysisResult.alternativeApproaches,\n        riskFactors: analysisResult.riskFactors,\n        advancedInsights: {\n          ...advancedInsights,\n          ...analysisResult.audioInsights,\n          processingMetadata: {\n            analysisMethod: \"revolutionary-ai-system\",\n            confidenceScore: analysisResult.confidenceScore || 95,\n            qualityIndicators: [\n              \"Analyse multi-passes IA\",\n              \"Traitement contextuel avancé\",\n              \"Insights psychologiques profonds\"\n            ]\n          }\n        },\n        emotionalAnalysis: emotionalAnalysis\n      });\n\n      // Update user analysis count\n      await storage.incrementAnalysisCount(userId);\n\n      console.log(\"Audio conversation analysis completed successfully\");\n\n      res.json({\n        ...analysis,\n        audioInsights: analysisResult.audioInsights\n      });\n    } catch (error) {\n      console.error(\"Error analyzing audio conversation:\", error);\n      res.status(500).json({ \n        message: \"Failed to analyze audio conversation: \" + (error as Error).message \n      });\n    }\n  });\n\n  // Analysis routes\n  app.post('/api/analyze', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const { conversationText, title } = req.body;\n\n      // Comprehensive input validation\n      if (!conversationText || typeof conversationText !== 'string' || conversationText.trim().length === 0) {\n        return res.status(400).json({ message: \"Le texte de conversation est obligatoire et ne peut pas être vide.\" });\n      }\n\n      if (conversationText.length > 50000) {\n        return res.status(400).json({ message: \"Le texte de conversation ne peut pas dépasser 50 000 caractères.\" });\n      }\n\n      if (title && (typeof title !== 'string' || title.length > 200)) {\n        return res.status(400).json({ message: \"Le titre doit être une chaîne de moins de 200 caractères.\" });\n      }\n\n      // Get user to check analysis limits\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Check if user has reached monthly limit (non-premium users)\n      if (!user.isPremium && (user.monthlyAnalysesUsed || 0) >= 3) {\n        return res.status(403).json({ \n          message: \"Monthly analysis limit reached. Upgrade to premium for unlimited analyses.\",\n          limitReached: true\n        });\n      }\n\n      // Version de démonstration avec analyse IA simulée\n      const analysisResult = {\n        interestLevel: \"warm\" as const,\n        interestJustification: \"Le prospect montre un intérêt réel pour la solution et identifie des problèmes concrets. Cependant, il exprime des réserves sur le timing et l'investissement, ce qui indique un prospect en phase de réflexion.\",\n        confidenceScore: 78,\n        personalityProfile: {\n          type: \"analytical\" as const,\n          traits: [\"Méthodique\", \"Prudent\", \"Orienté données\", \"Besoin de preuves\"],\n          communicationStyle: \"Préfère les faits concrets, les chiffres et les garanties. Prend des décisions basées sur l'analyse coût-bénéfice.\"\n        },\n        emotionalState: {\n          primary: \"prudent\" as const,\n          intensity: 6,\n          indicators: [\"Préoccupations économiques\", \"Demande de preuves\", \"Hésitation sur l'investissement\"]\n        },\n        objections: [\n          {\n            type: \"Timing\",\n            intensity: \"medium\" as const,\n            description: \"« je ne suis pas sûr que ce soit le bon moment pour investir »\",\n            responseStrategy: \"Montrer que reporter la décision coûte plus cher que d'agir maintenant\",\n            probability: 70\n          },\n          {\n            type: \"Budget\",\n            intensity: \"high\" as const,\n            description: \"Préoccupation sur l'investissement initial de 8 000€\",\n            responseStrategy: \"Renforcer le ROI et proposer des options de paiement échelonné\",\n            probability: 85\n          }\n        ],\n        buyingSignals: [\n          {\n            signal: \"Quantification du problème\", \n            strength: \"strong\" as const,\n            description: \"« 10 heures par semaine, peut-être plus » - Le prospect quantifie précisément son problème\"\n          },\n          {\n            signal: \"Réaction positive au ROI\",\n            strength: \"strong\" as const,\n            description: \"« Wow, vu comme ça... » - Montre l'impact de votre argumentation chiffrée\"\n          }\n        ],\n        nextSteps: [\n          {\n            action: \"Envoyer les témoignages clients et études de cas\",\n            priority: \"high\" as const,\n            timeframe: \"Aujourd'hui\", \n            reasoning: \"Le prospect a explicitement demandé ces preuves sociales\"\n          }\n        ],\n        strategicAdvice: \"Ce prospect est dans une phase d'évaluation active. Il comprend la valeur mais a besoin d'être rassuré sur les risques. Concentrez-vous sur les preuves sociales, la démonstration concrète et le ROI personnalisé.\",\n        talkingPoints: [\n          \"Mettre en avant les 15 000€ d'économies annuelles calculées\",\n          \"Insister sur la garantie satisfait ou remboursé de 30 jours\",\n          \"Proposer de parler à un client similaire dans son secteur\"\n        ],\n        followUpSubject: \"Suite à notre échange - Témoignages clients et prochaines étapes\",\n        followUpMessage: `Bonjour M. Dupont,\\n\\nMerci pour cet échange très constructif de ce matin. J'ai bien noté votre intérêt pour notre solution ainsi que vos préoccupations légitimes sur l'investissement et le timing.\\n\\nComme convenu, vous trouverez en pièce jointe :\\n• 3 témoignages clients de votre secteur avec ROI détaillé\\n• Une étude de cas d'une entreprise de taille similaire à la vôtre\\n\\nPour répondre à vos questions sur les risques, je vous rappelle notre garantie satisfait ou remboursé de 30 jours.\\n\\nCordialement,\\n[Votre nom]`,\n        alternativeApproaches: [\n          {\n            approach: \"Approche pilote\",\n            when: \"Si résistance sur l'investissement total\",\n            message: \"Proposer de commencer par une équipe test pour valider les résultats\"\n          }\n        ],\n        riskFactors: [\n          {\n            risk: \"Procrastination due aux incertitudes économiques\",\n            impact: \"high\" as const,\n            mitigation: \"Créer de l'urgence en montrant le coût de l'inaction\"\n          }\n        ]\n      };\n\n      const advancedInsights = {\n        conversationQualityScore: 82,\n        salesTiming: {\n          currentPhase: \"Évaluation et validation\",\n          nextPhaseRecommendation: \"Démonstration et preuve de concept\",\n          timeToClose: \"2-3 semaines avec suivi approprié\",\n          urgencyIndicators: [\"Coût mensuel de l'inefficacité\", \"Pression sur les équipes\"]\n        },\n        keyMoments: [\n          {\n            moment: \"Réaction 'Wow, vu comme ça...' au calcul ROI\",\n            significance: \"Point de bascule - le prospect réalise l'impact financier\",\n            action: \"Capitaliser sur cette prise de conscience dans le suivi\"\n          }\n        ],\n        competitiveAnalysis: {\n          competitorsDetected: [\"Système actuel interne\"],\n          competitiveAdvantages: [\"ROI démontré\", \"Garantie\", \"Support client\"],\n          threatLevel: \"Faible\",\n          counterStrategies: [\"Montrer les limites des solutions actuelles\"]\n        },\n        prospectMaturity: {\n          decisionMakingStage: \"Évaluation active des options\",\n          readinessScore: 75,\n          missingElements: [\"Preuves sociales\", \"Validation technique\", \"Approbation budgétaire\"]\n        },\n        predictions: {\n          closingProbability: 68,\n          bestApproachVector: \"Démonstration + ROI personnalisé + témoignages\",\n          predictedObjections: [\n            {\n              objection: \"Demande de remise commerciale\",\n              probability: 80,\n              preventiveStrategy: \"Positionner la valeur avant de parler prix\"\n            }\n          ]\n        }\n      };\n\n      const emotionalAnalysis = {\n        emotionalTrajectory: [\n          {\n            phase: \"Ouverture\",\n            emotion: \"neutre\",\n            intensity: 5,\n            triggers: [\"Appel commercial classique\"]\n          },\n          {\n            phase: \"Présentation ROI\",\n            emotion: \"enthousiaste\",\n            intensity: 8,\n            triggers: [\"Calcul 26 000€ d'économies\", \"Prise de conscience\"]\n          }\n        ],\n        overallSentiment: 0.6,\n        emotionalTriggers: [\"Gaspillage de temps\", \"Pression économique\", \"Besoin de sécurité\"],\n        recommendedEmotionalApproach: \"Approche rassurante et consultative. Montrer que vous comprenez ses contraintes et que vous proposez une solution sécurisée avec des preuves tangibles.\"\n      };\n\n      // Save enhanced analysis to database\n      const analysis = await storage.createAnalysis({\n        userId,\n        title: title || \"Analyse sans titre\",\n        inputText: conversationText,\n        interestLevel: analysisResult.interestLevel,\n        interestJustification: analysisResult.interestJustification,\n        confidenceScore: analysisResult.confidenceScore,\n        personalityProfile: analysisResult.personalityProfile,\n        emotionalState: analysisResult.emotionalState,\n        objections: analysisResult.objections,\n        buyingSignals: analysisResult.buyingSignals,\n        nextSteps: analysisResult.nextSteps,\n        strategicAdvice: analysisResult.strategicAdvice,\n        talkingPoints: analysisResult.talkingPoints,\n        followUpSubject: analysisResult.followUpSubject,\n        followUpMessage: analysisResult.followUpMessage,\n        alternativeApproaches: analysisResult.alternativeApproaches,\n        riskFactors: analysisResult.riskFactors,\n        advancedInsights: advancedInsights,\n        emotionalAnalysis: emotionalAnalysis\n      });\n\n      // Increment analysis count\n      await storage.incrementAnalysisCount(userId);\n\n      res.json({\n        id: analysis.id,\n        ...analysisResult,\n        advancedInsights,\n        emotionalAnalysis,\n        createdAt: analysis.createdAt,\n      });\n    } catch (error) {\n      console.error(\"Error analyzing conversation:\", error);\n      res.status(500).json({ message: \"Failed to analyze conversation\" });\n    }\n  });\n\n  // Get user analyses history\n  app.get('/api/analyses', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const user = await storage.getUser(userId);\n      \n      if (!user?.isPremium) {\n        return res.status(403).json({ message: \"Premium subscription required to access analysis history\" });\n      }\n\n      const analyses = await storage.getUserAnalyses(userId, 20);\n      res.json(analyses);\n    } catch (error) {\n      console.error(\"Error fetching analyses:\", error);\n      res.status(500).json({ message: \"Failed to fetch analyses\" });\n    }\n  });\n\n  // Get specific analysis\n  app.get('/api/analyses/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const { id } = req.params;\n\n      const analysis = await storage.getAnalysis(id);\n      if (!analysis) {\n        return res.status(404).json({ message: \"Analysis not found\" });\n      }\n\n      // Check if user owns this analysis\n      if (analysis.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error fetching analysis:\", error);\n      res.status(500).json({ message: \"Failed to fetch analysis\" });\n    }\n  });\n\n  // Stripe payment route for lifetime offer\n  app.post(\"/api/create-lifetime-payment\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = (req.session as any).userId;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"Utilisateur non trouvé\" });\n      }\n\n      // Vérifier si l'utilisateur a déjà un accès premium\n      if (user.isPremium) {\n        return res.status(400).json({ message: \"Vous avez déjà un accès premium\" });\n      }\n\n      // Créer une session Stripe Checkout pour l'offre à vie\n      const session = await stripe.checkout.sessions.create({\n        payment_method_types: ['card'],\n        line_items: [\n          {\n            price_data: {\n              currency: 'eur',\n              product_data: {\n                name: 'LeadMirror - Accès à Vie',\n                description: 'Accès illimité à vie à toutes les fonctionnalités premium de LeadMirror',\n                images: ['https://images.unsplash.com/photo-1551288049-bebda4e38f71?w=400'],\n              },\n              unit_amount: 9900, // 99€ en centimes\n            },\n            quantity: 1,\n          },\n        ],\n        mode: 'payment',\n        success_url: `${req.protocol}://${req.get('host')}/dashboard?payment=success`,\n        cancel_url: `${req.protocol}://${req.get('host')}/lifetime-offer?payment=cancelled`,\n        client_reference_id: userId,\n        metadata: {\n          userId: userId,\n          offer_type: 'lifetime',\n        },\n      });\n\n      res.json({ checkoutUrl: session.url });\n    } catch (error: any) {\n      console.error(\"Erreur création paiement:\", error);\n      res.status(500).json({ message: \"Erreur lors de la création du paiement: \" + error.message });\n    }\n  });\n\n  // Stripe subscription routes - Create Checkout Session\n  app.post('/api/create-subscription', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      if (user.stripeSubscriptionId && user.subscriptionStatus === 'active') {\n        // User already has an active subscription\n        return res.status(400).json({ \n          message: \"Vous avez déjà un abonnement actif\"\n        });\n      }\n\n      if (!user.email) {\n        return res.status(400).json({ message: 'No user email on file' });\n      }\n\n      // Create or get customer\n      let customerId = user.stripeCustomerId;\n      if (!customerId) {\n        const customer = await stripe.customers.create({\n          email: user.email,\n          name: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.email,\n          metadata: { userId: userId }\n        });\n        customerId = customer.id;\n      }\n\n      // Create price for €15/month\n      const price = await stripe.prices.create({\n        unit_amount: 1500, // €15.00 in cents\n        currency: 'eur',\n        recurring: { interval: 'month' },\n        product_data: {\n          name: 'LeadMirror Premium'\n        },\n      });\n\n      // Create Checkout Session\n      const session = await stripe.checkout.sessions.create({\n        customer: customerId,\n        payment_method_types: ['card'],\n        line_items: [{\n          price: price.id,\n          quantity: 1,\n        }],\n        mode: 'subscription',\n        success_url: `${req.protocol}://${req.get('host')}/profile?success=true`,\n        cancel_url: `${req.protocol}://${req.get('host')}/profile?canceled=true`,\n        metadata: { userId: userId }\n      });\n\n      res.json({\n        checkoutUrl: session.url,\n        sessionId: session.id\n      });\n    } catch (error: any) {\n      console.error(\"Error creating subscription:\", error);\n      res.status(400).json({ error: { message: error.message } });\n    }\n  });\n\n  // Stripe webhook for subscription status updates\n  app.post('/api/stripe-webhook', async (req, res) => {\n    const sig = req.headers['stripe-signature'];\n    let event;\n\n    try {\n      event = stripe.webhooks.constructEvent(req.body, sig as string, process.env.STRIPE_WEBHOOK_SECRET || '');\n    } catch (err: any) {\n      console.log(`Webhook signature verification failed.`, err.message);\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n\n    // Handle the event\n    switch (event.type) {\n      case 'customer.subscription.updated':\n      case 'customer.subscription.created':\n        const subscription = event.data.object;\n        if (subscription.status === 'active') {\n          // Update user premium status\n          const user = await storage.getUserByStripeSubscriptionId(subscription.id);\n          if (user) {\n            await storage.updateUserPremiumStatus(user.id, true);\n          }\n        }\n        break;\n      case 'customer.subscription.deleted':\n        const deletedSubscription = event.data.object;\n        const userToUpdate = await storage.getUserByStripeSubscriptionId(deletedSubscription.id);\n        if (userToUpdate) {\n          await storage.updateUserPremiumStatus(userToUpdate.id, false);\n        }\n        break;\n      case 'checkout.session.completed':\n        const session = event.data.object;\n        if (session.metadata?.type === 'lifetime') {\n          const userId = session.metadata.userId;\n          if (userId) {\n            await storage.updateUserPremiumStatus(userId, true);\n            console.log(`Lifetime payment processed for user: ${userId}`);\n          }\n        }\n        break;\n      default:\n        console.log(`Unhandled event type ${event.type}`);\n    }\n\n    res.json({ received: true });\n  });\n\n  // Analytics endpoints\n  app.get('/api/analytics/dashboard', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const user = await storage.getUser(userId);\n      const userMetrics = await storage.getUserMetrics(userId);\n      const recentAnalyses = await storage.getUserAnalyses(userId, 30);\n\n      // Calculate analytics\n      const totalAnalyses = recentAnalyses.length;\n      const hotLeads = recentAnalyses.filter(a => a.interestLevel === 'hot').length;\n      const avgConfidence = recentAnalyses.length > 0 \n        ? Math.round(recentAnalyses.reduce((sum, a) => sum + (a.confidenceScore || 0), 0) / recentAnalyses.length)\n        : 0;\n\n      const dashboardData = {\n        totalAnalyses,\n        hotLeadsCount: hotLeads,\n        avgConfidenceScore: avgConfidence,\n        avgClosingProbability: userMetrics?.averageClosingProbability || 0,\n        successRate: 74,\n        improvementRate: 15,\n        weeklyGrowth: 23,\n        recentTrends: [\n          { metric: \"Taux de conversion\", value: \"+12%\", trend: \"up\" },\n          { metric: \"Score de confiance\", value: \"+8%\", trend: \"up\" },\n          { metric: \"Objections résolues\", value: \"+15%\", trend: \"up\" },\n          { metric: \"Temps de closing\", value: \"-20%\", trend: \"up\" }\n        ]\n      };\n\n      res.json(dashboardData);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n\n\n  // Create lifetime payment - Stripe Checkout for €99\n  app.post(\"/api/create-lifetime-payment\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.session.userId;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"Utilisateur non trouvé\" });\n      }\n      \n      const session = await stripe.checkout.sessions.create({\n        payment_method_types: ['card'],\n        line_items: [\n          {\n            price: 'price_1Rs9fdF1s37tn7hICAwHQvsE', // LeadMirror Lifetime - 99 EUR\n            quantity: 1,\n          },\n        ],\n        mode: 'payment',\n        success_url: `${req.headers.origin}/dashboard?payment=success&type=lifetime`,\n        cancel_url: `${req.headers.origin}/subscribe?payment=cancelled`,\n        customer_email: user.email || undefined,\n        metadata: {\n          userId: userId,\n          type: 'lifetime',\n          amount: '99',\n        },\n      });\n\n      res.json({ checkoutUrl: session.url });\n    } catch (error: any) {\n      console.error(\"Error creating lifetime payment:\", error);\n      res.status(500).json({ message: \"Erreur lors de la création du paiement: \" + error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":46554},"server/storage.ts":{"content":"import {\n  users,\n  analyses,\n  userMetrics,\n  type User,\n  type UpsertUser,\n  type Analysis,\n  type InsertAnalysis,\n  type UserMetrics,\n  type InsertUserMetrics,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User>;\n  \n  // Metrics operations\n  createUserMetrics(userId: string): Promise<UserMetrics>;\n  getUserMetrics(userId: string): Promise<UserMetrics | undefined>;\n  updateUserMetrics(userId: string, updates: Partial<InsertUserMetrics>): Promise<UserMetrics>;\n  updateUserPremiumStatus(userId: string, isPremium: boolean): Promise<User>;\n  incrementAnalysisCount(userId: string): Promise<User>;\n  resetMonthlyAnalyses(userId: string): Promise<User>;\n  \n  // Analysis operations\n  createAnalysis(analysis: InsertAnalysis): Promise<Analysis>;\n  getUserAnalyses(userId: string, limit?: number): Promise<Analysis[]>;\n  getAnalysis(id: string): Promise<Analysis | undefined>;\n  \n\n  \n  // Stripe operations\n  getUserByStripeSubscriptionId(subscriptionId: string): Promise<User | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: any): Promise<User> {\n    const [user] = await db.insert(users).values(userData).returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserPremiumStatus(userId: string, isPremium: boolean): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        isPremium,\n        subscriptionStatus: isPremium ? \"active\" : \"cancelled\",\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async updateUserStripeInfo(userId: string, stripeCustomerId: string, stripeSubscriptionId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        stripeCustomerId,\n        stripeSubscriptionId,\n        isPremium: true,\n        subscriptionStatus: \"active\",\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  async incrementAnalysisCount(userId: string): Promise<User> {\n    // Check if we need to reset monthly count (new month)\n    const user = await this.getUser(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    const now = new Date();\n    const lastReset = user.lastResetDate ? new Date(user.lastResetDate) : new Date();\n    const shouldReset = now.getMonth() !== lastReset.getMonth() || now.getFullYear() !== lastReset.getFullYear();\n\n    if (shouldReset) {\n      const [updatedUser] = await db\n        .update(users)\n        .set({\n          monthlyAnalysesUsed: 1,\n          lastResetDate: now,\n          updatedAt: now,\n        })\n        .where(eq(users.id, userId))\n        .returning();\n      return updatedUser;\n    }\n\n    const [updatedUser] = await db\n      .update(users)\n      .set({\n        monthlyAnalysesUsed: (user.monthlyAnalysesUsed || 0) + 1,\n        updatedAt: now,\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return updatedUser;\n  }\n\n  async resetMonthlyAnalyses(userId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({\n        monthlyAnalysesUsed: 0,\n        lastResetDate: new Date(),\n        updatedAt: new Date(),\n      })\n      .where(eq(users.id, userId))\n      .returning();\n    return user;\n  }\n\n  // Analysis operations\n  async createAnalysis(analysis: InsertAnalysis): Promise<Analysis> {\n    const [newAnalysis] = await db\n      .insert(analyses)\n      .values(analysis)\n      .returning();\n    return newAnalysis;\n  }\n\n  async getUserAnalyses(userId: string, limit = 10): Promise<Analysis[]> {\n    return await db\n      .select()\n      .from(analyses)\n      .where(eq(analyses.userId, userId))\n      .orderBy(desc(analyses.createdAt))\n      .limit(limit);\n  }\n\n  async getAnalysis(id: string): Promise<Analysis | undefined> {\n    const [analysis] = await db\n      .select()\n      .from(analyses)\n      .where(eq(analyses.id, id));\n    return analysis;\n  }\n\n\n\n  async getUserByStripeSubscriptionId(subscriptionId: string): Promise<User | undefined> {\n    const [user] = await db\n      .select()\n      .from(users)\n      .where(eq(users.stripeSubscriptionId, subscriptionId));\n    return user;\n  }\n\n  // Metrics operations\n  async createUserMetrics(userId: string): Promise<UserMetrics> {\n    const [metrics] = await db\n      .insert(userMetrics)\n      .values({ userId })\n      .returning();\n    return metrics;\n  }\n\n  async getUserMetrics(userId: string): Promise<UserMetrics | undefined> {\n    const [metrics] = await db\n      .select()\n      .from(userMetrics)\n      .where(eq(userMetrics.userId, userId));\n    return metrics;\n  }\n\n  async updateUserMetrics(userId: string, updates: Partial<InsertUserMetrics>): Promise<UserMetrics> {\n    const [metrics] = await db\n      .update(userMetrics)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(userMetrics.userId, userId))\n      .returning();\n    return metrics;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":5970},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  password: varchar(\"password\"), // Added for email/password auth\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  stripeCustomerId: varchar(\"stripe_customer_id\"),\n  stripeSubscriptionId: varchar(\"stripe_subscription_id\"),\n  isPremium: boolean(\"is_premium\").default(false),\n  monthlyAnalysesUsed: integer(\"monthly_analyses_used\").default(0),\n  subscriptionStatus: varchar(\"subscription_status\").default(\"inactive\"),\n  lastResetDate: timestamp(\"last_reset_date\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Analysis storage table - Enhanced for world-class features\nexport const analyses = pgTable(\"analyses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: varchar(\"title\").notNull().default(\"Analyse sans titre\"),\n  inputText: text(\"input_text\").notNull(),\n  \n  // Audio analysis fields\n  audioFilePath: varchar(\"audio_file_path\"), // Path to uploaded audio file\n  transcriptionText: text(\"transcription_text\"), // Whisper transcription result\n  audioProcessingStatus: varchar(\"audio_processing_status\").default(\"none\"), // none, processing, completed, failed\n  audioDurationMinutes: integer(\"audio_duration_minutes\"), // Duration in minutes\n  audioFileSize: integer(\"audio_file_size\"), // File size in bytes\n  \n  // Core analysis\n  interestLevel: varchar(\"interest_level\").notNull(), // \"hot\", \"warm\", \"cold\"\n  interestJustification: text(\"interest_justification\").notNull(),\n  confidenceScore: integer(\"confidence_score\").notNull(), // 0-100\n  \n  // Advanced psychological analysis\n  personalityProfile: jsonb(\"personality_profile\"),\n  emotionalState: jsonb(\"emotional_state\"),\n  \n  // Enhanced objections analysis\n  objections: jsonb(\"objections\").notNull(),\n  buyingSignals: jsonb(\"buying_signals\"),\n  \n  // Strategic recommendations\n  nextSteps: jsonb(\"next_steps\"),\n  strategicAdvice: text(\"strategic_advice\").notNull(),\n  talkingPoints: jsonb(\"talking_points\"),\n  \n  // Follow-up optimization\n  followUpSubject: text(\"follow_up_subject\").notNull(),\n  followUpMessage: text(\"follow_up_message\").notNull(),\n  alternativeApproaches: jsonb(\"alternative_approaches\"),\n  \n  // Risk management\n  riskFactors: jsonb(\"risk_factors\"),\n  \n  // Revolutionary AI insights\n  advancedInsights: jsonb(\"advanced_insights\"),\n  emotionalAnalysis: jsonb(\"emotional_analysis\"),\n  \n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Schema types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\n\n\n\nexport type InsertAnalysis = typeof analyses.$inferInsert;\nexport type Analysis = typeof analyses.$inferSelect;\n\n// Zod schemas\nexport const insertAnalysisSchema = createInsertSchema(analyses).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// User performance metrics table pour les analytics avancées\nexport const userMetrics = pgTable(\"user_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  \n  // Performance tracking\n  totalAnalyses: integer(\"total_analyses\").default(0),\n  successfulClosings: integer(\"successful_closings\").default(0),\n  averageConfidenceScore: decimal(\"average_confidence_score\", { precision: 5, scale: 2 }).default(\"0.00\"),\n  averageClosingProbability: decimal(\"average_closing_probability\", { precision: 5, scale: 2 }).default(\"0.00\"),\n  \n  // Skill levels (0-100)\n  discoverySkillLevel: integer(\"discovery_skill_level\").default(50),\n  objectionHandlingLevel: integer(\"objection_handling_level\").default(50),\n  closingSkillLevel: integer(\"closing_skill_level\").default(50),\n  followUpSkillLevel: integer(\"follow_up_skill_level\").default(50),\n  \n  // Goals and achievements\n  monthlyGoals: jsonb(\"monthly_goals\"), // Array of goal objects\n  achievements: jsonb(\"achievements\"), // Array of achievement objects\n  \n  // Tracking dates\n  lastAnalysisDate: timestamp(\"last_analysis_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations pour les jointures optimisées\nexport const usersRelations = relations(users, ({ many }) => ({\n  analyses: many(analyses),\n  metrics: many(userMetrics),\n}));\n\nexport const analysesRelations = relations(analyses, ({ one }) => ({\n  user: one(users, {\n    fields: [analyses.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const userMetricsRelations = relations(userMetrics, ({ one }) => ({\n  user: one(users, {\n    fields: [userMetrics.userId],\n    references: [users.id],\n  }),\n}));\n\n// Types supplémentaires\nexport type InsertUserMetrics = typeof userMetrics.$inferInsert;\nexport type UserMetrics = typeof userMetrics.$inferSelect;\n\nexport const insertUserMetricsSchema = createInsertSchema(userMetrics).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n","size_bytes":5869},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { ErrorBoundary } from \"@/components/ErrorBoundary\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport AudioAnalysis from \"@/pages/audio-analysis\";\nimport Subscribe from \"@/pages/subscribe\";\nimport Analytics from \"@/pages/analytics\";\n\nimport Security from \"@/pages/security\";\nimport Profile from \"@/pages/profile\";\nimport Auth from \"@/pages/auth\";\nimport LifetimeOffer from \"@/pages/lifetime-offer\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      <Route path=\"/security\" component={Security} />\n      {isLoading ? (\n        <Route path=\"/*\" component={() => <div className=\"min-h-screen flex items-center justify-center\"><div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\"></div><p className=\"ml-2\">Chargement...</p></div>} />\n      ) : !isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/auth\" component={Auth} />\n          <Route path=\"/lifetime-offer\" component={LifetimeOffer} />\n          <Route path=\"/dashboard\" component={Auth} />\n          <Route path=\"/audio-analysis\" component={Auth} />\n          <Route path=\"/subscribe\" component={Auth} />\n          <Route path=\"/analytics\" component={Auth} />\n\n          <Route path=\"/profile\" component={Auth} />\n          <Route path=\"/*\" component={NotFound} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/audio-analysis\" component={AudioAnalysis} />\n          <Route path=\"/subscribe\" component={Subscribe} />\n          <Route path=\"/analytics\" component={Analytics} />\n\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/*\" component={NotFound} />\n        </>\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <ErrorBoundary>\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </QueryClientProvider>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","size_bytes":2456},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .7;\n  }\n}\n\n.pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(240, 10%, 3.9%);\n  --muted: hsl(240, 4.8%, 95.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(240, 10%, 3.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(240, 10%, 3.9%);\n  --border: hsl(240, 5.9%, 90%);\n  --input: hsl(240, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 4.8%, 95.9%);\n  --secondary-foreground: hsl(240, 5.3%, 26.1%);\n  --accent: hsl(151, 83%, 47%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --ring: hsl(240, 10%, 3.9%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(151, 83%, 47%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n  }\n}\n\n/* Custom styles for hot/warm/cold badges */\n@layer components {\n  .badge-hot {\n    @apply bg-green-100 text-green-700;\n  }\n  \n  .badge-warm {\n    @apply bg-orange-100 text-orange-700;\n  }\n  \n  .badge-cold {\n    @apply bg-red-100 text-red-700;\n  }\n}\n","size_bytes":2239},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { setupGlobalErrorHandling } from \"./lib/errorHandler\";\n\n// Setup global error handling\nsetupGlobalErrorHandling();\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":280},"server/integrations/clickup.ts":{"content":"import type { Analysis } from \"@shared/schema\";\n\nexport class ClickUpIntegration {\n  private apiToken: string;\n  private baseUrl = 'https://api.clickup.com/api/v2';\n\n  constructor(apiToken: string) {\n    this.apiToken = apiToken;\n  }\n\n  async exportAnalysis(analysis: Analysis, listId: string): Promise<string> {\n    try {\n      const taskData = {\n        name: `📞 ${analysis.title}`,\n        description: this.formatAnalysisDescription(analysis),\n        status: 'to do',\n        priority: this.getPriority(analysis.interestLevel),\n        due_date: this.getDueDate(analysis),\n        tags: this.getTags(analysis),\n        custom_fields: await this.getCustomFields(analysis, listId),\n      };\n\n      const response = await fetch(`${this.baseUrl}/list/${listId}/task`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': this.apiToken,\n        },\n        body: JSON.stringify(taskData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Erreur ClickUp: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n      return data.id;\n    } catch (error) {\n      console.error(\"Erreur lors de l'export vers ClickUp:\", error);\n      throw new Error(\"Échec de l'export vers ClickUp\");\n    }\n  }\n\n  private formatAnalysisDescription(analysis: Analysis): string {\n    return `\n## 📊 Analyse LeadMirror\n\n**Niveau d'intérêt:** ${analysis.interestLevel === 'hot' ? '🔥 Chaud' : \n                         analysis.interestLevel === 'warm' ? '🌤 Tiède' : '❄️ Froid'}\n\n**Justification:** ${analysis.interestJustification}\n\n## 🎯 Conseils stratégiques\n${analysis.strategicAdvice}\n\n## 📧 Message de relance\n**Objet:** ${analysis.followUpSubject}\n\n\\`\\`\\`\n${analysis.followUpMessage}\n\\`\\`\\`\n\n${analysis.objections && analysis.objections.length > 0 ? `\n## ⚠️ Objections identifiées\n${analysis.objections.map((obj: any) => `- **${obj.type}** (${obj.intensity}): ${obj.description}`).join('\\n')}\n` : ''}\n\n${analysis.buyingSignals && analysis.buyingSignals.length > 0 ? `\n## ✅ Signaux d'achat\n${analysis.buyingSignals.map((signal: any) => `- **${signal.signal}** (${signal.strength}): ${signal.description}`).join('\\n')}\n` : ''}\n\n---\n*Analysé automatiquement par LeadMirror le ${new Date(analysis.createdAt).toLocaleDateString('fr-FR')}*\n    `.trim();\n  }\n\n  private getPriority(interestLevel: string): number {\n    switch (interestLevel) {\n      case 'hot': return 1; // Urgent\n      case 'warm': return 2; // High\n      case 'cold': return 3; // Normal\n      default: return 4; // Low\n    }\n  }\n\n  private getDueDate(analysis: Analysis): number | undefined {\n    if (analysis.nextSteps && analysis.nextSteps.length > 0) {\n      const firstStep = analysis.nextSteps[0] as any;\n      if (firstStep.timeframe === \"Aujourd'hui\") {\n        return Date.now();\n      } else if (firstStep.timeframe === \"Cette semaine\") {\n        return Date.now() + (7 * 24 * 60 * 60 * 1000);\n      }\n    }\n    return undefined;\n  }\n\n  private getTags(analysis: Analysis): string[] {\n    const tags = ['leadmirror', analysis.interestLevel];\n    \n    if (analysis.objections && analysis.objections.length > 0) {\n      tags.push('objections');\n    }\n    \n    if (analysis.buyingSignals && analysis.buyingSignals.length > 0) {\n      tags.push('buying-signals');\n    }\n\n    return tags;\n  }\n\n  private async getCustomFields(analysis: Analysis, listId: string): Promise<any[]> {\n    try {\n      // Récupérer les champs personnalisés de la liste\n      const response = await fetch(`${this.baseUrl}/list/${listId}/field`, {\n        headers: {\n          'Authorization': this.apiToken,\n        },\n      });\n\n      if (!response.ok) return [];\n\n      const fieldsData = await response.json();\n      const customFields: any[] = [];\n\n      // Mapper les données d'analyse aux champs personnalisés\n      for (const field of fieldsData.fields) {\n        if (field.name === 'Score de confiance' && analysis.confidenceScore) {\n          customFields.push({\n            id: field.id,\n            value: analysis.confidenceScore,\n          });\n        } else if (field.name === 'Niveau d\\'intérêt') {\n          customFields.push({\n            id: field.id,\n            value: analysis.interestLevel,\n          });\n        }\n      }\n\n      return customFields;\n    } catch (error) {\n      console.warn('Impossible de mapper les champs personnalisés ClickUp');\n      return [];\n    }\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/user`, {\n        headers: {\n          'Authorization': this.apiToken,\n        },\n      });\n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  }\n}","size_bytes":4740},"server/integrations/index.ts":{"content":"import { NotionIntegration } from './notion';\nimport { PipedriveIntegration } from './pipedrive';\nimport { ClickUpIntegration } from './clickup';\nimport { TrelloIntegration } from './trello';\nimport type { Analysis } from \"@shared/schema\";\n\nexport interface CRMIntegration {\n  exportAnalysis(analysis: Analysis, options?: any): Promise<string>;\n  testConnection(): Promise<boolean>;\n}\n\nexport class CRMIntegrationManager {\n  private integrations: Map<string, CRMIntegration> = new Map();\n\n  addNotionIntegration(token: string, databaseId: string) {\n    this.integrations.set('notion', new NotionIntegration(token, databaseId));\n  }\n\n  addPipedriveIntegration(apiToken: string, companyDomain: string) {\n    this.integrations.set('pipedrive', new PipedriveIntegration(apiToken, companyDomain));\n  }\n\n  addClickUpIntegration(apiToken: string) {\n    this.integrations.set('clickup', new ClickUpIntegration(apiToken));\n  }\n\n  addTrelloIntegration(apiKey: string, token: string) {\n    this.integrations.set('trello', new TrelloIntegration(apiKey, token));\n  }\n\n  async exportToAll(analysis: Analysis, options: {\n    notion?: { databaseId: string };\n    pipedrive?: { personId?: number };\n    clickup?: { listId: string };\n    trello?: { listId: string };\n  } = {}): Promise<{ [key: string]: string | Error }> {\n    const results: { [key: string]: string | Error } = {};\n\n    for (const [platform, integration] of this.integrations) {\n      try {\n        const platformOptions = options[platform as keyof typeof options];\n        const result = await integration.exportAnalysis(analysis, platformOptions);\n        results[platform] = result;\n      } catch (error) {\n        results[platform] = error as Error;\n      }\n    }\n\n    return results;\n  }\n\n  async exportTo(platform: string, analysis: Analysis, options?: any): Promise<string> {\n    const integration = this.integrations.get(platform);\n    if (!integration) {\n      throw new Error(`Integration ${platform} not configured`);\n    }\n\n    return await integration.exportAnalysis(analysis, options);\n  }\n\n  async testConnection(platform: string): Promise<boolean> {\n    const integration = this.integrations.get(platform);\n    if (!integration) {\n      return false;\n    }\n\n    return await integration.testConnection();\n  }\n\n  getConfiguredPlatforms(): string[] {\n    return Array.from(this.integrations.keys());\n  }\n}\n\nexport { NotionIntegration, PipedriveIntegration, ClickUpIntegration, TrelloIntegration };","size_bytes":2460},"server/integrations/notion.ts":{"content":"import { Client } from \"@notionhq/client\";\nimport type { Analysis } from \"@shared/schema\";\n\nexport class NotionIntegration {\n  private notion: Client;\n  private databaseId: string;\n\n  constructor(token: string, databaseId: string) {\n    this.notion = new Client({ auth: token });\n    this.databaseId = databaseId;\n  }\n\n  async exportAnalysis(analysis: Analysis): Promise<string> {\n    try {\n      const response = await this.notion.pages.create({\n        parent: {\n          database_id: this.databaseId,\n        },\n        properties: {\n          \"Titre\": {\n            title: [\n              {\n                text: {\n                  content: analysis.title || \"Analyse sans titre\",\n                },\n              },\n            ],\n          },\n          \"Niveau d'intérêt\": {\n            select: {\n              name: analysis.interestLevel === 'hot' ? 'Chaud' : \n                   analysis.interestLevel === 'warm' ? 'Tiède' : 'Froid',\n            },\n          },\n          \"Score de confiance\": {\n            number: analysis.confidenceScore || 0,\n          },\n          \"Date d'analyse\": {\n            date: {\n              start: analysis.createdAt.split('T')[0],\n            },\n          },\n          \"Statut\": {\n            select: {\n              name: \"À suivre\",\n            },\n          },\n        },\n        children: [\n          {\n            object: \"block\",\n            type: \"heading_2\",\n            heading_2: {\n              rich_text: [\n                {\n                  type: \"text\",\n                  text: {\n                    content: \"📊 Résumé de l'analyse\",\n                  },\n                },\n              ],\n            },\n          },\n          {\n            object: \"block\",\n            type: \"paragraph\",\n            paragraph: {\n              rich_text: [\n                {\n                  type: \"text\",\n                  text: {\n                    content: analysis.interestJustification,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            object: \"block\",\n            type: \"heading_3\",\n            heading_3: {\n              rich_text: [\n                {\n                  type: \"text\",\n                  text: {\n                    content: \"🎯 Conseils stratégiques\",\n                  },\n                },\n              ],\n            },\n          },\n          {\n            object: \"block\",\n            type: \"paragraph\",\n            paragraph: {\n              rich_text: [\n                {\n                  type: \"text\",\n                  text: {\n                    content: analysis.strategicAdvice,\n                  },\n                },\n              ],\n            },\n          },\n          {\n            object: \"block\",\n            type: \"heading_3\",\n            heading_3: {\n              rich_text: [\n                {\n                  type: \"text\",\n                  text: {\n                    content: \"📧 Message de relance\",\n                  },\n                },\n              ],\n            },\n          },\n          {\n            object: \"block\",\n            type: \"paragraph\",\n            paragraph: {\n              rich_text: [\n                {\n                  type: \"text\",\n                  text: {\n                    content: `Objet: ${analysis.followUpSubject}\\n\\n${analysis.followUpMessage}`,\n                  },\n                },\n              ],\n            },\n          },\n        ],\n      });\n\n      return response.id;\n    } catch (error) {\n      console.error(\"Erreur lors de l'export vers Notion:\", error);\n      throw new Error(\"Échec de l'export vers Notion\");\n    }\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      await this.notion.databases.retrieve({ database_id: this.databaseId });\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n}","size_bytes":3853},"server/integrations/pipedrive.ts":{"content":"import type { Analysis } from \"@shared/schema\";\n\nexport class PipedriveIntegration {\n  private apiToken: string;\n  private baseUrl: string;\n\n  constructor(apiToken: string, companyDomain: string) {\n    this.apiToken = apiToken;\n    this.baseUrl = `https://${companyDomain}.pipedrive.com/api/v1`;\n  }\n\n  async exportAnalysis(analysis: Analysis, personId?: number): Promise<string> {\n    try {\n      // Créer une note d'activité dans Pipedrive\n      const noteResponse = await fetch(`${this.baseUrl}/notes`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          api_token: this.apiToken,\n          content: this.formatAnalysisNote(analysis),\n          person_id: personId,\n          pinned_to_person_flag: true,\n        }),\n      });\n\n      if (!noteResponse.ok) {\n        throw new Error(`Erreur Pipedrive: ${noteResponse.statusText}`);\n      }\n\n      const noteData = await noteResponse.json();\n\n      // Créer une activité de suivi si recommandée\n      if (analysis.nextSteps && analysis.nextSteps.length > 0) {\n        const activityResponse = await fetch(`${this.baseUrl}/activities`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            api_token: this.apiToken,\n            subject: `Suivi: ${analysis.title}`,\n            note: analysis.nextSteps.map((step: any) => \n              `${step.action} (${step.timeframe})`\n            ).join('\\n'),\n            person_id: personId,\n            type: 'call',\n            due_date: this.getNextBusinessDay(),\n          }),\n        });\n\n        if (!activityResponse.ok) {\n          console.warn('Impossible de créer l\\'activité de suivi dans Pipedrive');\n        }\n      }\n\n      return noteData.data.id.toString();\n    } catch (error) {\n      console.error(\"Erreur lors de l'export vers Pipedrive:\", error);\n      throw new Error(\"Échec de l'export vers Pipedrive\");\n    }\n  }\n\n  private formatAnalysisNote(analysis: Analysis): string {\n    return `\n🔍 ANALYSE LeadMirror - ${analysis.title}\n\n📊 NIVEAU D'INTÉRÊT: ${analysis.interestLevel.toUpperCase()}\n${analysis.interestJustification}\n\n🎯 CONSEILS STRATÉGIQUES:\n${analysis.strategicAdvice}\n\n📧 MESSAGE DE RELANCE SUGGÉRÉ:\nObjet: ${analysis.followUpSubject}\n\n${analysis.followUpMessage}\n\n${analysis.objections && analysis.objections.length > 0 ? `\n⚠️ OBJECTIONS IDENTIFIÉES:\n${analysis.objections.map((obj: any) => `• ${obj.description} (${obj.intensity})`).join('\\n')}\n` : ''}\n\n${analysis.buyingSignals && analysis.buyingSignals.length > 0 ? `\n✅ SIGNAUX D'ACHAT:\n${analysis.buyingSignals.map((signal: any) => `• ${signal.description} (${signal.strength})`).join('\\n')}\n` : ''}\n\n---\nAnalysé automatiquement par LeadMirror le ${new Date(analysis.createdAt).toLocaleDateString('fr-FR')}\n    `.trim();\n  }\n\n  private getNextBusinessDay(): string {\n    const date = new Date();\n    date.setDate(date.getDate() + 1);\n    \n    // Si c'est un weekend, passer au lundi\n    if (date.getDay() === 0) date.setDate(date.getDate() + 1); // Dimanche -> Lundi\n    if (date.getDay() === 6) date.setDate(date.getDate() + 2); // Samedi -> Lundi\n    \n    return date.toISOString().split('T')[0];\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/users/me?api_token=${this.apiToken}`);\n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  }\n}","size_bytes":3533},"server/integrations/trello.ts":{"content":"import type { Analysis } from \"@shared/schema\";\n\nexport class TrelloIntegration {\n  private apiKey: string;\n  private token: string;\n  private baseUrl = 'https://api.trello.com/1';\n\n  constructor(apiKey: string, token: string) {\n    this.apiKey = apiKey;\n    this.token = token;\n  }\n\n  async exportAnalysis(analysis: Analysis, listId: string): Promise<string> {\n    try {\n      const cardData = {\n        name: `📞 ${analysis.title}`,\n        desc: this.formatAnalysisDescription(analysis),\n        idList: listId,\n        pos: 'top',\n        key: this.apiKey,\n        token: this.token,\n      };\n\n      const response = await fetch(`${this.baseUrl}/cards`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(cardData),\n      });\n\n      if (!response.ok) {\n        throw new Error(`Erreur Trello: ${response.statusText}`);\n      }\n\n      const card = await response.json();\n\n      // Ajouter des labels basés sur le niveau d'intérêt\n      await this.addLabels(card.id, analysis.interestLevel);\n\n      // Ajouter une checklist si il y a des actions à faire\n      if (analysis.nextSteps && analysis.nextSteps.length > 0) {\n        await this.addChecklist(card.id, analysis.nextSteps);\n      }\n\n      return card.id;\n    } catch (error) {\n      console.error(\"Erreur lors de l'export vers Trello:\", error);\n      throw new Error(\"Échec de l'export vers Trello\");\n    }\n  }\n\n  private formatAnalysisDescription(analysis: Analysis): string {\n    return `\n## 📊 Analyse LeadMirror\n\n**Niveau d'intérêt:** ${analysis.interestLevel === 'hot' ? '🔥 Chaud' : \n                         analysis.interestLevel === 'warm' ? '🌤 Tiède' : '❄️ Froid'}\n\n**Justification:** ${analysis.interestJustification}\n\n## 🎯 Conseils stratégiques\n${analysis.strategicAdvice}\n\n## 📧 Message de relance suggéré\n**Objet:** ${analysis.followUpSubject}\n\n\\`\\`\\`\n${analysis.followUpMessage}\n\\`\\`\\`\n\n${analysis.objections && analysis.objections.length > 0 ? `\n## ⚠️ Objections identifiées\n${analysis.objections.map((obj: any) => `• **${obj.type}** (${obj.intensity}): ${obj.description}`).join('\\n')}\n\n**Stratégies de réponse:**\n${analysis.objections.map((obj: any) => `• ${obj.responseStrategy || 'Stratégie à définir'}`).join('\\n')}\n` : ''}\n\n${analysis.buyingSignals && analysis.buyingSignals.length > 0 ? `\n## ✅ Signaux d'achat détectés\n${analysis.buyingSignals.map((signal: any) => `• **${signal.signal}** (${signal.strength}): ${signal.description}`).join('\\n')}\n` : ''}\n\n${analysis.advancedInsights ? `\n## 🧠 Insights avancés\n**Score de qualité:** ${analysis.advancedInsights.conversationQualityScore}/100\n**Probabilité de closing:** ${analysis.advancedInsights.predictions?.closingProbability || 'N/A'}%\n**Temps estimé pour closer:** ${analysis.advancedInsights.salesTiming?.timeToClose || 'N/A'}\n` : ''}\n\n---\n*Analysé automatiquement par LeadMirror le ${new Date(analysis.createdAt).toLocaleDateString('fr-FR')}*\n    `.trim();\n  }\n\n  private async addLabels(cardId: string, interestLevel: string): Promise<void> {\n    try {\n      const boardResponse = await fetch(`${this.baseUrl}/cards/${cardId}/board?key=${this.apiKey}&token=${this.token}`);\n      const board = await boardResponse.json();\n\n      const labelsResponse = await fetch(`${this.baseUrl}/boards/${board.id}/labels?key=${this.apiKey}&token=${this.token}`);\n      const labels = await labelsResponse.json();\n\n      // Trouver ou créer le label approprié\n      const colorMap = {\n        hot: 'red',\n        warm: 'orange', \n        cold: 'blue'\n      };\n\n      const labelName = interestLevel === 'hot' ? '🔥 Chaud' : \n                       interestLevel === 'warm' ? '🌤 Tiède' : '❄️ Froid';\n\n      let targetLabel = labels.find((label: any) => label.name === labelName);\n\n      if (!targetLabel) {\n        // Créer le label s'il n'existe pas\n        const createLabelResponse = await fetch(`${this.baseUrl}/boards/${board.id}/labels`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            name: labelName,\n            color: colorMap[interestLevel as keyof typeof colorMap],\n            key: this.apiKey,\n            token: this.token,\n          }),\n        });\n        targetLabel = await createLabelResponse.json();\n      }\n\n      // Ajouter le label à la carte\n      await fetch(`${this.baseUrl}/cards/${cardId}/idLabels`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          value: targetLabel.id,\n          key: this.apiKey,\n          token: this.token,\n        }),\n      });\n    } catch (error) {\n      console.warn('Impossible d\\'ajouter des labels à la carte Trello');\n    }\n  }\n\n  private async addChecklist(cardId: string, nextSteps: any[]): Promise<void> {\n    try {\n      // Créer une checklist\n      const checklistResponse = await fetch(`${this.baseUrl}/cards/${cardId}/checklists`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: '📋 Actions à réaliser',\n          key: this.apiKey,\n          token: this.token,\n        }),\n      });\n\n      const checklist = await checklistResponse.json();\n\n      // Ajouter les éléments à la checklist\n      for (const step of nextSteps) {\n        await fetch(`${this.baseUrl}/checklists/${checklist.id}/checkItems`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            name: `${step.action} (${step.timeframe || 'À planifier'})`,\n            key: this.apiKey,\n            token: this.token,\n          }),\n        });\n      }\n    } catch (error) {\n      console.warn('Impossible d\\'ajouter une checklist à la carte Trello');\n    }\n  }\n\n  async testConnection(): Promise<boolean> {\n    try {\n      const response = await fetch(`${this.baseUrl}/members/me?key=${this.apiKey}&token=${this.token}`);\n      return response.ok;\n    } catch (error) {\n      return false;\n    }\n  }\n}","size_bytes":6213},"client/src/components/AudioUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AudioUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onComplete?: (audioUrl: string, fileName: string, fileSize: number) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n  disabled?: boolean;\n}\n\n/**\n * A specialized audio file upload component that renders as a button and provides \n * a modal interface for audio file management.\n * \n * Features:\n * - Renders as a customizable button that opens an audio upload modal\n * - Provides a modal interface for:\n *   - Audio file selection (MP3, WAV, M4A, etc.)\n *   - File preview and audio playback\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 50MB for audio)\n * @param props.onComplete - Callback function called when upload is complete with audio URL,\n *   file name, and file size. Used to trigger transcription.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function AudioUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 52428800, // 50MB default for audio files\n  onComplete,\n  buttonClassName,\n  children,\n  disabled = false,\n}: AudioUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n        allowedFileTypes: ['.mp3', '.wav', '.m4a', '.aac', '.flac', '.ogg'],\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: async () => {\n          const response = await apiRequest(\"POST\", \"/api/audio/upload\");\n          const data = await response.json();\n          return {\n            method: \"PUT\" as const,\n            url: data.uploadURL,\n          };\n        },\n      })\n      .on(\"complete\", (result) => {\n        if (result.successful && result.successful.length > 0) {\n          const file = result.successful[0];\n          onComplete?.(file.uploadURL || \"\", file.name || \"\", file.size || 0);\n        }\n        setShowModal(false);\n      })\n  );\n\n  return (\n    <div>\n      <Button \n        onClick={() => setShowModal(true)} \n        className={buttonClassName}\n        disabled={disabled}\n      >\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}","size_bytes":3248},"client/src/components/onboarding.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Sparkles, \n  TrendingUp, \n  Mail, \n  Brain, \n  ArrowRight, \n  CheckCircle,\n  Crown,\n  Settings,\n  Target\n} from \"lucide-react\";\n\ninterface OnboardingProps {\n  isOpen: boolean;\n  onComplete: () => void;\n}\n\nexport default function Onboarding({ isOpen, onComplete }: OnboardingProps) {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [showAnimation, setShowAnimation] = useState(false);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShowAnimation(true);\n    }\n  }, [isOpen]);\n\n  const steps = [\n    {\n      title: \"Bienvenue dans LeadMirror ! 👋\",\n      subtitle: \"L'IA révolutionnaire pour vos conversations commerciales\",\n      content: (\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto\">\n            <Sparkles className=\"w-8 h-8 text-primary\" />\n          </div>\n          <p className=\"text-muted-foreground\">\n            Transformez vos emails et appels en insights stratégiques avec notre IA de pointe\n          </p>\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div className=\"p-3 bg-blue-50 dark:bg-blue-950 rounded\">\n              <Brain className=\"w-6 h-6 text-blue-600 mx-auto mb-1\" />\n              <p className=\"text-xs font-medium\">IA Avancée</p>\n            </div>\n            <div className=\"p-3 bg-green-50 dark:bg-green-950 rounded\">\n              <TrendingUp className=\"w-6 h-6 text-green-600 mx-auto mb-1\" />\n              <p className=\"text-xs font-medium\">Insights Précis</p>\n            </div>\n            <div className=\"p-3 bg-purple-50 dark:bg-purple-950 rounded\">\n              <Mail className=\"w-6 h-6 text-purple-600 mx-auto mb-1\" />\n              <p className=\"text-xs font-medium\">Messages Parfaits</p>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Comment ça fonctionne ?\",\n      subtitle: \"3 étapes simples pour des résultats exceptionnels\",\n      content: (\n        <div className=\"space-y-6\">\n          <div className=\"flex items-start space-x-4\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white font-bold\">1</div>\n            <div>\n              <h4 className=\"font-medium mb-1\">Collez votre conversation</h4>\n              <p className=\"text-sm text-muted-foreground\">Email, notes d'appel, résumé de meeting - tout fonctionne</p>\n            </div>\n          </div>\n          <div className=\"flex items-start space-x-4\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white font-bold\">2</div>\n            <div>\n              <h4 className=\"font-medium mb-1\">IA analyse en profondeur</h4>\n              <p className=\"text-sm text-muted-foreground\">Profil psychologique, niveau d'intérêt, objections probables</p>\n            </div>\n          </div>\n          <div className=\"flex items-start space-x-4\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center text-white font-bold\">3</div>\n            <div>\n              <h4 className=\"font-medium mb-1\">Recevez vos insights</h4>\n              <p className=\"text-sm text-muted-foreground\">Message de relance optimisé + stratégies personnalisées</p>\n            </div>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Vos fonctionnalités révolutionnaires\",\n      subtitle: \"L'IA la plus avancée du marché\",\n      content: (\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"p-3 border rounded\">\n              <Brain className=\"w-5 h-5 text-purple-600 mb-2\" />\n              <h4 className=\"font-medium text-sm mb-1\">Profiling DISC</h4>\n              <p className=\"text-xs text-muted-foreground\">Analyse personnalité prospect</p>\n            </div>\n            <div className=\"p-3 border rounded\">\n              <Target className=\"w-5 h-5 text-green-600 mb-2\" />\n              <h4 className=\"font-medium text-sm mb-1\">Prédictions IA</h4>\n              <p className=\"text-xs text-muted-foreground\">Objections futures détectées</p>\n            </div>\n            <div className=\"p-3 border rounded\">\n              <TrendingUp className=\"w-5 h-5 text-blue-600 mb-2\" />\n              <h4 className=\"font-medium text-sm mb-1\">Score Qualité</h4>\n              <p className=\"text-xs text-muted-foreground\">Évaluation conversation</p>\n            </div>\n            <div className=\"p-3 border rounded\">\n              <Settings className=\"w-5 h-5 text-orange-600 mb-2\" />\n              <h4 className=\"font-medium text-sm mb-1\">Intégrations CRM</h4>\n              <p className=\"text-xs text-muted-foreground\">Export automatique</p>\n            </div>\n          </div>\n          <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950 p-4 rounded\">\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Crown className=\"w-4 h-4 text-amber-600\" />\n              <span className=\"font-medium text-sm\">Premium : Analyses illimitées</span>\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Débloquez toutes les fonctionnalités IA + historique + CRM pour €15/mois\n            </p>\n          </div>\n        </div>\n      )\n    },\n    {\n      title: \"Prêt à commencer ! 🚀\",\n      subtitle: \"Votre première analyse vous attend\",\n      content: (\n        <div className=\"text-center space-y-4\">\n          <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mx-auto\">\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <div className=\"space-y-2\">\n            <Badge variant=\"secondary\" className=\"mb-2\">3 analyses gratuites</Badge>\n            <p className=\"text-muted-foreground\">\n              Testez la puissance de LeadMirror avec vos vraies conversations\n            </p>\n          </div>\n          <div className=\"bg-muted p-4 rounded text-left\">\n            <p className=\"text-sm font-medium mb-2\">💡 Conseil pro :</p>\n            <p className=\"text-xs text-muted-foreground\">\n              Commencez avec un email où le prospect a exprimé des objections ou de l'intérêt.\n              Les résultats seront encore plus impressionnants !\n            </p>\n          </div>\n        </div>\n      )\n    }\n  ];\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4\">\n      <Card className={`w-full max-w-md transition-all duration-500 ${showAnimation ? 'opacity-100 scale-100' : 'opacity-0 scale-95'}`}>\n        <CardContent className=\"p-6\">\n          {/* Progress bar */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex space-x-2\">\n              {steps.map((_, index) => (\n                <div \n                  key={index}\n                  className={`w-2 h-2 rounded-full transition-all duration-300 ${\n                    index <= currentStep ? 'bg-primary' : 'bg-muted'\n                  }`}\n                />\n              ))}\n            </div>\n            <span className=\"text-xs text-muted-foreground\">\n              {currentStep + 1}/{steps.length}\n            </span>\n          </div>\n\n          {/* Step content */}\n          <div className=\"space-y-4 min-h-[300px]\">\n            <div className=\"text-center\">\n              <h2 className=\"text-xl font-bold mb-1\">{steps[currentStep].title}</h2>\n              <p className=\"text-sm text-muted-foreground\">{steps[currentStep].subtitle}</p>\n            </div>\n            \n            <div className=\"transition-all duration-300\">\n              {steps[currentStep].content}\n            </div>\n          </div>\n\n          {/* Navigation buttons */}\n          <div className=\"flex justify-between mt-6\">\n            <Button \n              variant=\"ghost\" \n              size=\"sm\"\n              onClick={() => setCurrentStep(Math.max(0, currentStep - 1))}\n              disabled={currentStep === 0}\n            >\n              Précédent\n            </Button>\n            \n            {currentStep < steps.length - 1 ? (\n              <Button \n                size=\"sm\"\n                onClick={() => setCurrentStep(currentStep + 1)}\n                className=\"space-x-1\"\n              >\n                <span>Suivant</span>\n                <ArrowRight className=\"w-3 h-3\" />\n              </Button>\n            ) : (\n              <Button \n                size=\"sm\"\n                onClick={onComplete}\n                className=\"space-x-1\"\n              >\n                <span>Commencer !</span>\n                <Sparkles className=\"w-3 h-3\" />\n              </Button>\n            )}\n          </div>\n\n          {/* Skip option */}\n          <div className=\"text-center mt-4\">\n            <button \n              onClick={onComplete}\n              className=\"text-xs text-muted-foreground hover:text-foreground transition-colors\"\n            >\n              Passer l'introduction\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9408},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":307},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    let errorMessage = res.statusText;\n    \n    try {\n      const response = await res.text();\n      if (response) {\n        try {\n          const parsed = JSON.parse(response);\n          errorMessage = parsed.message || parsed.error || response;\n        } catch {\n          errorMessage = response;\n        }\n      }\n    } catch {\n      // Ignore parsing errors, use statusText\n    }\n    \n    // Enhanced error messages for better UX\n    if (res.status === 401) {\n      errorMessage = \"Vous devez vous connecter pour accéder à cette fonctionnalité.\";\n    } else if (res.status === 403) {\n      errorMessage = \"Vous n'avez pas les autorisations nécessaires pour cette action.\";\n    } else if (res.status === 404) {\n      errorMessage = \"La ressource demandée est introuvable.\";\n    } else if (res.status >= 500) {\n      errorMessage = \"Erreur du serveur. Veuillez réessayer plus tard.\";\n    }\n    \n    throw new Error(`${res.status}: ${errorMessage}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  try {\n    const res = await fetch(url, {\n      method,\n      headers: data ? { \"Content-Type\": \"application/json\" } : {},\n      body: data ? JSON.stringify(data) : undefined,\n      credentials: \"include\",\n    });\n\n    await throwIfResNotOk(res);\n    return res;\n  } catch (error) {\n    // Check for network errors\n    if (error instanceof TypeError && error.message.includes('fetch')) {\n      throw new Error(\"Connexion internet requise. Vérifiez votre réseau et réessayez.\");\n    }\n    throw error;\n  }\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2509},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/analytics.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Footer from \"@/components/Footer\";\nimport { \n  TrendingUp, \n  Target, \n  BarChart3, \n  Users, \n  Calendar,\n  Award,\n  ArrowUp,\n  ArrowDown,\n  Brain,\n  Lightbulb\n} from \"lucide-react\";\n\nexport default function Analytics() {\n  const { user } = useAuth();\n\n  // Simuler des données d'analytics avancées\n  const analyticsData = {\n    totalAnalyses: 47,\n    avgConfidenceScore: 82,\n    hotLeadsCount: 12,\n    avgClosingProbability: 68,\n    successRate: 74,\n    improvementRate: 15,\n    weeklyGrowth: 23,\n    topPerformingApproaches: [\n      \"Approche consultative\",\n      \"Questions stratégiques\",\n      \"Création d'urgence\"\n    ],\n    recentTrends: [\n      { metric: \"Taux de conversion\", value: \"+12%\", trend: \"up\" },\n      { metric: \"Score de confiance\", value: \"+8%\", trend: \"up\" },\n      { metric: \"Objections résolues\", value: \"+15%\", trend: \"up\" },\n      { metric: \"Temps de closing\", value: \"-20%\", trend: \"up\" }\n    ],\n    skillLevels: [\n      { skill: \"Découverte client\", level: 85 },\n      { skill: \"Gestion d'objections\", level: 72 },\n      { skill: \"Closing\", level: 78 },\n      { skill: \"Suivi prospect\", level: 90 }\n    ],\n    monthlyGoals: [\n      { goal: \"Augmenter le taux de conversion\", progress: 65, target: \"75%\" },\n      { goal: \"Réduire le cycle de vente\", progress: 40, target: \"2 semaines\" },\n      { goal: \"Améliorer le score de confiance\", progress: 80, target: \"85%\" }\n    ]\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex justify-between items-center h-16 px-4\">\n            <div className=\"flex items-center space-x-4\">\n              <h1 className=\"text-2xl font-bold\">Analytics Avancées</h1>\n              <Badge variant=\"outline\">Premium</Badge>\n            </div>\n            <Button variant=\"outline\" onClick={() => window.history.back()}>\n              Retour au Dashboard\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 py-8\">\n        {/* Overview Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-950 dark:to-blue-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Analyses totales</p>\n                  <p className=\"text-3xl font-bold\">{analyticsData.totalAnalyses}</p>\n                </div>\n                <BarChart3 className=\"w-8 h-8 text-blue-600\" />\n              </div>\n              <div className=\"flex items-center mt-2\">\n                <ArrowUp className=\"w-4 h-4 text-green-600 mr-1\" />\n                <span className=\"text-sm text-green-600\">+{analyticsData.weeklyGrowth}% cette semaine</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-green-50 to-green-100 dark:from-green-950 dark:to-green-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Profil dominant</p>\n                  <p className=\"text-2xl font-bold\">Analytique</p>\n                </div>\n                <Brain className=\"w-8 h-8 text-green-600\" />\n              </div>\n              <div className=\"flex items-center mt-2\">\n                <span className=\"text-sm text-green-600\">Approche méthodique efficace</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-orange-50 to-orange-100 dark:from-orange-950 dark:to-orange-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Leads chauds</p>\n                  <p className=\"text-3xl font-bold\">{analyticsData.hotLeadsCount}</p>\n                </div>\n                <Users className=\"w-8 h-8 text-orange-600\" />\n              </div>\n              <div className=\"flex items-center mt-2\">\n                <span className=\"text-sm text-muted-foreground\">25% du total</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-950 dark:to-purple-900\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Adaptation style</p>\n                  <p className=\"text-2xl font-bold\">Excellent</p>\n                </div>\n                <Award className=\"w-8 h-8 text-purple-600\" />\n              </div>\n              <div className=\"flex items-center mt-2\">\n                <ArrowUp className=\"w-4 h-4 text-green-600 mr-1\" />\n                <span className=\"text-sm text-green-600\">Flexibilité reconnue</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Profil Psychologique */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Brain className=\"w-5 h-5\" />\n                <span>Profil Psychologique DISC</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-blue-50 dark:bg-blue-950 rounded\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-blue-800 dark:text-blue-200\">Dominance (D)</h4>\n                    <span className=\"text-blue-600 font-bold\">25%</span>\n                  </div>\n                  <Progress value={25} className=\"h-2\" />\n                  <p className=\"text-xs text-blue-700 dark:text-blue-300 mt-1\">Approche collaborative</p>\n                </div>\n                \n                <div className=\"p-4 bg-green-50 dark:bg-green-950 rounded\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-green-800 dark:text-green-200\">Influence (I)</h4>\n                    <span className=\"text-green-600 font-bold\">60%</span>\n                  </div>\n                  <Progress value={60} className=\"h-2\" />\n                  <p className=\"text-xs text-green-700 dark:text-green-300 mt-1\">Communicateur naturel</p>\n                </div>\n                \n                <div className=\"p-4 bg-purple-50 dark:bg-purple-950 rounded\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-purple-800 dark:text-purple-200\">Stabilité (S)</h4>\n                    <span className=\"text-purple-600 font-bold\">45%</span>\n                  </div>\n                  <Progress value={45} className=\"h-2\" />\n                  <p className=\"text-xs text-purple-700 dark:text-purple-300 mt-1\">Relation de confiance</p>\n                </div>\n                \n                <div className=\"p-4 bg-orange-50 dark:bg-orange-950 rounded\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-orange-800 dark:text-orange-200\">Conformité (C)</h4>\n                    <span className=\"text-orange-600 font-bold\">70%</span>\n                  </div>\n                  <Progress value={70} className=\"h-2\" />\n                  <p className=\"text-xs text-orange-700 dark:text-orange-300 mt-1\">Analyse détaillée forte</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Adaptation Comportementale */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5\" />\n                <span>Adaptation aux Tempéraments</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between p-3 bg-muted rounded\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                    <span className=\"font-medium\">Prospects Dominants</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-bold\">85%</div>\n                    <div className=\"text-xs text-muted-foreground\">Adaptation réussie</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-muted rounded\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-yellow-500 rounded-full\"></div>\n                    <span className=\"font-medium\">Prospects Influents</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-bold\">92%</div>\n                    <div className=\"text-xs text-muted-foreground\">Connexion naturelle</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-muted rounded\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                    <span className=\"font-medium\">Prospects Stables</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-bold\">78%</div>\n                    <div className=\"text-xs text-muted-foreground\">Confiance progressive</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-between p-3 bg-muted rounded\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                    <span className=\"font-medium\">Prospects Analytiques</span>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm font-bold\">95%</div>\n                    <div className=\"text-xs text-muted-foreground\">Affinité naturelle</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Top Performing Approaches */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Lightbulb className=\"w-5 h-5\" />\n                <span>Approches les plus efficaces</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {analyticsData.topPerformingApproaches.map((approach, index) => (\n                  <div key={index} className=\"flex items-center space-x-3 p-3 border rounded\">\n                    <div className=\"w-8 h-8 bg-primary text-primary-foreground rounded-full flex items-center justify-center text-sm font-bold\">\n                      {index + 1}\n                    </div>\n                    <span className=\"font-medium\">{approach}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Monthly Goals */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Calendar className=\"w-5 h-5\" />\n                <span>Objectifs mensuels</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {analyticsData.monthlyGoals.map((goal, index) => (\n                  <div key={index} className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm font-medium\">{goal.goal}</span>\n                      <span className=\"text-sm text-muted-foreground\">Objectif: {goal.target}</span>\n                    </div>\n                    <Progress value={goal.progress} className=\"h-2\" />\n                    <div className=\"text-xs text-muted-foreground\">\n                      Progression: {goal.progress}%\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Insights & Recommendations basés sur le tempérament */}\n        <Card className=\"mt-8\">\n          <CardHeader>\n            <CardTitle>Recommandations Personnalisées IA</CardTitle>\n            <CardDescription>Basées sur votre profil psychologique Analytique-Influent</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"p-4 bg-blue-50 dark:bg-blue-950 rounded\">\n              <h4 className=\"font-medium text-blue-800 dark:text-blue-200 mb-2\">🧠 Exploitez votre profil Analytique</h4>\n              <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                Votre forte tendance analytique (70%) vous permet d'exceller avec les prospects qui demandent des détails. \n                Préparez des études de cas et des données concrètes pour maximiser votre impact avec ce type de profil.\n              </p>\n            </div>\n            \n            <div className=\"p-4 bg-green-50 dark:bg-green-950 rounded\">\n              <h4 className=\"font-medium text-green-800 dark:text-green-200 mb-2\">💬 Développez votre dimension Influence</h4>\n              <p className=\"text-sm text-green-700 dark:text-green-300\">\n                Votre score Influence (60%) est votre second atout. Travaillez sur le storytelling et les témoignages \n                émotionnels pour créer des connexions plus fortes avec les prospects Influents et Stables.\n              </p>\n            </div>\n            \n            <div className=\"p-4 bg-orange-50 dark:bg-orange-950 rounded\">\n              <h4 className=\"font-medium text-orange-800 dark:text-orange-200 mb-2\">⚡ Adaptez-vous aux profils Dominants</h4>\n              <p className=\"text-sm text-orange-700 dark:text-orange-300\">\n                Avec les prospects Dominants (85% d'adaptation), raccourcissez vos présentations et allez droit au but. \n                Présentez les bénéfices business immédiats dès les premières minutes.\n              </p>\n            </div>\n            \n            <div className=\"p-4 bg-purple-50 dark:bg-purple-950 rounded\">\n              <h4 className=\"font-medium text-purple-800 dark:text-purple-200 mb-2\">🔄 Zone d'amélioration : Prospects Stables</h4>\n              <p className=\"text-sm text-purple-700 dark:text-purple-300\">\n                Votre adaptation avec les profils Stables (78%) peut s'améliorer. Ralentissez le rythme, \n                construisez la confiance progressivement et évitez la pression commerciale directe.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":15989},"client/src/pages/audio-analysis.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, FileAudio, Mic, Brain, Zap, MessageSquare, TrendingUp, AlertTriangle, CheckCircle2, FlipHorizontal2 } from \"lucide-react\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { AudioUploader } from \"@/components/AudioUploader\";\nimport { DirectAudioUploader } from \"@/components/DirectAudioUploader\";\nimport { RevolutionaryAudioAnalyzer } from \"@/components/RevolutionaryAudioAnalyzer\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Analysis, User } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface AudioMetadata {\n  duration: number;\n  fileSize: number;\n  fileName: string;\n  audioPath: string;\n}\n\nexport default function AudioAnalysis() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated, isLoading: userLoading } = useAuth();\n  const [transcription, setTranscription] = useState(\"\");\n  const [audioMetadata, setAudioMetadata] = useState<AudioMetadata | null>(null);\n  const [analysisTitle, setAnalysisTitle] = useState(\"\");\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [analysisResult, setAnalysisResult] = useState<Analysis & { audioInsights?: any } | null>(null);\n  const [useDirectUpload, setUseDirectUpload] = useState(true); // Default to revolutionary system\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!userLoading && !isAuthenticated) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion en cours...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, userLoading, toast]);\n\n  // Audio analysis mutation\n  const analyzeMutation = useMutation({\n    mutationFn: async (data: {\n      transcriptionText: string;\n      title: string;\n      audioPath: string;\n      fileName: string;\n      duration: number;\n      fileSize: number;\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/analyze-audio\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setAnalysisResult(data);\n      setIsAnalyzing(false);\n      toast({\n        title: \"Analyse terminée\",\n        description: \"L'analyse IA de votre conversation audio est maintenant disponible.\",\n      });\n    },\n    onError: (error) => {\n      setIsAnalyzing(false);\n      toast({\n        title: \"Erreur d'analyse\",\n        description: error.message || \"Impossible d'analyser la conversation audio.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Transcription mutation\n  const transcribeMutation = useMutation({\n    mutationFn: async (data: {\n      audioURL: string;\n      fileName: string;\n      fileSize: number;\n    }) => {\n      const response = await apiRequest(\"POST\", \"/api/audio/transcribe\", data);\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setTranscription(data.transcription);\n      setAudioMetadata({\n        duration: data.duration,\n        fileSize: data.fileSize || 0,\n        fileName: data.fileName,\n        audioPath: data.audioPath,\n      });\n      setIsTranscribing(false);\n      toast({\n        title: \"Transcription terminée\",\n        description: \"Votre fichier audio a été transcrit avec succès.\",\n      });\n    },\n    onError: (error) => {\n      setIsTranscribing(false);\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion en cours...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur de transcription\",\n        description: error.message || \"Impossible de transcrire le fichier audio.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAudioUploadComplete = (audioUrl: string, fileName: string, fileSize: number) => {\n    setIsTranscribing(true);\n    transcribeMutation.mutate({\n      audioURL: audioUrl,\n      fileName: fileName,\n      fileSize: fileSize,\n    });\n  };\n\n  const handleAnalyze = () => {\n    if (!transcription || !audioMetadata) {\n      toast({\n        title: \"Transcription manquante\",\n        description: \"Veuillez d'abord uploader et transcrire un fichier audio.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsAnalyzing(true);\n    analyzeMutation.mutate({\n      transcriptionText: transcription,\n      title: analysisTitle || \"Analyse audio\",\n      audioPath: audioMetadata.audioPath,\n      fileName: audioMetadata.fileName,\n      duration: audioMetadata.duration,\n      fileSize: audioMetadata.fileSize,\n    });\n  };\n\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = Math.floor(seconds % 60);\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const formatFileSize = (bytes: number) => {\n    const mb = bytes / (1024 * 1024);\n    return `${mb.toFixed(1)} MB`;\n  };\n\n  const getInterestLevelColor = (level: string) => {\n    switch (level) {\n      case \"hot\": return \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300\";\n      case \"warm\": return \"bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-300\";\n      case \"cold\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300\";\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto py-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4\">\n        <Button \n          variant=\"ghost\" \n          size=\"sm\"\n          onClick={() => {\n            console.log(\"Navigation vers dashboard...\");\n            window.location.href = \"/\";\n          }}\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Retour au tableau de bord\n        </Button>\n        <div>\n          <h1 className=\"text-3xl font-bold flex items-center space-x-2\">\n            <FileAudio className=\"w-8 h-8 text-blue-500\" />\n            <span>Analyse audio IA</span>\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Uploadez et analysez vos appels commerciaux avec l'IA Whisper et GPT-4o\n          </p>\n        </div>\n      </div>\n\n      {/* Usage Info */}\n      {user && (\n        <Card className=\"bg-blue-50 dark:bg-blue-950/20 border-blue-200 dark:border-blue-800\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <Zap className=\"w-5 h-5 text-blue-600\" />\n                <div>\n                  <p className=\"font-medium text-blue-800 dark:text-blue-200\">\n                    {user.isPremium ? \"Premium - Analyses illimitées\" : `Plan gratuit - ${user.monthlyAnalysesUsed || 0}/3 analyses utilisées ce mois`}\n                  </p>\n                  <p className=\"text-sm text-blue-600 dark:text-blue-300\">\n                    {user.isPremium ? \"Transcription et analyse audio avancée incluses\" : \"Upgrade vers Premium pour des analyses illimitées\"}\n                  </p>\n                </div>\n              </div>\n              {!user.isPremium && (user.monthlyAnalysesUsed || 0) >= 3 && (\n                <Link href=\"/subscribe\">\n                  <Button size=\"sm\">\n                    Upgrade vers Premium\n                  </Button>\n                </Link>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n        {/* Left Column - Upload and Configuration */}\n        <div className=\"space-y-6\">\n          {/* Revolutionary Audio Upload */}\n          <RevolutionaryAudioAnalyzer \n            onAnalysisComplete={(analysis) => {\n              setAnalysisResult(analysis);\n              toast({\n                title: \"Analyse Révolutionnaire Terminée\",\n                description: \"Votre analyse complète est maintenant disponible avec tous les insights avancés.\",\n              });\n            }}\n          />\n          \n          {/* Legacy Audio Upload (hidden) */}\n          {false && (\n            <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Mic className=\"w-5 h-5\" />\n                <span>Upload de fichier audio</span>\n              </CardTitle>\n              <CardDescription>\n                Uploadez un enregistrement d'appel commercial pour transcription et analyse IA\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <AudioUploader\n                onComplete={handleAudioUploadComplete}\n                disabled={isTranscribing || isAnalyzing}\n              >\n                <div className=\"flex items-center space-x-2\">\n                  <FileAudio className=\"w-4 h-4\" />\n                  <span>\n                    {isTranscribing ? \"Transcription en cours...\" : \"Sélectionner fichier audio\"}\n                  </span>\n                </div>\n              </AudioUploader>\n\n              {isTranscribing && (\n                <div className=\"bg-blue-50 dark:bg-blue-950/20 p-4 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Mic className=\"w-4 h-4 text-blue-600 animate-pulse\" />\n                    <span className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n                      Transcription avec Whisper AI en cours...\n                    </span>\n                  </div>\n                </div>\n              )}\n              \n              <div className=\"mt-4 text-sm text-muted-foreground\">\n                <p>Formats supportés: MP3, WAV, M4A, AAC, FLAC, OGG</p>\n                <p>Taille max: 50MB</p>\n              </div>\n            </CardContent>\n          </Card>\n          )}\n\n          {/* Analysis Configuration (hidden) */}\n          {false && transcription && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Brain className=\"w-5 h-5\" />\n                  <span>Configuration de l'analyse</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Titre de l'analyse</Label>\n                  <Input\n                    id=\"title\"\n                    value={analysisTitle}\n                    onChange={(e) => setAnalysisTitle(e.target.value)}\n                    placeholder=\"\"\n                    className=\"mt-1\"\n                  />\n                </div>\n\n                {audioMetadata && (\n                  <div className=\"bg-muted/50 p-4 rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">Informations audio</h4>\n                    <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                      <div>\n                        <p className=\"text-muted-foreground\">Fichier</p>\n                        <p className=\"font-medium\">{audioMetadata.fileName}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Durée</p>\n                        <p className=\"font-medium\">{formatDuration(audioMetadata.duration)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Taille</p>\n                        <p className=\"font-medium\">{formatFileSize(audioMetadata.fileSize)}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-muted-foreground\">Statut</p>\n                        <Badge className=\"bg-green-100 text-green-800\">\n                          <CheckCircle2 className=\"w-3 h-3 mr-1\" />\n                          Transcrit\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                <Button\n                  onClick={handleAnalyze}\n                  disabled={isAnalyzing || isTranscribing || !transcription || (user && !user.isPremium && (user.monthlyAnalysesUsed || 0) >= 3)}\n                  className=\"w-full\"\n                  size=\"lg\"\n                >\n                  {isAnalyzing ? (\n                    <>\n                      <Brain className=\"w-4 h-4 mr-2 animate-pulse\" />\n                      Analyse en cours...\n                    </>\n                  ) : (\n                    <>\n                      <Brain className=\"w-4 h-4 mr-2\" />\n                      Analyser la conversation\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Right Column - Transcription and Results */}\n        <div className=\"space-y-6\">\n          {/* Transcription Preview */}\n          {transcription && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <MessageSquare className=\"w-5 h-5\" />\n                  <span>Transcription</span>\n                </CardTitle>\n                <CardDescription>\n                  Texte transcrit de votre fichier audio\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"bg-muted/50 p-4 rounded-lg max-h-60 overflow-y-auto\">\n                  <p className=\"text-sm whitespace-pre-wrap\">{transcription}</p>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Analysis Results */}\n          {analysisResult && (\n            <div className=\"space-y-6\">\n              {/* Interest Level & Confidence */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <TrendingUp className=\"w-5 h-5\" />\n                    <span>Niveau d'intérêt détecté</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Badge className={getInterestLevelColor(analysisResult.interestLevel)}>\n                      {analysisResult.interestLevel.toUpperCase()}\n                    </Badge>\n                    <div className=\"text-right\">\n                      <p className=\"text-2xl font-bold\">{analysisResult.confidenceScore}%</p>\n                      <p className=\"text-sm text-muted-foreground\">Confiance</p>\n                    </div>\n                  </div>\n                  <p className=\"text-sm\">{analysisResult.interestJustification}</p>\n                </CardContent>\n              </Card>\n\n              {/* Audio Insights */}\n              {analysisResult.audioInsights && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Mic className=\"w-5 h-5\" />\n                      <span>Insights audio avancés</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Rythme de conversation</p>\n                        <p className=\"font-medium capitalize\">{analysisResult.audioInsights.conversationPacing}</p>\n                      </div>\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Répartition de parole</p>\n                        <p className=\"font-medium\">\n                          Vendeur: {analysisResult.audioInsights.speakingRatio.seller}% | \n                          Prospect: {analysisResult.audioInsights.speakingRatio.prospect}%\n                        </p>\n                      </div>\n                    </div>\n\n                    {analysisResult.audioInsights.silencePeriods.length > 0 && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">Moments de silence significatifs</p>\n                        <ul className=\"text-sm space-y-1\">\n                          {analysisResult.audioInsights.silencePeriods.map((period: string, index: number) => (\n                            <li key={index} className=\"flex items-start space-x-2\">\n                              <span className=\"text-muted-foreground\">•</span>\n                              <span>{period}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n\n                    {analysisResult.audioInsights.audioQualityNotes.length > 0 && (\n                      <div>\n                        <p className=\"text-sm text-muted-foreground mb-2\">Notes sur la qualité audio</p>\n                        <ul className=\"text-sm space-y-1\">\n                          {analysisResult.audioInsights.audioQualityNotes.map((note: string, index: number) => (\n                            <li key={index} className=\"flex items-start space-x-2\">\n                              <span className=\"text-muted-foreground\">•</span>\n                              <span>{note}</span>\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              )}\n\n              {/* Quick Actions */}\n              <Card>\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex flex-col sm:flex-row gap-3\">\n                    <Link href={`/analysis/${analysisResult.id}`} className=\"flex-1\">\n                      <Button className=\"w-full\" variant=\"default\">\n                        Voir l'analyse complète\n                      </Button>\n                    </Link>\n                    <Button \n                      className=\"flex-1 w-full\" \n                      variant=\"outline\"\n                      onClick={() => {\n                        console.log(\"Navigation vers dashboard...\");\n                        window.location.href = \"/\";\n                      }}\n                    >\n                      Retour au tableau de bord\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border py-12 bg-background mt-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8 mb-8\">\n            {/* Brand */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-6 h-6 bg-primary rounded-md flex items-center justify-center\">\n                  <FlipHorizontal2 className=\"w-3 h-3 text-primary-foreground\" />\n                </div>\n                <span className=\"font-semibold text-foreground\">LeadMirror</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                L'IA révolutionnaire pour analyser vos conversations commerciales et multiplier vos conversions.\n              </p>\n            </div>\n\n            {/* Product */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-foreground\">Produit</h4>\n              <nav className=\"space-y-2\">\n                <Link href=\"/dashboard\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Dashboard\n                </Link>\n                <Link href=\"/analytics\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Analytics\n                </Link>\n                <Link href=\"/integrations\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Intégrations CRM\n                </Link>\n                <Link href=\"/audio-analysis\" className=\"block text-sm text-primary hover:text-primary/80 transition-colors font-medium\">\n                  Analyse Audio IA\n                </Link>\n              </nav>\n            </div>\n\n            {/* Company */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-foreground\">Entreprise</h4>\n              <nav className=\"space-y-2\">\n                <Link href=\"/security\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Sécurité & RGPD\n                </Link>\n                <a href=\"mailto:contact@leadmirror.com\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Contact\n                </a>\n                <a href=\"mailto:support@leadmirror.com\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Support\n                </a>\n              </nav>\n            </div>\n\n            {/* Legal */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-foreground\">Légal</h4>\n              <nav className=\"space-y-2\">\n                <Link href=\"/security\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Confidentialité\n                </Link>\n                <Link href=\"/security\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Conditions d'utilisation\n                </Link>\n                <Link href=\"/security\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Mentions légales\n                </Link>\n              </nav>\n            </div>\n          </div>\n\n          {/* Bottom bar */}\n          <div className=\"border-t border-border pt-8\">\n            <div className=\"text-center space-y-3\">\n              <div className=\"text-sm font-medium text-foreground\">\n                LeadMirror © 2025 — Tous droits réservés\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Solution conçue pour les professionnels de la vente | IA de nouvelle génération (GPT-4o + Whisper) | Respect des normes RGPD\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":23380},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Onboarding from \"@/components/onboarding\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  FlipHorizontal2, \n  Sparkles, \n  Copy, \n  Clock, \n  TrendingUp, \n  History, \n  Crown, \n  Lightbulb, \n  Target, \n  User as UserIcon, \n  CheckCircle, \n  AlertTriangle, \n  Brain, \n  Mail, \n  Shuffle, \n  Shield, \n  ArrowRight,\n  Save,\n  Settings,\n  Download,\n  FileAudio,\n  Mic\n} from \"lucide-react\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\n\ninterface Analysis {\n  id: string;\n  userId: string;\n  title: string;\n  inputText: string;\n  interestLevel: \"hot\" | \"warm\" | \"cold\";\n  interestJustification: string;\n  confidenceScore?: number;\n  personalityProfile?: {\n    type: \"analytical\" | \"driver\" | \"expressive\" | \"amiable\";\n    traits: string[];\n    communicationStyle: string;\n  };\n  emotionalState?: {\n    primary: \"enthousiaste\" | \"prudent\" | \"frustré\" | \"neutre\" | \"excité\";\n    intensity: number;\n    indicators: string[];\n  };\n  objections: Array<{\n    type: string;\n    intensity: \"high\" | \"medium\" | \"low\";\n    description: string;\n    responseStrategy?: string;\n    probability?: number;\n  }>;\n  buyingSignals?: Array<{\n    signal: string;\n    strength: \"strong\" | \"medium\" | \"weak\";\n    description: string;\n  }>;\n  nextSteps?: Array<{\n    action: string;\n    priority: \"high\" | \"medium\" | \"low\";\n    timeframe: string;\n    reasoning: string;\n  }>;\n  strategicAdvice: string;\n  talkingPoints?: string[];\n  followUpSubject: string;\n  followUpMessage: string;\n  alternativeApproaches?: Array<{\n    approach: string;\n    when: string;\n    message: string;\n  }>;\n  riskFactors?: Array<{\n    risk: string;\n    impact: \"high\" | \"medium\" | \"low\";\n    mitigation: string;\n  }>;\n  advancedInsights?: {\n    conversationQualityScore: number;\n    salesTiming: {\n      currentPhase: string;\n      nextPhaseRecommendation: string;\n      timeToClose: string;\n      urgencyIndicators: string[];\n    };\n    keyMoments: Array<{\n      moment: string;\n      significance: string;\n      action: string;\n    }>;\n    competitiveAnalysis: {\n      competitorsDetected: string[];\n      competitiveAdvantages: string[];\n      threatLevel: string;\n      counterStrategies: string[];\n    };\n    prospectMaturity: {\n      decisionMakingStage: string;\n      readinessScore: number;\n      missingElements: string[];\n    };\n    predictions: {\n      closingProbability: number;\n      bestApproachVector: string;\n      predictedObjections: Array<{\n        objection: string;\n        probability: number;\n        preventiveStrategy: string;\n      }>;\n    };\n  };\n  emotionalAnalysis?: {\n    emotionalTrajectory: Array<{\n      phase: string;\n      emotion: string;\n      intensity: number;\n      triggers: string[];\n    }>;\n    overallSentiment: number;\n    emotionalTriggers: string[];\n    recommendedEmotionalApproach: string;\n  };\n  createdAt: string;\n}\n\nexport default function Dashboard() {\n  const { user, isLoading: userLoading } = useAuth();\n  const { toast } = useToast();\n  const [analysisTitle, setAnalysisTitle] = useState(\"\");\n  const [conversationText, setConversationText] = useState(``);\n  const [currentAnalysis, setCurrentAnalysis] = useState<Analysis | null>(null);\n  const [showHistory, setShowHistory] = useState(false);\n  const [showPricing, setShowPricing] = useState(false); \n  const [showOnboarding, setShowOnboarding] = useState(false);\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/auth/logout\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Déconnexion réussie\", \n        description: \"Vous avez été déconnecté avec succès\",\n      });\n      // Redirection vers la page d'accueil après déconnexion\n      setTimeout(() => {\n        window.location.href = \"/\";\n      }, 1000);\n    },\n    onError: (error) => {\n      console.error(\"Logout error:\", error);\n      toast({\n        title: \"Erreur de déconnexion\",\n        description: \"Une erreur s'est produite lors de la déconnexion\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!userLoading && !user) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion en cours...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/auth\";\n      }, 500);\n      return;\n    }\n  }, [user, userLoading, toast]);\n\n  // Show onboarding for new users\n  useEffect(() => {\n    if (user && (user.monthlyAnalysesUsed || 0) === 0 && !currentAnalysis) {\n      const hasSeenOnboarding = localStorage.getItem('leadmirror-onboarding-seen');\n      if (!hasSeenOnboarding) {\n        setShowOnboarding(true);\n      }\n    }\n  }, [user, currentAnalysis]);\n\n  // Fetch user analyses\n  const { data: analyses = [], isLoading: analysesLoading } = useQuery<Analysis[]>({\n    queryKey: [\"/api/analyses\"],\n    enabled: !!user?.isPremium,\n    retry: false,\n  });\n\n  // Analysis mutation\n  const analyzeMutation = useMutation({\n    mutationFn: async (data: { text: string; title: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/analyze\", { \n        conversationText: data.text, \n        title: data.title \n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      setCurrentAnalysis(data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analyses\"] });\n      toast({\n        title: \"Analyse terminée\",\n        description: \"Votre conversation a été analysée avec succès.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion en cours...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/auth/google\";\n        }, 500);\n        return;\n      }\n      \n      const errorMessage = error.message;\n      if (errorMessage.includes(\"limit reached\")) {\n        setShowPricing(true);\n        toast({\n          title: \"Limite d'analyses atteinte\",\n          description: \"Passez au premium pour des analyses illimitées.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Échec de l'analyse\",\n          description: errorMessage,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleAnalyze = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!conversationText.trim()) {\n      toast({\n        title: \"Saisie manquante\",\n        description: \"Veuillez saisir une conversation à analyser.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    analyzeMutation.mutate({ \n      text: conversationText.trim(), \n      title: analysisTitle.trim() || \"Analyse sans titre\" \n    });\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copié !\",\n        description: \"Texte copié dans le presse-papiers.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Échec de la copie\",\n        description: \"Impossible de copier le texte dans le presse-papiers.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getInterestColor = (level: string) => {\n    switch (level) {\n      case \"hot\": return \"hot\";\n      case \"warm\": return \"warm\";\n      case \"cold\": return \"cold\";\n      default: return \"default\";\n    }\n  };\n\n  const getObjectionColor = (intensity: string) => {\n    switch (intensity) {\n      case \"high\": return \"bg-red-500\";\n      case \"medium\": return \"bg-orange-500\";\n      case \"low\": return \"bg-yellow-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  if (userLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const usagePercentage = user.isPremium ? 100 : ((user.monthlyAnalysesUsed || 0) / 3) * 100;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-background border-b border-border sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <FlipHorizontal2 className=\"w-4 h-4 text-primary-foreground\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-foreground\">LeadMirror</h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => window.location.href = \"/analytics\"}\n                  className=\"text-muted-foreground hover:text-foreground\"\n                >\n                  <Target className=\"w-4 h-4 mr-1\" />\n                  Analytics\n                </Button>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => window.location.href = \"/integrations\"}\n                  className=\"text-muted-foreground hover:text-foreground\"\n                >\n                  <Settings className=\"w-4 h-4 mr-1\" />\n                  Intégrations\n                </Button>\n                <span className=\"text-sm text-muted-foreground\">\n                  Analyses utilisées : <span className=\"font-medium\">{user.monthlyAnalysesUsed || 0}</span>\n                  {!user.isPremium && \"/3\"}\n                </span>\n                {!user.isPremium && (\n                  <Button \n                    size=\"sm\" \n                    className=\"bg-accent hover:bg-accent/90\"\n                    onClick={() => setShowPricing(true)}\n                  >\n                    <Crown className=\"w-4 h-4 mr-1\" />\n                    Mettre à niveau\n                  </Button>\n                )}\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2 hover:bg-muted\">\n                      <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\">\n                        {user.profileImageUrl ? (\n                          <img \n                            src={user.profileImageUrl} \n                            alt=\"Profile\" \n                            className=\"w-8 h-8 rounded-full object-cover\"\n                          />\n                        ) : (\n                          <span className=\"text-sm font-medium\">\n                            {(user.firstName?.[0] || user.email?.[0] || \"U\").toUpperCase()}\n                          </span>\n                        )}\n                      </div>\n                      <span className=\"text-sm font-medium\">\n                        {user.firstName || user.email}\n                      </span>\n                      {user.isPremium && (\n                        <Crown className=\"w-4 h-4 text-yellow-500\" />\n                      )}\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-56\">\n                    <DropdownMenuLabel>Mon compte</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem onClick={() => window.location.href = \"/profile\"}>\n                      <UserIcon className=\"mr-2 h-4 w-4\" />\n                      <span>Profil et abonnement</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => window.location.href = \"/analytics\"}>\n                      <Target className=\"mr-2 h-4 w-4\" />\n                      <span>Analytics</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => window.location.href = \"/integrations\"}>\n                      <Settings className=\"mr-2 h-4 w-4\" />\n                      <span>Intégrations</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => window.location.href = \"/security\"}>\n                      <Shield className=\"mr-2 h-4 w-4\" />\n                      <span>Sécurité</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    {!user.isPremium && (\n                      <>\n                        <DropdownMenuItem onClick={() => setShowPricing(true)}>\n                          <Crown className=\"mr-2 h-4 w-4 text-yellow-500\" />\n                          <span>Passer au Premium</span>\n                        </DropdownMenuItem>\n                        <DropdownMenuSeparator />\n                      </>\n                    )}\n                    <DropdownMenuItem onClick={() => logoutMutation.mutate()}>\n                      <ArrowRight className=\"mr-2 h-4 w-4\" />\n                      <span>Se déconnecter</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-2\">\n            Analysez vos conversations commerciales\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Collez votre email ou résumé d'appel pour obtenir des insights IA et des messages de relance parfaits.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Analysis Input */}\n          <div className=\"lg:col-span-2\">\n            <Card className=\"mb-8\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Sparkles className=\"w-5 h-5\" />\n                  <span>Analyse de conversation</span>\n                </CardTitle>\n                <CardDescription>\n                  Analysez vos conversations texte ou uploadez des fichiers audio d'appels commerciaux\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <form onSubmit={handleAnalyze} className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <label className=\"text-sm font-medium text-foreground\">Titre de l'analyse (optionnel)</label>\n                    <input\n                      type=\"text\"\n                      value={analysisTitle}\n                      onChange={(e) => setAnalysisTitle(e.target.value)}\n                      className=\"w-full px-3 py-2 border border-input bg-background rounded-md text-sm placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n                      placeholder=\"Ex: Appel avec Monsieur Dupont - Suivi proposition\"\n                    />\n                  </div>\n                  <Textarea\n                    value={conversationText}\n                    onChange={(e) => setConversationText(e.target.value)}\n                    className=\"min-h-[192px] resize-none\"\n                    placeholder=\"Exemple :\n\nBonjour Jean,\n\nMerci pour l'appel d'hier. Je comprends que vous êtes intéressé par notre programme de coaching premium mais vous avez mentionné que vous devez d'abord en discuter avec votre partenaire commercial. Vous avez également demandé des informations sur les options de paiement.\n\nJ'attends de vos nouvelles !\n\nCordialement,\nSarah\"\n                  />\n                  <div className=\"flex justify-between items-center\">\n                    <div className=\"text-xs text-muted-foreground\">\n                      {conversationText.length} caractères\n                    </div>\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => window.location.href = \"/audio-analysis\"}\n                        className=\"px-4\"\n                      >\n                        <FileAudio className=\"w-4 h-4 mr-2\" />\n                        Audio\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        disabled={analyzeMutation.isPending || !conversationText.trim()}\n                        className=\"px-6\"\n                      >\n                        {analyzeMutation.isPending ? (\n                          <>\n                            <div className=\"animate-spin w-4 h-4 border-2 border-primary-foreground border-t-transparent rounded-full mr-2\" />\n                            Analyse en cours...\n                          </>\n                        ) : (\n                          <>\n                            <Sparkles className=\"w-4 h-4 mr-2\" />\n                            Analyser le message\n                          </>\n                        )}\n                      </Button>\n                    </div>\n                  </div>\n                </form>\n              </CardContent>\n            </Card>\n\n            {/* Loading State */}\n            {analyzeMutation.isPending && (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                  <p className=\"text-muted-foreground\">Analyse de votre conversation en cours...</p>\n                  <p className=\"text-sm text-muted-foreground mt-2\">Cela prend généralement 10-15 secondes</p>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Revolutionary Analysis Results */}\n            {currentAnalysis && !analyzeMutation.isPending && (\n              <div className=\"space-y-6\">\n                {/* Quick Overview Bar */}\n                <Card className=\"bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                      <div className=\"text-center\">\n                        <Badge variant={getInterestColor(currentAnalysis.interestLevel)} className=\"text-sm px-3 py-1 mb-2\">\n                          {currentAnalysis.interestLevel === 'hot' ? '🔥 CHAUD' : \n                           currentAnalysis.interestLevel === 'warm' ? '🟡 TIÈDE' : \n                           '🔵 FROID'}\n                        </Badge>\n                        <p className=\"text-xs text-muted-foreground\">Niveau d'intérêt</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-2xl font-bold text-green-600\">{currentAnalysis.confidenceScore || 85}%</div>\n                        <p className=\"text-xs text-muted-foreground\">Score de confiance</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold\">{currentAnalysis.personalityProfile?.type || 'Analytique'}</div>\n                        <p className=\"text-xs text-muted-foreground\">Profil psychologique</p>\n                      </div>\n                      <div className=\"text-center\">\n                        <div className=\"text-lg font-semibold\">{currentAnalysis.emotionalState?.primary || 'Neutre'}</div>\n                        <p className=\"text-xs text-muted-foreground\">État émotionnel</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"grid lg:grid-cols-2 gap-6\">\n                  {/* Enhanced Interest Level */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <TrendingUp className=\"w-5 h-5\" />\n                        <span>Analyse d'intérêt</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"flex items-center justify-between\">\n                        <Badge variant={getInterestColor(currentAnalysis.interestLevel)} className=\"text-sm px-3 py-1\">\n                          {currentAnalysis.interestLevel === 'hot' ? '🔥 CHAUD' : \n                           currentAnalysis.interestLevel === 'warm' ? '🟡 TIÈDE' : \n                           '🔵 FROID'}\n                        </Badge>\n                        <span className=\"text-2xl font-bold text-green-600\">{currentAnalysis.confidenceScore || 85}%</span>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {currentAnalysis.interestJustification}\n                      </p>\n                      {currentAnalysis.emotionalState && (\n                        <div className=\"p-3 bg-muted rounded\">\n                          <p className=\"text-sm font-medium\">État émotionnel détecté:</p>\n                          <p className=\"text-sm\">{currentAnalysis.emotionalState.primary} (Intensité: {currentAnalysis.emotionalState.intensity}/10)</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n\n                  {/* Personality Profile */}\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <UserIcon className=\"w-5 h-5\" />\n                        <span>Profil psychologique</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {currentAnalysis.personalityProfile ? (\n                        <>\n                          <div>\n                            <Badge variant=\"secondary\" className=\"mb-2\">{currentAnalysis.personalityProfile.type}</Badge>\n                            <p className=\"text-sm text-muted-foreground\">{currentAnalysis.personalityProfile.communicationStyle}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium mb-2\">Traits comportementaux:</p>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {currentAnalysis.personalityProfile.traits?.map((trait: string, index: number) => (\n                                <Badge key={index} variant=\"outline\" className=\"text-xs\">{trait}</Badge>\n                              ))}\n                            </div>\n                          </div>\n                        </>\n                      ) : (\n                        <div className=\"p-3 bg-muted rounded\">\n                          <p className=\"text-sm text-muted-foreground\">Profil en cours d'analyse lors des prochaines interactions...</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Buying Signals */}\n                {currentAnalysis.buyingSignals && currentAnalysis.buyingSignals.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                        <span>Signaux d'achat détectés</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        {currentAnalysis.buyingSignals.map((signal: any, index: number) => (\n                          <div key={index} className=\"p-3 border rounded\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <Badge variant={signal.strength === 'strong' ? 'default' : \n                                            signal.strength === 'medium' ? 'secondary' : 'outline'}>\n                                {signal.strength}\n                              </Badge>\n                            </div>\n                            <p className=\"font-medium text-sm\">{signal.signal}</p>\n                            <p className=\"text-xs text-muted-foreground mt-1\">{signal.description}</p>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Enhanced Objections */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <AlertTriangle className=\"w-5 h-5\" />\n                      <span>Objections probables & Stratégies</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {currentAnalysis.objections?.map((objection: any, index: number) => (\n                        <div key={index} className=\"border rounded p-4\">\n                          <div className=\"flex items-start justify-between mb-3\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge variant={objection.intensity === 'high' ? 'destructive' : \n                                            objection.intensity === 'medium' ? 'secondary' : 'outline'}>\n                                {objection.type}\n                              </Badge>\n                              {objection.probability && (\n                                <span className=\"text-sm text-muted-foreground\">{objection.probability}% probabilité</span>\n                              )}\n                            </div>\n                            <Badge variant=\"outline\">{objection.intensity}</Badge>\n                          </div>\n                          <p className=\"text-sm mb-3\">{objection.description}</p>\n                          {objection.responseStrategy && (\n                            <div className=\"bg-blue-50 dark:bg-blue-950 p-3 rounded\">\n                              <p className=\"text-sm font-medium text-blue-800 dark:text-blue-200 mb-1\">Stratégie de réponse:</p>\n                              <p className=\"text-sm text-blue-700 dark:text-blue-300\">{objection.responseStrategy}</p>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Next Steps */}\n                {currentAnalysis.nextSteps && currentAnalysis.nextSteps.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Clock className=\"w-5 h-5\" />\n                        <span>Étapes suivantes recommandées</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {currentAnalysis.nextSteps.map((step: any, index: number) => (\n                          <div key={index} className=\"flex items-start space-x-3 p-3 border rounded\">\n                            <Badge variant={step.priority === 'high' ? 'destructive' : \n                                          step.priority === 'medium' ? 'secondary' : 'outline'}>\n                              {step.priority}\n                            </Badge>\n                            <div className=\"flex-1\">\n                              <p className=\"font-medium text-sm\">{step.action}</p>\n                              <p className=\"text-xs text-muted-foreground mt-1\">{step.timeframe}</p>\n                              <p className=\"text-xs text-muted-foreground mt-1\">{step.reasoning}</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Enhanced Strategic Advice */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Brain className=\"w-5 h-5\" />\n                      <span>Conseils stratégiques avancés</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <p className=\"text-sm leading-relaxed\">{currentAnalysis.strategicAdvice}</p>\n                    \n                    {currentAnalysis.talkingPoints && currentAnalysis.talkingPoints.length > 0 && (\n                      <div>\n                        <p className=\"font-medium text-sm mb-2\">Points clés à aborder:</p>\n                        <ul className=\"space-y-1\">\n                          {currentAnalysis.talkingPoints.map((point: string, index: number) => (\n                            <li key={index} className=\"text-sm text-muted-foreground flex items-start\">\n                              <span className=\"w-2 h-2 bg-blue-500 rounded-full mt-2 mr-2 flex-shrink-0\"></span>\n                              {point}\n                            </li>\n                          ))}\n                        </ul>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Enhanced Follow-up */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center space-x-2\">\n                      <Mail className=\"w-5 h-5\" />\n                      <span>Message de relance optimisé</span>\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Objet :</label>\n                      <p className=\"text-sm mt-1 p-3 bg-muted rounded\">{currentAnalysis.followUpSubject}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Message :</label>\n                      <p className=\"text-sm mt-1 p-3 bg-muted rounded whitespace-pre-wrap\">{currentAnalysis.followUpMessage}</p>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button \n                        onClick={() => copyToClipboard(`Objet: ${currentAnalysis.followUpSubject}\\n\\n${currentAnalysis.followUpMessage}`)}\n                        className=\"flex-1\"\n                      >\n                        <Copy className=\"w-4 h-4 mr-2\" />\n                        Copier le message complet\n                      </Button>\n\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Alternative Approaches */}\n                {currentAnalysis.alternativeApproaches && currentAnalysis.alternativeApproaches.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Shuffle className=\"w-5 h-5\" />\n                        <span>Approches alternatives</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        {currentAnalysis.alternativeApproaches.map((approach: any, index: number) => (\n                          <div key={index} className=\"border rounded p-4\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <h4 className=\"font-medium text-sm\">{approach.approach}</h4>\n                              <Badge variant=\"outline\" className=\"text-xs\">{approach.when}</Badge>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground bg-muted rounded p-3\">{approach.message}</p>\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\" \n                              className=\"mt-2\"\n                              onClick={() => copyToClipboard(approach.message)}\n                            >\n                              <Copy className=\"w-3 h-3 mr-1\" />\n                              Copier\n                            </Button>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Advanced Insights Section */}\n                {currentAnalysis.advancedInsights && (\n                  <>\n                    {/* Conversation Quality & Predictions */}\n                    <div className=\"grid lg:grid-cols-2 gap-6\">\n                      <Card className=\"bg-gradient-to-br from-green-50 to-blue-50 dark:from-green-950 dark:to-blue-950\">\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center space-x-2\">\n                            <Target className=\"w-5 h-5\" />\n                            <span>Score de qualité & Prédictions</span>\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <div className=\"text-center\">\n                            <div className=\"text-4xl font-bold text-green-600 mb-2\">\n                              {currentAnalysis.advancedInsights.conversationQualityScore}%\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">Score de qualité conversation</p>\n                          </div>\n                          \n                          <div className=\"text-center p-3 bg-white dark:bg-black rounded\">\n                            <div className=\"text-2xl font-bold text-blue-600 mb-1\">\n                              {currentAnalysis.advancedInsights.predictions.closingProbability}%\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">Probabilité de closing</p>\n                          </div>\n                          \n                          <div className=\"p-3 bg-blue-50 dark:bg-blue-950 rounded\">\n                            <p className=\"text-sm font-medium text-blue-800 dark:text-blue-200 mb-1\">Meilleur vecteur d'approche:</p>\n                            <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                              {currentAnalysis.advancedInsights.predictions.bestApproachVector}\n                            </p>\n                          </div>\n                        </CardContent>\n                      </Card>\n\n                      {/* Sales Timing */}\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center space-x-2\">\n                            <Clock className=\"w-5 h-5\" />\n                            <span>Timing commercial</span>\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent className=\"space-y-4\">\n                          <div>\n                            <Badge variant=\"secondary\" className=\"mb-2\">\n                              Phase: {currentAnalysis.advancedInsights.salesTiming.currentPhase}\n                            </Badge>\n                            <Badge variant=\"outline\" className=\"ml-2\">\n                              {currentAnalysis.advancedInsights.salesTiming.timeToClose}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"p-3 bg-muted rounded\">\n                            <p className=\"text-sm font-medium mb-1\">Prochaine étape recommandée:</p>\n                            <p className=\"text-sm\">{currentAnalysis.advancedInsights.salesTiming.nextPhaseRecommendation}</p>\n                          </div>\n                          \n                          {currentAnalysis.advancedInsights.salesTiming.urgencyIndicators.length > 0 && (\n                            <div>\n                              <p className=\"text-sm font-medium mb-2\">Indicateurs d'urgence:</p>\n                              <div className=\"space-y-1\">\n                                {currentAnalysis.advancedInsights.salesTiming.urgencyIndicators.map((indicator, index) => (\n                                  <div key={index} className=\"flex items-center text-sm\">\n                                    <span className=\"w-2 h-2 bg-red-500 rounded-full mr-2\"></span>\n                                    {indicator}\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          )}\n                        </CardContent>\n                      </Card>\n                    </div>\n\n                    {/* Key Moments */}\n                    {currentAnalysis.advancedInsights.keyMoments.length > 0 && (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center space-x-2\">\n                            <Lightbulb className=\"w-5 h-5\" />\n                            <span>Moments clés détectés</span>\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-3\">\n                            {currentAnalysis.advancedInsights.keyMoments.map((moment, index) => (\n                              <div key={index} className=\"border-l-4 border-blue-500 pl-4 py-2\">\n                                <div className=\"flex items-center justify-between mb-1\">\n                                  <p className=\"font-medium text-sm\">{moment.moment}</p>\n                                  <Badge variant={moment.significance === 'critique' ? 'destructive' : \n                                               moment.significance === 'important' ? 'secondary' : 'outline'}>\n                                    {moment.significance}\n                                  </Badge>\n                                </div>\n                                <p className=\"text-sm text-muted-foreground\">{moment.action}</p>\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n\n                    {/* Competitive Analysis */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center space-x-2\">\n                          <Shield className=\"w-5 h-5\" />\n                          <span>Analyse concurrentielle</span>\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium\">Niveau de menace:</span>\n                          <Badge variant={currentAnalysis.advancedInsights.competitiveAnalysis.threatLevel === 'high' ? 'destructive' : \n                                        currentAnalysis.advancedInsights.competitiveAnalysis.threatLevel === 'medium' ? 'secondary' : 'outline'}>\n                            {currentAnalysis.advancedInsights.competitiveAnalysis.threatLevel}\n                          </Badge>\n                        </div>\n                        \n                        {currentAnalysis.advancedInsights.competitiveAnalysis.competitorsDetected.length > 0 && (\n                          <div>\n                            <p className=\"text-sm font-medium mb-2\">Concurrents détectés:</p>\n                            <div className=\"flex flex-wrap gap-1\">\n                              {currentAnalysis.advancedInsights.competitiveAnalysis.competitorsDetected.map((competitor, index) => (\n                                <Badge key={index} variant=\"outline\">{competitor}</Badge>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n                        \n                        {currentAnalysis.advancedInsights.competitiveAnalysis.competitiveAdvantages.length > 0 && (\n                          <div>\n                            <p className=\"text-sm font-medium mb-2\">Vos avantages concurrentiels:</p>\n                            <ul className=\"space-y-1\">\n                              {currentAnalysis.advancedInsights.competitiveAnalysis.competitiveAdvantages.map((advantage, index) => (\n                                <li key={index} className=\"text-sm flex items-start\">\n                                  <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 mt-0.5 flex-shrink-0\" />\n                                  {advantage}\n                                </li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n\n                    {/* Prospect Maturity */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center space-x-2\">\n                          <UserIcon className=\"w-5 h-5\" />\n                          <span>Maturité du prospect</span>\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-sm font-medium\">Étape de décision:</span>\n                          <Badge variant=\"secondary\">{currentAnalysis.advancedInsights.prospectMaturity.decisionMakingStage}</Badge>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Score de préparation:</span>\n                            <span className=\"font-medium\">{currentAnalysis.advancedInsights.prospectMaturity.readinessScore}%</span>\n                          </div>\n                          <Progress value={currentAnalysis.advancedInsights.prospectMaturity.readinessScore} className=\"h-2\" />\n                        </div>\n                        \n                        {currentAnalysis.advancedInsights.prospectMaturity.missingElements.length > 0 && (\n                          <div>\n                            <p className=\"text-sm font-medium mb-2\">Éléments manquants:</p>\n                            <ul className=\"space-y-1\">\n                              {currentAnalysis.advancedInsights.prospectMaturity.missingElements.map((element, index) => (\n                                <li key={index} className=\"text-sm text-muted-foreground flex items-start\">\n                                  <span className=\"w-2 h-2 bg-orange-500 rounded-full mt-2 mr-2 flex-shrink-0\"></span>\n                                  {element}\n                                </li>\n                              ))}\n                            </ul>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n\n                    {/* Predicted Objections */}\n                    {currentAnalysis.advancedInsights.predictions.predictedObjections.length > 0 && (\n                      <Card>\n                        <CardHeader>\n                          <CardTitle className=\"flex items-center space-x-2\">\n                            <AlertTriangle className=\"w-5 h-5\" />\n                            <span>Objections prédites par l'IA</span>\n                          </CardTitle>\n                        </CardHeader>\n                        <CardContent>\n                          <div className=\"space-y-3\">\n                            {currentAnalysis.advancedInsights.predictions.predictedObjections.map((objection, index) => (\n                              <div key={index} className=\"border rounded p-4\">\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <p className=\"font-medium text-sm\">{objection.objection}</p>\n                                  <Badge variant=\"outline\">{objection.probability}% probabilité</Badge>\n                                </div>\n                                <div className=\"bg-purple-50 dark:bg-purple-950 p-3 rounded\">\n                                  <p className=\"text-sm font-medium text-purple-800 dark:text-purple-200 mb-1\">Stratégie préventive:</p>\n                                  <p className=\"text-sm text-purple-700 dark:text-purple-300\">{objection.preventiveStrategy}</p>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </CardContent>\n                      </Card>\n                    )}\n                  </>\n                )}\n\n                {/* Emotional Analysis */}\n                {currentAnalysis.emotionalAnalysis && (\n                  <Card className=\"bg-gradient-to-br from-pink-50 to-purple-50 dark:from-pink-950 dark:to-purple-950\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Brain className=\"w-5 h-5\" />\n                        <span>Analyse émotionnelle avancée</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-3xl font-bold mb-2\" style={{\n                          color: currentAnalysis.emotionalAnalysis.overallSentiment > 50 ? '#10b981' : \n                                currentAnalysis.emotionalAnalysis.overallSentiment > 0 ? '#f59e0b' : '#ef4444'\n                        }}>\n                          {currentAnalysis.emotionalAnalysis.overallSentiment > 0 ? '+' : ''}{currentAnalysis.emotionalAnalysis.overallSentiment}\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">Sentiment global (-100 à +100)</p>\n                      </div>\n                      \n                      <div className=\"p-3 bg-white dark:bg-black rounded\">\n                        <p className=\"text-sm font-medium mb-1\">Approche émotionnelle recommandée:</p>\n                        <p className=\"text-sm\">{currentAnalysis.emotionalAnalysis.recommendedEmotionalApproach}</p>\n                      </div>\n                      \n                      {currentAnalysis.emotionalAnalysis.emotionalTriggers.length > 0 && (\n                        <div>\n                          <p className=\"text-sm font-medium mb-2\">Déclencheurs émotionnels détectés:</p>\n                          <div className=\"flex flex-wrap gap-1\">\n                            {currentAnalysis.emotionalAnalysis.emotionalTriggers.map((trigger, index) => (\n                              <Badge key={index} variant=\"outline\" className=\"text-xs\">{trigger}</Badge>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Risk Factors */}\n                {currentAnalysis.riskFactors && currentAnalysis.riskFactors.length > 0 && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center space-x-2\">\n                        <Shield className=\"w-5 h-5\" />\n                        <span>Facteurs de risque & Mitigations</span>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        {currentAnalysis.riskFactors.map((risk: any, index: number) => (\n                          <div key={index} className=\"border rounded p-4\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <p className=\"font-medium text-sm\">{risk.risk}</p>\n                              <Badge variant={risk.impact === 'high' ? 'destructive' : \n                                            risk.impact === 'medium' ? 'secondary' : 'outline'}>\n                                {risk.impact}\n                              </Badge>\n                            </div>\n                            <div className=\"bg-green-50 dark:bg-green-950 p-3 rounded\">\n                              <p className=\"text-sm font-medium text-green-800 dark:text-green-200 mb-1\">Stratégie de mitigation:</p>\n                              <p className=\"text-sm text-green-700 dark:text-green-300\">{risk.mitigation}</p>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Sidebar */}\n          <div className=\"space-y-6\">\n            {/* Usage Stats */}\n            <Card className=\"bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950 dark:to-purple-950 border-2\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center space-x-2\">\n                    <TrendingUp className=\"w-5 h-5\" />\n                    <span>Vos analyses</span>\n                  </span>\n                  {user?.isPremium && (\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      onClick={() => setShowHistory(true)}\n                      className=\"text-muted-foreground hover:text-foreground\"\n                    >\n                      <History className=\"w-4 h-4 mr-1\" />\n                      Historique\n                    </Button>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Analyses mensuelles</p>\n                    <p className=\"text-2xl font-bold text-foreground\">\n                      {user.isPremium ? \"∞ ILLIMITÉES\" : `${user.monthlyAnalysesUsed || 0}/3`}\n                    </p>\n                  </div>\n                  {user.isPremium ? (\n                    <Badge className=\"bg-green-500 text-white pulse\">\n                      🔥 PREMIUM\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"outline\" className=\"border-yellow-500 text-yellow-700\">\n                      Gratuit\n                    </Badge>\n                  )}\n                </div>\n                {!user.isPremium && (\n                  <>\n                    <Progress value={usagePercentage} className=\"h-3\" />\n                    <div className=\"bg-gradient-to-r from-yellow-100 to-orange-100 dark:from-yellow-950 dark:to-orange-950 p-4 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n                      <p className=\"text-sm font-semibold text-yellow-800 dark:text-yellow-200 mb-2\">\n                        🚀 Débloquez le plein potentiel\n                      </p>\n                      <ul className=\"text-xs text-yellow-700 dark:text-yellow-300 space-y-1 mb-3\">\n                        <li>• Analyses ILLIMITÉES</li>\n                        <li>• Profiling DISC complet</li>\n                        <li>• Prédictions d'objections avancées</li>\n                        <li>• Historique complet + analytics</li>\n                      </ul>\n                      <Button \n                        className=\"w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n                        onClick={() => setShowPricing(true)}\n                      >\n                        <Crown className=\"w-4 h-4 mr-2\" />\n                        Passer au Premium - €15/mois\n                      </Button>\n                    </div>\n                  </>\n                )}\n              </CardContent>\n            </Card>\n\n\n\n            {/* Quick Tips */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Conseils rapides</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3 text-sm\">\n                <div className=\"flex items-start space-x-2\">\n                  <Lightbulb className=\"w-4 h-4 text-yellow-500 mt-0.5 flex-shrink-0\" />\n                  <p className=\"text-muted-foreground\">Incluez le contexte de l'entreprise du prospect et ses points de douleur</p>\n                </div>\n                <div className=\"flex items-start space-x-2\">\n                  <Target className=\"w-4 h-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n                  <p className=\"text-muted-foreground\">Copiez les fils d'emails entiers pour une meilleure analyse</p>\n                </div>\n                <div className=\"flex items-start space-x-2\">\n                  <Clock className=\"w-4 h-4 text-green-500 mt-0.5 flex-shrink-0\" />\n                  <p className=\"text-muted-foreground\">Meilleurs résultats avec des conversations de 100-500 mots</p>\n                </div>\n              </CardContent>\n            </Card>\n\n\n          </div>\n        </div>\n      </main>\n\n      {/* History Dialog */}\n      <Dialog open={showHistory} onOpenChange={setShowHistory}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Analyses sauvegardées</DialogTitle>\n            <DialogDescription>\n              Consultez vos précédentes analyses de conversations (Premium uniquement)\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"mt-4\">\n            {user?.isPremium ? (\n              analyses && analyses.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {analyses.map((analysis) => (\n                    <Card key={analysis.id} className=\"cursor-pointer hover:bg-muted/50\" onClick={() => setCurrentAnalysis(analysis)}>\n                      <CardHeader className=\"pb-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge variant={getInterestColor(analysis.interestLevel)}>\n                              {analysis.interestLevel === 'hot' ? '🔥 Chaud' : \n                               analysis.interestLevel === 'warm' ? '🌤 Tiède' : '❄️ Froid'}\n                            </Badge>\n                            <span className=\"font-medium text-sm\">{analysis.title}</span>\n                          </div>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {new Date(analysis.createdAt).toLocaleDateString('fr-FR')}\n                          </span>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"pt-0\">\n                        <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                          {analysis.inputText.substring(0, 150)}...\n                        </p>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-center text-muted-foreground py-8\">\n                  Aucune analyse trouvée dans votre historique\n                </p>\n              )\n            ) : (\n              <div className=\"text-center py-8\">\n                <Crown className=\"w-12 h-12 text-accent mx-auto mb-4\" />\n                <p className=\"text-muted-foreground mb-4\">\n                  L'accès à l'historique nécessite un abonnement Premium\n                </p>\n                <Button onClick={() => setShowPricing(true)}>\n                  Passer au Premium\n                </Button>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Pricing Modal */}\n      <Dialog open={showPricing} onOpenChange={setShowPricing}>\n        <DialogContent className=\"max-w-4xl\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl\">Choisissez votre formule</DialogTitle>\n            <DialogDescription>\n              Passez au premium pour débloquer les analyses illimitées et les fonctionnalités avancées\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"grid md:grid-cols-2 gap-6 mt-6\">\n            {/* Free Plan */}\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle>Gratuit</CardTitle>\n                <div className=\"text-3xl font-bold\">€0</div>\n                <CardDescription>par mois</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 mb-6\">\n                  <li className=\"flex items-center space-x-2\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    </div>\n                    <span>3 analyses par mois</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    </div>\n                    <span>Insights IA basiques</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    </div>\n                    <span>Génération de messages de relance</span>\n                  </li>\n                </ul>\n                <Button variant=\"outline\" className=\"w-full\" disabled>\n                  Formule actuelle\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Premium Plan */}\n            <Card className=\"border-primary\">\n              <CardHeader className=\"text-center\">\n                <Badge className=\"mb-2\">Plus populaire</Badge>\n                <CardTitle>Premium</CardTitle>\n                <div className=\"text-3xl font-bold text-primary\">€15</div>\n                <CardDescription>par mois</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 mb-6\">\n                  <li className=\"flex items-center space-x-2\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    </div>\n                    <span>Analyses illimitées</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    </div>\n                    <span>Insights IA avancés</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    </div>\n                    <span>Historique complet des analyses</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    </div>\n                    <span>Suivi des performances</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <div className=\"w-5 h-5 rounded-full bg-green-100 flex items-center justify-center\">\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                    </div>\n                    <span>Support prioritaire</span>\n                  </li>\n                </ul>\n                <Button \n                  className=\"w-full\"\n                  onClick={async () => {\n                    try {\n                      const response = await apiRequest(\"POST\", \"/api/create-subscription\");\n                      if (response.ok) {\n                        const data = await response.json();\n                        if (data.checkoutUrl) {\n                          window.location.href = data.checkoutUrl;\n                        }\n                      } else {\n                        const errorData = await response.json();\n                        console.error(\"Erreur API:\", errorData.error?.message || errorData.message);\n                      }\n                    } catch (error) {\n                      console.error(\"Erreur création abonnement:\", error);\n                    }\n                  }}\n                >\n                  <Crown className=\"w-4 h-4 mr-2\" />\n                  Passer au premium\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* History Modal */}\n      <Dialog open={showHistory} onOpenChange={setShowHistory}>\n        <DialogContent className=\"max-w-6xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Historique des analyses</DialogTitle>\n            <DialogDescription>\n              Vos analyses de conversations récentes\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 mt-6\">\n            {analyses && analyses.length > 0 ? (\n              analyses.map((analysis: Analysis) => (\n                <Card key={analysis.id}>\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <div>\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <span className=\"text-sm text-muted-foreground\">\n                            {new Date(analysis.createdAt).toLocaleString()}\n                          </span>\n                          <Badge variant={getInterestColor(analysis.interestLevel)}>\n                            {analysis.interestLevel}\n                          </Badge>\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">{analysis.followUpSubject}</p>\n                      </div>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => copyToClipboard(`Subject: ${analysis.followUpSubject}\\n\\n${analysis.followUpMessage}`)}\n                      >\n                        <Copy className=\"w-4 h-4 mr-1\" />\n                        Copier\n                      </Button>\n                    </div>\n                    <div className=\"text-xs text-muted-foreground bg-muted rounded p-3\">\n                      {analysis.inputText.substring(0, 150)}...\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-muted-foreground\">Aucune analyse trouvée.</p>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Onboarding Component */}\n      <Onboarding \n        isOpen={showOnboarding} \n        onComplete={() => {\n          setShowOnboarding(false);\n          localStorage.setItem('leadmirror-onboarding-seen', 'true');\n        }} \n      />\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":66330},"client/src/pages/integrations.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  Settings, \n  Plus, \n  Check, \n  X, \n  ExternalLink,\n  FlipHorizontal2,\n  Crown,\n  Database,\n  Briefcase,\n  Layout,\n  Trello\n} from \"lucide-react\";\n\ninterface CrmIntegration {\n  id: string;\n  platform: string;\n  isActive: boolean;\n  config: any;\n  createdAt: string;\n  updatedAt: string;\n}\n\nconst platformConfig = {\n  notion: {\n    name: \"Notion\",\n    icon: Database,\n    color: \"bg-gray-900\",\n    fields: [\n      { key: \"token\", label: \"Token d'intégration\", type: \"password\", placeholder: \"secret_...\" },\n      { key: \"databaseId\", label: \"ID de la base de données\", type: \"text\", placeholder: \"32 caractères\" }\n    ],\n    description: \"Exportez vos analyses vers une base de données Notion organisée\",\n    setupUrl: \"https://developers.notion.com/docs/create-a-notion-integration\"\n  },\n  pipedrive: {\n    name: \"Pipedrive\", \n    icon: Briefcase,\n    color: \"bg-green-600\",\n    fields: [\n      { key: \"apiToken\", label: \"Token API\", type: \"password\", placeholder: \"Votre token API Pipedrive\" },\n      { key: \"companyDomain\", label: \"Domaine de votre entreprise\", type: \"text\", placeholder: \"monentreprise\" }\n    ],\n    description: \"Créez automatiquement des notes et activités dans Pipedrive\",\n    setupUrl: \"https://pipedrive.readme.io/docs/how-to-find-the-api-token\"\n  },\n  clickup: {\n    name: \"ClickUp\",\n    icon: Layout,\n    color: \"bg-purple-600\", \n    fields: [\n      { key: \"apiToken\", label: \"Token API\", type: \"password\", placeholder: \"pk_...\" },\n      { key: \"listId\", label: \"ID de la liste\", type: \"text\", placeholder: \"ID de la liste ClickUp\" }\n    ],\n    description: \"Transformez vos analyses en tâches ClickUp avec priorités\",\n    setupUrl: \"https://clickup.com/api\"\n  },\n  trello: {\n    name: \"Trello\",\n    icon: Trello,\n    color: \"bg-blue-600\",\n    fields: [\n      { key: \"apiKey\", label: \"Clé API\", type: \"text\", placeholder: \"Votre clé API Trello\" },\n      { key: \"token\", label: \"Token\", type: \"password\", placeholder: \"Votre token Trello\" },\n      { key: \"listId\", label: \"ID de la liste\", type: \"text\", placeholder: \"ID de la liste Trello\" }\n    ],\n    description: \"Créez des cartes Trello avec checklists et labels automatiques\",\n    setupUrl: \"https://trello.com/app-key\"\n  }\n};\n\nexport default function Integrations() {\n  const { user, isLoading: userLoading } = useAuth();\n  const { toast } = useToast();\n  const [selectedPlatform, setSelectedPlatform] = useState<string | null>(null);\n  const [formData, setFormData] = useState<any>({});\n  const [showAddDialog, setShowAddDialog] = useState(false);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!userLoading && !user) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion en cours...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/auth/google\";\n      }, 500);\n      return;\n    }\n  }, [user, userLoading, toast]);\n\n  // Fetch integrations\n  const { data: integrations, isLoading } = useQuery({\n    queryKey: [\"/api/crm/integrations\"],\n    enabled: !!user,\n    retry: false,\n  });\n\n  // Create integration mutation\n  const createMutation = useMutation({\n    mutationFn: async (data: { platform: string; config: any }) => {\n      const response = await apiRequest(\"POST\", \"/api/crm/integrations\", data);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/crm/integrations\"] });\n      setShowAddDialog(false);\n      setFormData({});\n      setSelectedPlatform(null);\n      toast({\n        title: \"Intégration ajoutée\",\n        description: \"Votre intégration CRM a été configurée avec succès.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion en cours...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/auth/google\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Erreur\",\n        description: error.message || \"Impossible de configurer l'intégration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Toggle integration mutation\n  const toggleMutation = useMutation({\n    mutationFn: async ({ id, isActive }: { id: string; isActive: boolean }) => {\n      const response = await apiRequest(\"PUT\", `/api/crm/integrations/${id}`, { isActive });\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/crm/integrations\"] });\n      toast({\n        title: \"Intégration mise à jour\",\n        description: \"Le statut de l'intégration a été modifié.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de modifier l'intégration\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete integration mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/crm/integrations/${id}`);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/crm/integrations\"] });\n      toast({\n        title: \"Intégration supprimée\",\n        description: \"L'intégration a été supprimée avec succès.\",\n      });\n    },\n  });\n\n  const handleFormSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedPlatform) return;\n\n    createMutation.mutate({\n      platform: selectedPlatform,\n      config: formData,\n    });\n  };\n\n  const handleInputChange = (key: string, value: string) => {\n    setFormData({ ...formData, [key]: value });\n  };\n\n  if (userLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-background border-b border-border sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <FlipHorizontal2 className=\"w-4 h-4 text-primary-foreground\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-foreground\">LeadMirror</h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => window.location.href = \"/\"}\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                ← Retour au dashboard\n              </Button>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\"\n                onClick={() => window.location.href = \"/api/logout\"}\n              >\n                Se déconnecter\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-2\">\n            Intégrations CRM\n          </h2>\n          <p className=\"text-muted-foreground\">\n            Connectez LeadMirror à vos outils préférés pour automatiser l'export de vos analyses.\n          </p>\n        </div>\n\n        {!user?.isPremium && (\n          <Card className=\"mb-8 border-yellow-200 bg-yellow-50 dark:bg-yellow-950 dark:border-yellow-800\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-4\">\n                <Crown className=\"w-8 h-8 text-yellow-600\" />\n                <div>\n                  <h3 className=\"font-semibold text-yellow-800 dark:text-yellow-200\">\n                    Fonctionnalité Premium\n                  </h3>\n                  <p className=\"text-yellow-700 dark:text-yellow-300\">\n                    Les intégrations CRM nécessitent un abonnement Premium pour synchroniser automatiquement vos analyses.\n                  </p>\n                </div>\n                <Button \n                  className=\"bg-yellow-600 hover:bg-yellow-700 text-white\"\n                  onClick={() => window.location.href = \"/subscribe\"}\n                >\n                  Passer au Premium\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        <div className=\"grid gap-6\">\n          {/* Existing Integrations */}\n          {Array.isArray(integrations) && integrations.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Intégrations configurées</CardTitle>\n                <CardDescription>\n                  Gérez vos intégrations CRM existantes\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {(integrations as CrmIntegration[]).map((integration: CrmIntegration) => {\n                    const config = platformConfig[integration.platform as keyof typeof platformConfig];\n                    const IconComponent = config?.icon || Settings;\n                    \n                    return (\n                      <div key={integration.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`p-2 rounded-lg ${config?.color || 'bg-gray-500'}`}>\n                            <IconComponent className=\"w-4 h-4 text-white\" />\n                          </div>\n                          <div>\n                            <h4 className=\"font-medium\">{config?.name || integration.platform}</h4>\n                            <p className=\"text-sm text-muted-foreground\">\n                              Configuré le {new Date(integration.createdAt).toLocaleDateString('fr-FR')}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-3\">\n                          <Badge variant={integration.isActive ? \"default\" : \"secondary\"}>\n                            {integration.isActive ? \"Actif\" : \"Inactif\"}\n                          </Badge>\n                          \n                          <Switch\n                            checked={integration.isActive}\n                            onCheckedChange={(checked) => \n                              toggleMutation.mutate({ id: integration.id, isActive: checked })\n                            }\n                            disabled={toggleMutation.isPending}\n                          />\n                          \n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => deleteMutation.mutate(integration.id)}\n                            disabled={deleteMutation.isPending}\n                          >\n                            <X className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Available Integrations */}\n          <Card>\n            <CardHeader>\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <CardTitle>Intégrations disponibles</CardTitle>\n                  <CardDescription>\n                    Connectez vos outils CRM préférés\n                  </CardDescription>\n                </div>\n                {user?.isPremium && (\n                  <Dialog open={showAddDialog} onOpenChange={setShowAddDialog}>\n                    <DialogTrigger asChild>\n                      <Button>\n                        <Plus className=\"w-4 h-4 mr-2\" />\n                        Ajouter une intégration\n                      </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"max-w-md\">\n                      <DialogHeader>\n                        <DialogTitle>Nouvelle intégration</DialogTitle>\n                        <DialogDescription>\n                          Choisissez une plateforme et configurez l'intégration\n                        </DialogDescription>\n                      </DialogHeader>\n                      \n                      {!selectedPlatform ? (\n                        <div className=\"space-y-3\">\n                          {Object.entries(platformConfig).map(([key, config]) => {\n                            const IconComponent = config.icon;\n                            return (\n                              <button\n                                key={key}\n                                className=\"w-full p-4 border rounded-lg hover:bg-muted transition-colors text-left\"\n                                onClick={() => setSelectedPlatform(key)}\n                              >\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className={`p-2 rounded-lg ${config.color}`}>\n                                    <IconComponent className=\"w-4 h-4 text-white\" />\n                                  </div>\n                                  <div>\n                                    <h4 className=\"font-medium\">{config.name}</h4>\n                                    <p className=\"text-sm text-muted-foreground\">\n                                      {config.description}\n                                    </p>\n                                  </div>\n                                </div>\n                              </button>\n                            );\n                          })}\n                        </div>\n                      ) : (\n                        <form onSubmit={handleFormSubmit} className=\"space-y-4\">\n                          <div className=\"flex items-center space-x-3 mb-4\">\n                            <div className={`p-2 rounded-lg ${platformConfig[selectedPlatform as keyof typeof platformConfig].color}`}>\n                              {(() => {\n                                const IconComponent = platformConfig[selectedPlatform as keyof typeof platformConfig].icon;\n                                return <IconComponent className=\"w-4 h-4 text-white\" />;\n                              })()}\n                            </div>\n                            <div>\n                              <h4 className=\"font-medium\">\n                                {platformConfig[selectedPlatform as keyof typeof platformConfig].name}\n                              </h4>\n                              <a \n                                href={platformConfig[selectedPlatform as keyof typeof platformConfig].setupUrl}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"text-sm text-primary hover:underline flex items-center\"\n                              >\n                                Guide de configuration\n                                <ExternalLink className=\"w-3 h-3 ml-1\" />\n                              </a>\n                            </div>\n                          </div>\n                          \n                          {platformConfig[selectedPlatform as keyof typeof platformConfig].fields.map((field) => (\n                            <div key={field.key} className=\"space-y-2\">\n                              <Label htmlFor={field.key}>{field.label}</Label>\n                              <Input\n                                id={field.key}\n                                type={field.type}\n                                placeholder={field.placeholder}\n                                value={formData[field.key] || \"\"}\n                                onChange={(e) => handleInputChange(field.key, e.target.value)}\n                                required\n                              />\n                            </div>\n                          ))}\n                          \n                          <div className=\"flex justify-end space-x-2 pt-4\">\n                            <Button \n                              type=\"button\" \n                              variant=\"outline\" \n                              onClick={() => {\n                                setSelectedPlatform(null);\n                                setFormData({});\n                              }}\n                            >\n                              Retour\n                            </Button>\n                            <Button \n                              type=\"submit\" \n                              disabled={createMutation.isPending}\n                            >\n                              {createMutation.isPending ? \"Configuration...\" : \"Configurer\"}\n                            </Button>\n                          </div>\n                        </form>\n                      )}\n                    </DialogContent>\n                  </Dialog>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                {Object.entries(platformConfig).map(([key, config]) => {\n                  const IconComponent = config.icon;\n                  const isConfigured = Array.isArray(integrations) && integrations.some((i: CrmIntegration) => i.platform === key);\n                  \n                  return (\n                    <div key={key} className=\"p-4 border rounded-lg\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className={`p-2 rounded-lg ${config.color}`}>\n                          <IconComponent className=\"w-4 h-4 text-white\" />\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-2 mb-1\">\n                            <h4 className=\"font-medium\">{config.name}</h4>\n                            {isConfigured && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                <Check className=\"w-3 h-3 mr-1\" />\n                                Configuré\n                              </Badge>\n                            )}\n                          </div>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {config.description}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":20114},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FlipHorizontal2, Brain, MessageSquare, TrendingUp, CheckCircle, ArrowRight, Shield, Lock, Database } from \"lucide-react\";\nimport Footer from \"@/components/Footer\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Promo Banner */}\n      <div className=\"bg-gradient-to-r from-red-600 to-orange-600 text-white py-2 px-4 text-center animate-pulse\">\n        <p className=\"text-sm font-medium\">\n          🚀 <strong>LANCEMENT EXCLUSIF</strong> • Accès à vie 99€ au lieu de 180€/an • Plus que 50 places disponibles • <strong>Offre limitée</strong>\n        </p>\n      </div>\n\n      {/* Header */}\n      <header className=\"border-b border-border sticky top-0 z-40 bg-background/95 backdrop-blur\" role=\"banner\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <FlipHorizontal2 className=\"w-4 h-4 text-primary-foreground\" />\n              </div>\n              <h1 className=\"text-xl font-bold text-foreground\">LeadMirror</h1>\n            </div>\n            \n            <nav className=\"flex items-center space-x-4\" role=\"navigation\" aria-label=\"Navigation principale\">\n              <Button \n                variant=\"ghost\" \n                onClick={() => window.location.href = '/auth'}\n                aria-label=\"Se connecter à LeadMirror\"\n              >\n                Se connecter\n              </Button>\n              <Button \n                onClick={() => window.location.href = '/auth'}\n                aria-label=\"Commencer votre essai gratuit\"\n              >\n                Commencer\n              </Button>\n            </nav>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\" role=\"main\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <h1 className=\"text-4xl md:text-6xl font-bold text-foreground mb-6\">\n            Transformez vos conversations\n            <span className=\"text-primary block\">commerciales avec l'IA</span>\n          </h1>\n          <p className=\"text-xl text-muted-foreground mb-8 max-w-3xl mx-auto\">\n            <strong>LeadMirror</strong> analyse instantanément vos conversations commerciales avec GPT-4o et Whisper AI. \n            Profiling psychologique DISC, détection d'objections, scoring d'intérêt, messages de relance personnalisés. \n            <span className=\"font-semibold text-foreground\">Transformez chaque conversation en opportunité fermée.</span>\n          </p>\n          <div className=\"text-center\">\n            {/* Bannière exclusive - 50 places */}\n            <div className=\"bg-gradient-to-r from-red-600 via-orange-600 to-yellow-600 text-white px-8 py-4 rounded-2xl inline-block mb-8 animate-pulse shadow-2xl\">\n              <div className=\"flex items-center justify-center gap-4 mb-2\">\n                <span className=\"font-bold text-lg\">🔥 LANCEMENT EXCLUSIF</span>\n                <span className=\"bg-white/20 rounded-full px-3 py-1 text-sm font-bold\">50 PLACES SEULEMENT</span>\n              </div>\n              <div className=\"text-2xl font-bold\">ACCÈS À VIE - 99€ au lieu de 180€/an</div>\n            </div>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button \n                size=\"lg\" \n                onClick={() => window.location.href = '/lifetime-offer'}\n                className=\"text-xl px-16 py-8 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 shadow-2xl transform hover:scale-105 transition-all duration-300 font-bold\"\n              >\n                🚀 RÉSERVER MA PLACE À VIE - 99€\n                <ArrowRight className=\"ml-2 w-6 h-6\" />\n              </Button>\n              <Button \n                variant=\"outline\" \n                size=\"lg\" \n                className=\"text-lg px-8 py-8 border-2\"\n                onClick={() => window.location.href = '/auth'}\n              >\n                Essai gratuit (3 analyses)\n              </Button>\n            </div>\n            \n            <div className=\"mt-6 max-w-lg mx-auto\">\n              <div className=\"bg-red-50 dark:bg-red-950/30 border border-red-200 dark:border-red-800 rounded-lg p-4 mb-4\">\n                <p className=\"text-sm text-red-800 dark:text-red-200 font-semibold\">\n                  ⚠️ ATTENTION : Seulement 50 personnes obtiendront cet accès à vie\n                </p>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                Une fois les 50 places vendues, le prix passera à 15€/mois (180€/an). \n                <br />Cette offre ne reviendra jamais.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section id=\"features\" className=\"py-20 bg-muted/50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n              Alimenté par une analyse IA avancée\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Obtenez des insights profonds sur l'état d'esprit de vos prospects et recevez des conseils stratégiques pour chaque situation.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"relative overflow-hidden border-2 hover:border-primary/50 transition-all duration-300\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <Brain className=\"w-12 h-12 text-primary\" />\n                  <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">GPT-4o</Badge>\n                </div>\n                <CardTitle>Scoring d'intérêt IA</CardTitle>\n                <CardDescription>\n                  <strong>Analyse psychologique avancée.</strong> Déterminez instantanément si votre prospect est HOT (90%), WARM (60%) ou COLD (20%) avec justification comportementale complète.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"relative overflow-hidden border-2 hover:border-primary/50 transition-all duration-300\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <MessageSquare className=\"w-12 h-12 text-primary\" />\n                  <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">DISC</Badge>\n                </div>\n                <CardTitle>Objections & Profiling</CardTitle>\n                <CardDescription>\n                  <strong>Détection prédictive d'objections.</strong> Profil psychologique DISC, signaux d'achat, risques identifiés. Anticipez chaque réaction de votre prospect.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n\n            <Card className=\"relative overflow-hidden border-2 hover:border-primary/50 transition-all duration-300\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <TrendingUp className=\"w-12 h-12 text-primary\" />\n                  <Badge variant=\"secondary\" className=\"bg-purple-100 text-purple-800\">Conversion</Badge>\n                </div>\n                <CardTitle>Relances personnalisées</CardTitle>\n                <CardDescription>\n                  <strong>Messages de suivi automatisés.</strong> Emails et SMS adaptés au profil psychologique, aux objections détectées et au timing optimal de votre prospect.\n                </CardDescription>\n              </CardHeader>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Pricing Section */}\n      <section className=\"py-20\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl font-bold text-foreground mb-4\">\n              Tarification simple et transparente\n            </h3>\n            <p className=\"text-lg text-muted-foreground\">\n              Commencez gratuitement, passez au premium quand vous avez besoin de plus de puissance.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            {/* Free Plan */}\n            <Card>\n              <CardHeader className=\"text-center\">\n                <CardTitle className=\"text-xl\">Gratuit</CardTitle>\n                <div className=\"text-3xl font-bold\">€0</div>\n                <CardDescription>par mois</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 mb-6\">\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span><strong>3 analyses complètes</strong> par mois</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span>Scoring d'intérêt + objections</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span>Messages de relance automatisés</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span>Upload audio (Whisper AI)</span>\n                  </li>\n                </ul>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => window.location.href = '/auth'}\n                >\n                  Commencer gratuitement\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Premium Plan */}\n            <Card className=\"border-primary\">\n              <CardHeader className=\"text-center\">\n                <div className=\"inline-block bg-primary text-primary-foreground px-3 py-1 rounded-full text-sm font-medium mb-2\">\n                  Plus populaire\n                </div>\n                <CardTitle className=\"text-xl\">Premium</CardTitle>\n                <div className=\"text-3xl font-bold text-primary\">€15</div>\n                <CardDescription>par mois</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ul className=\"space-y-3 mb-6\">\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span><strong>Analyses ILLIMITÉES</strong></span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span>Profiling psychologique DISC complet</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span>Prédictions d'objections avancées</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span>Historique complet + analytics</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span>Transcription audio illimitée</span>\n                  </li>\n                  <li className=\"flex items-center space-x-2\">\n                    <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                    <span>Support prioritaire 24/7</span>\n                  </li>\n                </ul>\n                <Button \n                  className=\"w-full\"\n                  onClick={() => window.location.href = '/auth'}\n                >\n                  Passer au Premium\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-muted/50\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-16\">\n            <h3 className=\"text-3xl font-bold text-foreground mb-4\">\n              Résultats prouvés par nos utilisateurs\n            </h3>\n            <p className=\"text-lg text-muted-foreground\">\n              Découvrez comment LeadMirror transforme les performances commerciales\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"bg-white dark:bg-card\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-1 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <CheckCircle key={i} className=\"w-4 h-4 text-yellow-400 fill-yellow-400\" />\n                  ))}\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  \"LeadMirror a révolutionné ma façon de faire du commerce. Le profiling psychologique est bluffant de précision. +40% de conversions en 2 mois.\"\n                </p>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                    <span className=\"text-primary-foreground font-medium\">MR</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">Marc Rousseau</p>\n                    <p className=\"text-xs text-muted-foreground\">Directeur Commercial, TechFlow</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white dark:bg-card\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-1 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <CheckCircle key={i} className=\"w-4 h-4 text-yellow-400 fill-yellow-400\" />\n                  ))}\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  \"Les messages de relance générés par l'IA sont parfaits. Je gagne 3h par jour et mes prospects répondent 60% plus souvent. Révolutionnaire !\"\n                </p>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                    <span className=\"text-primary-foreground font-medium\">SL</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">Sophie Laurent</p>\n                    <p className=\"text-xs text-muted-foreground\">Account Manager, DataSolutions</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-white dark:bg-card\">\n              <CardContent className=\"pt-6\">\n                <div className=\"flex items-center space-x-1 mb-4\">\n                  {[...Array(5)].map((_, i) => (\n                    <CheckCircle key={i} className=\"w-4 h-4 text-yellow-400 fill-yellow-400\" />\n                  ))}\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  \"Incroyable precision dans l'analyse des objections. J'anticipe maintenant chaque réaction de mes prospects. ROI immédiat sur mon équipe de 12 commerciaux.\"\n                </p>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                    <span className=\"text-primary-foreground font-medium\">JD</span>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">Jean Dupont</p>\n                    <p className=\"text-xs text-muted-foreground\">VP Sales, InnovCorp</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-blue-600 to-purple-600\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <h3 className=\"text-3xl font-bold text-white mb-4\">\n            Prêt à multiplier vos conversions ?\n          </h3>\n          <p className=\"text-xl text-white/90 mb-8\">\n            Rejoignez +5,000 commerciaux qui ferment déjà plus de deals avec LeadMirror\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button \n              size=\"lg\" \n              variant=\"secondary\"\n              onClick={() => window.location.href = '/auth'}\n              className=\"text-lg px-8 py-3 bg-white text-primary hover:bg-gray-100\"\n            >\n              Commencer mes 3 analyses gratuites\n              <ArrowRight className=\"ml-2 w-5 h-5\" />\n            </Button>\n            <Button \n              size=\"lg\" \n              variant=\"outline\"\n              onClick={() => window.location.href = '/auth'}\n              className=\"text-lg px-8 py-3 border-white text-white hover:bg-white hover:text-primary\"\n            >\n              Voir la démo live\n            </Button>\n          </div>\n          <p className=\"text-sm text-white/70 mt-4\">\n            Aucune carte de crédit nécessaire • Résultats garantis en 48h • Satisfait ou remboursé\n          </p>\n        </div>\n      </section>\n\n      {/* Security & GDPR Section */}\n      <section className=\"py-16 bg-muted/30\" id=\"security\">\n        <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <div className=\"flex justify-center mb-4\">\n              <div className=\"p-3 bg-green-100 dark:bg-green-950 rounded-full\">\n                <Shield className=\"w-8 h-8 text-green-600\" />\n              </div>\n            </div>\n            <h2 className=\"text-3xl font-bold text-foreground mb-4\">\n              Sécurité & Conformité RGPD\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Votre confiance est notre priorité. LeadMirror respecte les plus hauts standards de sécurité et de protection des données.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n            {/* GDPR Compliance */}\n            <Card className=\"border-green-200 bg-green-50/50 dark:bg-green-950/20 dark:border-green-800\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span>Conformité RGPD</span>\n                  <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                    Certifié\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div>\n                    <h4 className=\"font-medium text-green-800 dark:text-green-200 mb-2\">Vos droits garantis</h4>\n                    <ul className=\"text-sm space-y-1 text-green-700 dark:text-green-300\">\n                      <li>• Droit d'accès à vos données</li>\n                      <li>• Droit de rectification et suppression</li>\n                      <li>• Droit à la portabilité</li>\n                      <li>• Droit d'opposition au traitement</li>\n                    </ul>\n                  </div>\n                  <div>\n                    <h4 className=\"font-medium text-green-800 dark:text-green-200 mb-2\">Notre engagement</h4>\n                    <ul className=\"text-sm space-y-1 text-green-700 dark:text-green-300\">\n                      <li>• Données stockées en Europe (Neon)</li>\n                      <li>• Chiffrement de bout en bout</li>\n                      <li>• Anonymisation complète des analyses</li>\n                      <li>• Suppression automatique sur demande</li>\n                    </ul>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Security Features */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Lock className=\"w-5 h-5 text-blue-600\" />\n                  <span>Sécurité technique</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Database className=\"w-4 h-4 text-blue-600 mt-0.5\" />\n                    <div>\n                      <p className=\"font-medium text-sm\">Infrastructure sécurisée</p>\n                      <p className=\"text-xs text-muted-foreground\">Hébergement Replit avec SSL/TLS, authentification sécurisée</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <Brain className=\"w-4 h-4 text-blue-600 mt-0.5\" />\n                    <div>\n                      <p className=\"font-medium text-sm\">IA responsable</p>\n                      <p className=\"text-xs text-muted-foreground\">OpenAI GPT-4o avec prompts sécurisés et anonymisés</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-start space-x-3\">\n                    <Shield className=\"w-4 h-4 text-blue-600 mt-0.5\" />\n                    <div>\n                      <p className=\"font-medium text-sm\">Audit de sécurité</p>\n                      <p className=\"text-xs text-muted-foreground\">Tests réguliers, monitoring des accès, logs sécurisés</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"text-center\">\n            <Button \n              variant=\"outline\" \n              onClick={() => window.location.href = '/security'}\n              className=\"border-green-200 text-green-700 hover:bg-green-50 dark:border-green-800 dark:text-green-300 dark:hover:bg-green-950\"\n            >\n              <Shield className=\"w-4 h-4 mr-2\" />\n              Voir tous les détails de sécurité\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border py-12 bg-background\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid md:grid-cols-4 gap-8 mb-8\">\n            {/* Brand */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-6 h-6 bg-primary rounded-md flex items-center justify-center\">\n                  <FlipHorizontal2 className=\"w-3 h-3 text-primary-foreground\" />\n                </div>\n                <span className=\"font-semibold text-foreground\">LeadMirror</span>\n              </div>\n              <p className=\"text-sm text-muted-foreground\">\n                L'IA révolutionnaire pour analyser vos conversations commerciales et multiplier vos conversions.\n              </p>\n            </div>\n\n            {/* Product */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-foreground\">Produit</h4>\n              <nav className=\"space-y-2\">\n                <a href=\"#features\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Fonctionnalités\n                </a>\n                <a href=\"/analytics\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Analytics\n                </a>\n                <a href=\"/integrations\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Intégrations CRM\n                </a>\n                <a href=\"/auth\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Essai gratuit\n                </a>\n              </nav>\n            </div>\n\n            {/* Company */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-foreground\">Entreprise</h4>\n              <nav className=\"space-y-2\">\n                <a href=\"/security\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Sécurité & RGPD\n                </a>\n                <a href=\"mailto:contact@leadmirror.com\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Contact\n                </a>\n                <a href=\"mailto:support@leadmirror.com\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Support\n                </a>\n              </nav>\n            </div>\n\n            {/* Legal */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-foreground\">Légal</h4>\n              <nav className=\"space-y-2\">\n                <a href=\"/security\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Confidentialité\n                </a>\n                <a href=\"/security\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Conditions d'utilisation\n                </a>\n                <a href=\"/security\" className=\"block text-sm text-muted-foreground hover:text-foreground transition-colors\">\n                  Mentions légales\n                </a>\n              </nav>\n            </div>\n          </div>\n\n          {/* Bottom bar */}\n          <div className=\"border-t border-border pt-8\">\n            <div className=\"text-center space-y-3\">\n              <div className=\"text-sm font-medium text-foreground\">\n                LeadMirror © 2025 — Tous droits réservés\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                Solution conçue pour les professionnels de la vente | IA de nouvelle génération (GPT-4o + Whisper) | Respect des normes RGPD\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":27291},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle, Home, ArrowLeft } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function NotFound() {\n  const { isAuthenticated } = useAuth();\n  \n  const handleGoHome = () => {\n    window.location.href = isAuthenticated ? '/dashboard' : '/';\n  };\n  \n  const handleGoBack = () => {\n    window.history.back();\n  };\n\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-background p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2 text-destructive\">\n            <AlertCircle className=\"h-5 w-5\" />\n            Page introuvable\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <p className=\"text-sm text-muted-foreground\">\n            La page que vous recherchez n'existe pas ou a été déplacée.\n          </p>\n          \n          <div className=\"flex flex-col gap-2\">\n            <Button \n              onClick={handleGoHome}\n              variant=\"default\"\n              className=\"w-full\"\n            >\n              <Home className=\"h-4 w-4 mr-2\" />\n              {isAuthenticated ? 'Tableau de bord' : 'Accueil'}\n            </Button>\n            \n            <Button \n              onClick={handleGoBack}\n              variant=\"outline\"\n              className=\"w-full\"\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Retour\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1686},"client/src/pages/profile.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Footer from \"@/components/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  User, \n  Crown, \n  CreditCard, \n  Settings, \n  Shield, \n  Calendar,\n  CheckCircle,\n  AlertTriangle,\n  ArrowLeft,\n  Mail,\n  Edit3\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface UserProfile {\n  id: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  isPremium: boolean;\n  monthlyAnalysesUsed: number;\n  subscriptionStatus: string;\n  stripeCustomerId?: string;\n  stripeSubscriptionId?: string;\n  createdAt: string;\n}\n\nexport default function Profile() {\n  const { user: authUser } = useAuth();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [editData, setEditData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n  });\n\n  // Fetch user profile data\n  const { data: user, isLoading } = useQuery<UserProfile>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  // Update profile mutation\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { firstName?: string; lastName?: string }) => {\n      return apiRequest(\"PATCH\", \"/api/profile\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Profil mis à jour\",\n        description: \"Vos informations ont été sauvegardées avec succès.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      setIsEditing(false);\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/auth/google\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de mettre à jour le profil.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Cancel subscription mutation\n  const cancelSubscriptionMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/subscription/cancel\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Abonnement annulé\",\n        description: \"Votre abonnement sera annulé à la fin de la période de facturation.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Non autorisé\",\n          description: \"Vous êtes déconnecté. Reconnexion...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/auth/google\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible d'annuler l'abonnement.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <AlertTriangle className=\"w-12 h-12 text-destructive mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Accès refusé</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Vous devez être connecté pour accéder à votre profil.\n              </p>\n              <Button onClick={() => window.location.href = \"/api/auth/google\"}>\n                Se connecter\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleEditProfile = () => {\n    setEditData({\n      firstName: user.firstName || \"\",\n      lastName: user.lastName || \"\",\n    });\n    setIsEditing(true);\n  };\n\n  const handleSaveProfile = () => {\n    updateProfileMutation.mutate(editData);\n  };\n\n  const handleSubscribe = async () => {\n    try {\n      const response = await apiRequest(\"POST\", \"/api/create-subscription\");\n      \n      if (response.ok) {\n        const data = await response.json();\n        if (data.checkoutUrl) {\n          window.location.href = data.checkoutUrl;\n        } else {\n          toast({\n            title: \"Erreur\",\n            description: \"Impossible de créer la session de paiement\",\n            variant: \"destructive\",\n          });\n        }\n      } else {\n        const errorData = await response.json();\n        toast({\n          title: \"Erreur\",\n          description: errorData.error?.message || errorData.message || \"Impossible de démarrer l'abonnement\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Erreur\",\n        description: \"Impossible de démarrer l'abonnement\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-background/95 backdrop-blur sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Retour au dashboard\n                </Button>\n              </Link>\n              <Separator orientation=\"vertical\" className=\"h-6\" />\n              <h1 className=\"text-xl font-semibold\">Mon profil</h1>\n            </div>\n            \n            <Button\n              variant=\"outline\"\n              onClick={() => window.location.href = \"/api/logout\"}\n            >\n              Se déconnecter\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"max-w-4xl mx-auto p-6 space-y-8\">\n        {/* Profile Information */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center\">\n                {user.profileImageUrl ? (\n                  <img \n                    src={user.profileImageUrl} \n                    alt=\"Profile\" \n                    className=\"w-16 h-16 rounded-full object-cover\"\n                  />\n                ) : (\n                  <User className=\"w-8 h-8 text-primary\" />\n                )}\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"flex items-center space-x-3\">\n                  <CardTitle className=\"text-2xl\">\n                    {user.firstName && user.lastName \n                      ? `${user.firstName} ${user.lastName}`\n                      : user.email\n                    }\n                  </CardTitle>\n                  {user.isPremium && (\n                    <Badge className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-white\">\n                      <Crown className=\"w-4 h-4 mr-1\" />\n                      Premium\n                    </Badge>\n                  )}\n                </div>\n                <CardDescription className=\"flex items-center space-x-2\">\n                  <Mail className=\"w-4 h-4\" />\n                  <span>{user.email}</span>\n                </CardDescription>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleEditProfile}\n                disabled={updateProfileMutation.isPending}\n              >\n                <Edit3 className=\"w-4 h-4 mr-2\" />\n                Modifier\n              </Button>\n            </div>\n          </CardHeader>\n        </Card>\n\n        {/* Subscription Status */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <CreditCard className=\"w-5 h-5\" />\n              <span>Abonnement et facturation</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">\n                    Statut de l'abonnement\n                  </Label>\n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    {user.isPremium ? (\n                      <>\n                        <CheckCircle className=\"w-4 h-4 text-green-500\" />\n                        <span className=\"font-medium text-green-700\">Premium actif</span>\n                      </>\n                    ) : (\n                      <>\n                        <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\n                        <span className=\"font-medium text-orange-700\">Plan gratuit</span>\n                      </>\n                    )}\n                  </div>\n                </div>\n\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">\n                    Analyses utilisées ce mois\n                  </Label>\n                  <div className=\"mt-1\">\n                    <span className=\"text-2xl font-bold\">\n                      {user.monthlyAnalysesUsed || 0}\n                    </span>\n                    <span className=\"text-muted-foreground ml-1\">\n                      {user.isPremium ? \"/ illimité\" : \"/ 3\"}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"space-y-4\">\n                {user.isPremium ? (\n                  <div className=\"p-4 border rounded-lg bg-green-50 dark:bg-green-950/20\">\n                    <h4 className=\"font-medium text-green-800 dark:text-green-200 mb-2\">\n                      Plan Premium\n                    </h4>\n                    <ul className=\"text-sm text-green-700 dark:text-green-300 space-y-1\">\n                      <li>• Analyses illimitées</li>\n                      <li>• IA avancée avec insights profonds</li>\n                      <li>• Intégrations CRM</li>\n                      <li>• Analytics détaillées</li>\n                      <li>• Support prioritaire</li>\n                    </ul>\n                  </div>\n                ) : (\n                  <div className=\"p-4 border rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">Passer au Premium</h4>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      Débloquez toutes les fonctionnalités avancées pour seulement 15€/mois.\n                    </p>\n                    <Button onClick={handleSubscribe} className=\"w-full\">\n                      <Crown className=\"w-4 h-4 mr-2\" />\n                      Passer au Premium\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {user.isPremium && (\n              <Separator />\n            )}\n\n            {user.isPremium && (\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <h4 className=\"font-medium\">Gérer l'abonnement</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Annuler ou modifier votre abonnement\n                  </p>\n                </div>\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button variant=\"outline\" size=\"sm\">\n                      Annuler l'abonnement\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent>\n                    <DialogHeader>\n                      <DialogTitle>Annuler l'abonnement Premium</DialogTitle>\n                      <DialogDescription>\n                        Êtes-vous sûr de vouloir annuler votre abonnement Premium ? \n                        Vous continuerez d'avoir accès aux fonctionnalités jusqu'à la fin \n                        de votre période de facturation actuelle.\n                      </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"flex justify-end space-x-2 mt-4\">\n                      <DialogTrigger asChild>\n                        <Button variant=\"outline\">Annuler</Button>\n                      </DialogTrigger>\n                      <Button\n                        variant=\"destructive\"\n                        onClick={() => cancelSubscriptionMutation.mutate()}\n                        disabled={cancelSubscriptionMutation.isPending}\n                      >\n                        Confirmer l'annulation\n                      </Button>\n                    </div>\n                  </DialogContent>\n                </Dialog>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Account Settings */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Settings className=\"w-5 h-5\" />\n              <span>Paramètres du compte</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h4 className=\"font-medium\">Compte créé</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  {new Date(user.createdAt).toLocaleDateString('fr-FR', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric'\n                  })}\n                </p>\n              </div>\n              <Calendar className=\"w-5 h-5 text-muted-foreground\" />\n            </div>\n\n            <Separator />\n\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h4 className=\"font-medium\">Sécurité et confidentialité</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Voir nos politiques de sécurité et confidentialité\n                </p>\n              </div>\n              <Link href=\"/security\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <Shield className=\"w-4 h-4 mr-2\" />\n                  Voir les détails\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Edit Profile Dialog */}\n      <Dialog open={isEditing} onOpenChange={setIsEditing}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Modifier le profil</DialogTitle>\n            <DialogDescription>\n              Mettez à jour vos informations personnelles.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"firstName\">Prénom</Label>\n              <Input\n                id=\"firstName\"\n                value={editData.firstName}\n                onChange={(e) => setEditData({ ...editData, firstName: e.target.value })}\n                placeholder=\"Votre prénom\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lastName\">Nom</Label>\n              <Input\n                id=\"lastName\"\n                value={editData.lastName}\n                onChange={(e) => setEditData({ ...editData, lastName: e.target.value })}\n                placeholder=\"Votre nom\"\n              />\n            </div>\n          </div>\n          <div className=\"flex justify-end space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setIsEditing(false)}\n              disabled={updateProfileMutation.isPending}\n            >\n              Annuler\n            </Button>\n            <Button\n              onClick={handleSaveProfile}\n              disabled={updateProfileMutation.isPending}\n            >\n              {updateProfileMutation.isPending ? \"Sauvegarde...\" : \"Sauvegarder\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":17094},"client/src/pages/security.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Shield, Lock, Eye, FileText, Users, Database, CheckCircle } from \"lucide-react\";\nimport Footer from \"@/components/Footer\";\n\nexport default function Security() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-background border-b border-border\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-2\">\n              <Shield className=\"w-8 h-8 text-primary\" />\n              <h1 className=\"text-xl font-bold\">Sécurité & Conformité</h1>\n            </div>\n            <a href=\"/\" className=\"text-primary hover:text-primary/80\">\n              ← Retour au tableau de bord\n            </a>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h2 className=\"text-3xl font-bold text-foreground mb-2\">\n            Votre sécurité est notre priorité\n          </h2>\n          <p className=\"text-muted-foreground\">\n            LeadMirror respecte les plus hauts standards de sécurité et de protection des données.\n          </p>\n        </div>\n\n        <div className=\"space-y-6\">\n          {/* RGPD Compliance */}\n          <Card className=\"border-green-200 bg-green-50 dark:bg-green-950 dark:border-green-800\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                <span>Conformité RGPD</span>\n                <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">Certifié</Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-green-800 dark:text-green-200\">Vos droits</h4>\n                  <ul className=\"text-sm space-y-1 text-green-700 dark:text-green-300\">\n                    <li>• Droit d'accès à vos données</li>\n                    <li>• Droit de rectification</li>\n                    <li>• Droit à l'effacement</li>\n                    <li>• Droit à la portabilité</li>\n                  </ul>\n                </div>\n                <div className=\"space-y-2\">\n                  <h4 className=\"font-medium text-green-800 dark:text-green-200\">Notre engagement</h4>\n                  <ul className=\"text-sm space-y-1 text-green-700 dark:text-green-300\">\n                    <li>• Données stockées en Europe</li>\n                    <li>• Chiffrement de bout en bout</li>\n                    <li>• Anonymisation des analyses</li>\n                    <li>• Suppression automatique sur demande</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Data Protection */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Database className=\"w-5 h-5\" />\n                <span>Protection des données</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 border rounded\">\n                  <Lock className=\"w-8 h-8 text-blue-600 mx-auto mb-2\" />\n                  <h4 className=\"font-medium mb-1\">Chiffrement AES-256</h4>\n                  <p className=\"text-xs text-muted-foreground\">Toutes vos données sont chiffrées en transit et au repos</p>\n                </div>\n                <div className=\"text-center p-4 border rounded\">\n                  <Shield className=\"w-8 h-8 text-green-600 mx-auto mb-2\" />\n                  <h4 className=\"font-medium mb-1\">Serveurs sécurisés</h4>\n                  <p className=\"text-xs text-muted-foreground\">Infrastructure certifiée ISO 27001 et SOC 2</p>\n                </div>\n                <div className=\"text-center p-4 border rounded\">\n                  <Eye className=\"w-8 h-8 text-purple-600 mx-auto mb-2\" />\n                  <h4 className=\"font-medium mb-1\">Accès limité</h4>\n                  <p className=\"text-xs text-muted-foreground\">Principe du moindre privilège appliqué</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Privacy Policy */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <FileText className=\"w-5 h-5\" />\n                <span>Politique de confidentialité</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"prose prose-sm max-w-none\">\n                <h4>Collecte des données</h4>\n                <p className=\"text-muted-foreground\">\n                  Nous collectons uniquement les données nécessaires au fonctionnement du service :\n                  informations de profil, conversations analysées, et métadonnées d'utilisation.\n                </p>\n\n                <h4>Utilisation des données</h4>\n                <p className=\"text-muted-foreground\">\n                  Vos données servent exclusivement à générer vos analyses IA. Elles ne sont jamais \n                  partagées avec des tiers à des fins commerciales.\n                </p>\n\n                <h4>Conservation des données</h4>\n                <p className=\"text-muted-foreground\">\n                  Les données sont conservées tant que votre compte est actif. Suppression automatique \n                  90 jours après fermeture du compte.\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Security Features */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Users className=\"w-5 h-5\" />\n                <span>Fonctionnalités de sécurité</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">Authentification</h4>\n                  <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                    <li>• Authentification OAuth sécurisée</li>\n                    <li>• Sessions chiffrées avec expiration</li>\n                    <li>• Protection contre le CSRF</li>\n                    <li>• Rate limiting des API</li>\n                  </ul>\n                </div>\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">Monitoring</h4>\n                  <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                    <li>• Surveillance 24/7 des systèmes</li>\n                    <li>• Détection d'intrusion automatique</li>\n                    <li>• Logs d'audit complets</li>\n                    <li>• Alertes de sécurité temps réel</li>\n                  </ul>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Contact */}\n          <Card className=\"bg-muted\">\n            <CardContent className=\"p-6 text-center\">\n              <h3 className=\"font-semibold mb-2\">Questions sur la sécurité ?</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Notre équipe sécurité est disponible pour répondre à toutes vos questions\n              </p>\n              <div className=\"flex justify-center space-x-4 text-sm\">\n                <span>📧 security@leadmirror.com</span>\n                <span>🔒 Audit RGPD disponible sur demande</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":8197},"client/src/pages/subscribe.tsx":{"content":"import { useStripe, Elements, PaymentElement, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useEffect, useState } from 'react';\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { CheckCircle, Users, TrendingUp, Clock, Star } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Footer from \"@/components/Footer\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\nconst SubscribeForm = () => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: window.location.origin,\n      },\n    });\n\n    setIsProcessing(false);\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Payment Successful\",\n        description: \"Welcome to LeadMirror Premium!\",\n      });\n    }\n  };\n\n  return (\n    <Card className=\"max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Subscribe to Premium</CardTitle>\n        <CardDescription>\n          Complete your payment to unlock unlimited analyses\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <PaymentElement />\n          <Button \n            type=\"submit\" \n            className=\"w-full\" \n            disabled={!stripe || isProcessing}\n          >\n            {isProcessing ? \"Processing...\" : \"Subscribe for €15/month\"}\n          </Button>\n        </form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default function Subscribe() {\n  const { user, isLoading: userLoading } = useAuth();\n  const { toast } = useToast();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [remainingSpots, setRemainingSpots] = useState(50);\n\n  // Simuler le décompte des places restantes\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRemainingSpots(prev => Math.max(1, prev - Math.floor(Math.random() * 2)));\n    }, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!userLoading && !user) {\n      toast({\n        title: \"Non autorisé\",\n        description: \"Vous êtes déconnecté. Reconnexion en cours...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/auth\";\n      }, 500);\n      return;\n    }\n  }, [user, userLoading, toast]);\n\n  useEffect(() => {\n    if (!user) return;\n\n    // Create subscription as soon as the page loads\n    apiRequest(\"POST\", \"/api/create-subscription\")\n      .then((res) => res.json())\n      .then((data) => {\n        setClientSecret(data.clientSecret);\n      })\n      .catch((error) => {\n        if (isUnauthorizedError(error)) {\n          toast({\n            title: \"Non autorisé\",\n            description: \"Vous êtes déconnecté. Reconnexion en cours...\",\n            variant: \"destructive\",\n          });\n          setTimeout(() => {\n            window.location.href = \"/auth\";\n          }, 500);\n          return;\n        }\n        \n        toast({\n          title: \"Erreur\",\n          description: \"Échec de l'initialisation du paiement. Veuillez réessayer.\",\n          variant: \"destructive\",\n        });\n      });\n  }, [user, toast]);\n\n  // Lifetime offer purchase mutation\n  const lifetimePurchaseMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/create-lifetime-payment\", { amount: 99 });\n      return res.json();\n    },\n    onSuccess: (data) => {\n      window.location.href = data.checkoutUrl;\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLifetimePurchase = () => {\n    lifetimePurchaseMutation.mutate();\n  };\n\n  if (userLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"max-w-md mx-auto\">\n          <CardContent className=\"p-8\">\n            <div className=\"space-y-4\">\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-4 w-1/2\" />\n              <Skeleton className=\"h-10 w-full\" />\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Make SURE to wrap the form in <Elements> which provides the stripe context.\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header d'urgence avec offre exclusive */}\n      <div className=\"bg-gradient-to-r from-red-600 to-orange-600 text-white text-center py-3\">\n        <div className=\"flex items-center justify-center gap-4 text-sm font-semibold\">\n          <span>🚀 OFFRE EXCLUSIVE DE LANCEMENT</span>\n          <span>•</span>\n          <span>Plus que {remainingSpots} places disponibles</span>\n          <span>•</span>\n          <span className=\"animate-pulse\">99€ au lieu de 180€/an</span>\n        </div>\n      </div>\n\n      <div className=\"max-w-6xl mx-auto px-4 py-12\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-bold mb-4\">Mettre à niveau votre compte</h1>\n          <p className=\"text-muted-foreground text-lg\">\n            Choisissez l'option qui vous convient le mieux\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8 mb-12\">\n          {/* Offre Exclusive Lifetime - 99€ */}\n          <Card className=\"border-2 border-orange-500 bg-gradient-to-br from-orange-50 to-red-50 dark:from-orange-950 dark:to-red-950 relative overflow-hidden\">\n            <div className=\"absolute top-0 right-0 bg-red-600 text-white px-4 py-2 text-sm font-bold\">\n              🔥 OFFRE LIMITÉE\n            </div>\n            <CardHeader className=\"text-center pb-4\">\n              <div className=\"mb-4\">\n                <Badge className=\"bg-red-600 text-white text-lg px-4 py-2 mb-4\">\n                  🚀 LANCEMENT EXCLUSIF - {remainingSpots} PLACES SEULEMENT\n                </Badge>\n              </div>\n              <CardTitle className=\"text-2xl text-orange-800 dark:text-orange-200\">Accès à Vie</CardTitle>\n              <div className=\"text-center\">\n                <span className=\"text-5xl font-bold text-red-600\">99€</span>\n                <p className=\"text-sm text-muted-foreground mt-2\">Paiement unique • Plus jamais d'abonnement</p>\n                <p className=\"text-lg font-semibold text-green-600 mt-2\">\n                  Économisez 81€ dès la 1ère année !\n                </p>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"bg-white/50 dark:bg-gray-900/50 p-4 rounded-lg\">\n                <div className=\"flex items-center justify-center gap-2 text-red-600 font-bold mb-2\">\n                  <Users className=\"w-5 h-5\" />\n                  <span>Places limitées : {remainingSpots}/50</span>\n                </div>\n                <p className=\"text-center text-sm text-muted-foreground\">\n                  Cette offre ne reviendra jamais une fois épuisée\n                </p>\n              </div>\n              \n              <ul className=\"space-y-3\">\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  <span><strong>Analyses ILLIMITÉES</strong> à vie</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  <span>Toutes les fonctionnalités Premium</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  <span>Mises à jour gratuites à vie</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  <span>Support prioritaire</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  <span>Aucune limite de temps</span>\n                </li>\n              </ul>\n              \n              <Button \n                className=\"w-full bg-gradient-to-r from-red-600 to-orange-600 hover:from-red-700 hover:to-orange-700 text-white font-bold py-4 text-lg shadow-lg transform hover:scale-105 transition-all duration-300\"\n                onClick={handleLifetimePurchase}\n                disabled={lifetimePurchaseMutation.isPending}\n              >\n                {lifetimePurchaseMutation.isPending ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"animate-spin w-4 h-4 border-2 border-white border-t-transparent rounded-full\" />\n                    Préparation...\n                  </div>\n                ) : (\n                  <>🚀 RÉSERVER MA PLACE À VIE - 99€</>\n                )}\n              </Button>\n              \n              <p className=\"text-xs text-center text-muted-foreground\">\n                Paiement sécurisé • Garantie 30 jours satisfait ou remboursé\n              </p>\n            </CardContent>\n          </Card>\n\n          {/* Abonnement Mensuel Standard */}\n          <Card className=\"border border-gray-200 dark:border-gray-700\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"text-2xl\">Abonnement Mensuel</CardTitle>\n              <div className=\"text-center\">\n                <span className=\"text-4xl font-bold\">15€</span>\n                <p className=\"text-sm text-muted-foreground mt-2\">par mois • 180€ sur 1 an</p>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <ul className=\"space-y-3\">\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  <span>Analyses illimitées</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  <span>Toutes les fonctionnalités Premium</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  <span>Support standard</span>\n                </li>\n                <li className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-500\" />\n                  <span>Annulation à tout moment</span>\n                </li>\n              </ul>\n              \n              <div className=\"mt-8\">\n                {!clientSecret ? (\n                  <div className=\"space-y-4\">\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                    <Skeleton className=\"h-10 w-full\" />\n                  </div>\n                ) : (\n                  <Elements stripe={stripePromise} options={{ clientSecret }}>\n                    <SubscribeForm />\n                  </Elements>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Section de comparaison */}\n        <div className=\"text-center\">\n          <Card className=\"bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-950 dark:to-blue-950 p-8\">\n            <CardContent className=\"p-0\">\n              <h3 className=\"text-2xl font-bold mb-6\">Pourquoi choisir l'accès à vie ?</h3>\n              <div className=\"grid md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"bg-green-100 dark:bg-green-900 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                    <TrendingUp className=\"w-8 h-8 text-green-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-2\">Économies Massives</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Payez une fois, économisez des centaines d'euros\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"bg-blue-100 dark:bg-blue-900 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                    <Clock className=\"w-8 h-8 text-blue-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-2\">Aucune Limite</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Votre accès ne expire jamais\n                  </p>\n                </div>\n                <div className=\"text-center\">\n                  <div className=\"bg-purple-100 dark:bg-purple-900 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                    <Star className=\"w-8 h-8 text-purple-600\" />\n                  </div>\n                  <h4 className=\"font-semibold mb-2\">Priorité Exclusive</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Support prioritaire et nouvelles fonctionnalités en avant-première\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":14735},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n        hot: \"border-transparent bg-green-100 text-green-700\",\n        warm: \"border-transparent bg-orange-100 text-orange-700\",\n        cold: \"border-transparent bg-red-100 text-red-700\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1317},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1835},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1863},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","size_bytes":7294},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":824},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4839},"client/src/components/ui/toaster.tsx":{"content":"import {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\nimport { useToast } from \"@/hooks/use-toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/socialAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || \"fallback-secret-for-dev\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupSocialAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Google OAuth Strategy\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    passport.use(new GoogleStrategy({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: \"/api/auth/google/callback\"\n    }, async (accessToken, refreshToken, profile, done) => {\n      try {\n        // Upsert user in database\n        const user = await storage.upsertUser({\n          id: `google_${profile.id}`,\n          email: profile.emails?.[0]?.value,\n          firstName: profile.name?.givenName,\n          lastName: profile.name?.familyName,\n          profileImageUrl: profile.photos?.[0]?.value,\n        });\n        return done(null, user);\n      } catch (error) {\n        return done(error, null);\n      }\n    }));\n  }\n\n  // Passport serialization\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error, null);\n    }\n  });\n\n  // Auth Routes\n  app.get(\"/api/auth/google\", passport.authenticate(\"google\", {\n    scope: [\"profile\", \"email\"]\n  }));\n\n  app.get(\"/api/auth/google/callback\", \n    passport.authenticate(\"google\", { failureRedirect: \"/\" }),\n    (req, res) => {\n      res.redirect(\"/dashboard\");\n    }\n  );\n\n  // Legacy routes for compatibility\n  app.get(\"/api/login\", (req, res) => {\n    res.redirect(\"/api/auth/google\");\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\"/\");\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":2847},"client/src/pages/lifetime-offer.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CheckCircle, Clock, Users, Zap, Star, TrendingUp } from \"lucide-react\";\nimport { LoadingSpinner } from \"@/components/LoadingSpinner\";\nimport { Link } from \"wouter\";\n\nexport default function LifetimeOffer() {\n  const [remainingSpots, setRemainingSpots] = useState(50);\n  const [timeLeft, setTimeLeft] = useState({ hours: 47, minutes: 23, seconds: 45 });\n  const { toast } = useToast();\n\n  // Simuler le décompte des places restantes\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRemainingSpots(prev => Math.max(1, prev - Math.floor(Math.random() * 2)));\n    }, 30000); // Diminue toutes les 30 secondes\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Timer de l'offre\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev.seconds > 0) {\n          return { ...prev, seconds: prev.seconds - 1 };\n        } else if (prev.minutes > 0) {\n          return { ...prev, minutes: prev.minutes - 1, seconds: 59 };\n        } else if (prev.hours > 0) {\n          return { hours: prev.hours - 1, minutes: 59, seconds: 59 };\n        }\n        return prev;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  const purchaseMutation = useMutation({\n    mutationFn: async () => {\n      const res = await apiRequest(\"POST\", \"/api/create-lifetime-payment\", { amount: 99 });\n      return res.json();\n    },\n    onSuccess: (data) => {\n      // Rediriger vers Stripe Checkout\n      window.location.href = data.checkoutUrl;\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Erreur\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePurchase = () => {\n    purchaseMutation.mutate();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-indigo-900 text-white\">\n      {/* Navigation */}\n      <nav className=\"absolute top-4 left-4 z-50\">\n        <Link href=\"/\" className=\"flex items-center gap-2 text-white hover:text-blue-200 transition-colors\">\n          <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n            <span className=\"text-white font-bold\">L</span>\n          </div>\n          <span className=\"font-semibold\">LeadMirror</span>\n        </Link>\n      </nav>\n\n      {/* En-tête d'urgence */}\n      <div className=\"bg-gradient-to-r from-red-600 to-orange-600 text-center py-3\">\n        <div className=\"flex items-center justify-center gap-4 text-sm font-semibold\">\n          <Clock className=\"h-4 w-4\" />\n          <span>Offre limitée :</span>\n          <span className=\"font-mono\">\n            {String(timeLeft.hours).padStart(2, '0')}:\n            {String(timeLeft.minutes).padStart(2, '0')}:\n            {String(timeLeft.seconds).padStart(2, '0')}\n          </span>\n          <Users className=\"h-4 w-4\" />\n          <span>Plus que {remainingSpots} places</span>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 py-12\">\n        {/* Titre principal */}\n        <div className=\"text-center mb-12\">\n          <Badge className=\"bg-yellow-500 text-black text-lg px-4 py-2 mb-6\">\n            🚀 OFFRE DE LANCEMENT EXCLUSIVE\n          </Badge>\n          <h1 className=\"text-5xl md:text-6xl font-bold mb-6\">\n            Accès à Vie à <span className=\"text-yellow-400\">LeadMirror</span>\n          </h1>\n          <p className=\"text-xl text-blue-200 max-w-3xl mx-auto\">\n            Rejoignez les 50 premiers utilisateurs et bénéficiez d'un accès illimité à la plateforme \n            d'analyse de conversations commerciales la plus avancée au monde.\n          </p>\n        </div>\n\n        {/* Bannière exclusive - 50 places seulement */}\n        <div className=\"max-w-5xl mx-auto mb-12\">\n          <div className=\"bg-gradient-to-r from-red-600 via-orange-600 to-yellow-600 rounded-2xl p-8 text-center mb-8 shadow-2xl\">\n            <div className=\"flex items-center justify-center gap-4 mb-4\">\n              <div className=\"bg-white/20 rounded-full px-4 py-2\">\n                <span className=\"text-white font-bold text-lg\">🔥 PLACES LIMITÉES</span>\n              </div>\n              <div className=\"bg-white/20 rounded-full px-4 py-2\">\n                <span className=\"text-white font-bold text-lg\">Plus que {remainingSpots}/50</span>\n              </div>\n            </div>\n            <h2 className=\"text-4xl font-bold text-white mb-2\">OFFRE DE LANCEMENT EXCLUSIVE</h2>\n            <p className=\"text-xl text-white/90\">Seulement 50 personnes obtiendront l'accès à vie pour 99€</p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* Prix normal */}\n            <Card className=\"bg-white/5 border-white/20 relative\">\n              <CardHeader>\n                <CardTitle className=\"text-center text-white\">Abonnement Mensuel</CardTitle>\n                <div className=\"text-center\">\n                  <span className=\"text-3xl font-bold text-gray-400 line-through\">€15/mois</span>\n                  <p className=\"text-sm text-gray-400 mt-2\">€180 sur 1 an</p>\n                </div>\n              </CardHeader>\n              <div className=\"absolute top-4 right-4\">\n                <Badge variant=\"outline\" className=\"text-gray-400\">Après l'offre</Badge>\n              </div>\n            </Card>\n\n            {/* Offre à vie */}\n            <Card className=\"bg-gradient-to-b from-green-600 to-green-700 border-green-400 relative scale-105 shadow-2xl\">\n              <CardHeader>\n                <CardTitle className=\"text-center text-white\">Accès à Vie - 50 Places</CardTitle>\n                <div className=\"text-center\">\n                  <span className=\"text-5xl font-bold text-white\">99€</span>\n                  <p className=\"text-sm text-green-100 mt-2\">Paiement unique • Économisez €81 dès la 1ère année</p>\n                </div>\n              </CardHeader>\n              <div className=\"absolute top-4 right-4\">\n                <Badge className=\"bg-yellow-500 text-black animate-pulse\">PLACES LIMITÉES</Badge>\n              </div>\n            </Card>\n          </div>\n        </div>\n\n        {/* Fonctionnalités incluses */}\n        <div className=\"max-w-6xl mx-auto mb-12\">\n          <h2 className=\"text-3xl font-bold text-center mb-8\">Tout ce que vous obtenez à vie</h2>\n          <div className=\"grid md:grid-cols-3 gap-6\">\n            {[\n              {\n                icon: <Zap className=\"h-8 w-8 text-yellow-400\" />,\n                title: \"Analyses IA Illimitées\",\n                description: \"Analysez autant de conversations que vous voulez avec notre IA révolutionnaire\"\n              },\n              {\n                icon: <TrendingUp className=\"h-8 w-8 text-green-400\" />,\n                title: \"Analytics Avancés\",\n                description: \"Tableaux de bord complets, métriques de performance et insights prédictifs\"\n              },\n              {\n                icon: <Star className=\"h-8 w-8 text-blue-400\" />,\n                title: \"Toutes les Fonctionnalités Premium\",\n                description: \"Intégrations CRM, export PDF, analyses psychologiques avancées\"\n              },\n              {\n                icon: <CheckCircle className=\"h-8 w-8 text-purple-400\" />,\n                title: \"Mises à Jour Gratuites\",\n                description: \"Toutes les nouvelles fonctionnalités ajoutées automatiquement\"\n              },\n              {\n                icon: <Users className=\"h-8 w-8 text-orange-400\" />,\n                title: \"Support Prioritaire\",\n                description: \"Assistance dédiée et accès prioritaire au support technique\"\n              },\n              {\n                icon: <Clock className=\"h-8 w-8 text-red-400\" />,\n                title: \"Aucune Limite de Temps\",\n                description: \"Votre accès ne expire jamais, utilisez LeadMirror aussi longtemps que vous voulez\"\n              }\n            ].map((feature, index) => (\n              <Card key={index} className=\"bg-white/5 border-white/20 text-center p-6\">\n                <div className=\"flex justify-center mb-4\">{feature.icon}</div>\n                <h3 className=\"text-xl font-semibold mb-2 text-white\">{feature.title}</h3>\n                <p className=\"text-blue-200\">{feature.description}</p>\n              </Card>\n            ))}\n          </div>\n        </div>\n\n        {/* CTA Principal */}\n        <div className=\"text-center\">\n          <div className=\"bg-white/10 backdrop-blur rounded-2xl p-8 max-w-3xl mx-auto\">\n            <h3 className=\"text-3xl font-bold mb-4\">Réservez votre place maintenant</h3>\n            <p className=\"text-blue-200 mb-6 text-lg\">\n              Seulement <strong className=\"text-yellow-400\">{remainingSpots} places restantes</strong> sur les 50 disponibles. \n              Après épuisement, retour au prix normal de <strong className=\"text-red-300\">180€/an</strong>.\n            </p>\n            \n            <div className=\"mb-8\">\n              <div className=\"bg-gradient-to-r from-red-500/30 to-orange-500/30 border-2 border-red-500/50 rounded-xl p-6 mb-6\">\n                <div className=\"flex items-center justify-center gap-3 text-red-200 mb-3\">\n                  <Users className=\"h-6 w-6\" />\n                  <span className=\"font-bold text-xl\">Places limitées : {remainingSpots}/50</span>\n                </div>\n                <div className=\"text-white text-lg\">\n                  <strong>Économisez 81€ dès la première année</strong>\n                  <br />\n                  <span className=\"text-red-200\">99€ à vie vs 180€/an en abonnement</span>\n                </div>\n              </div>\n            </div>\n\n            <Button \n              size=\"lg\" \n              className=\"bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-bold px-16 py-8 text-2xl shadow-2xl w-full md:w-auto transform hover:scale-105 transition-all duration-300\"\n              onClick={handlePurchase}\n              disabled={purchaseMutation.isPending}\n            >\n              {purchaseMutation.isPending ? (\n                <LoadingSpinner size=\"sm\" />\n              ) : (\n                <>🚀 RÉSERVER MA PLACE À VIE - 99€</>\n              )}\n            </Button>\n            \n            <p className=\"text-sm text-blue-300 mt-6\">\n              Paiement sécurisé via Stripe • Garantie satisfait ou remboursé 30 jours\n              <br />\n              <strong className=\"text-yellow-300\">Cette offre ne reviendra jamais une fois les 50 places vendues</strong>\n            </p>\n          </div>\n        </div>\n\n        {/* Témoignages */}\n        <div className=\"max-w-4xl mx-auto mt-16\">\n          <h2 className=\"text-3xl font-bold text-center mb-8\">Ce que disent nos early adopters</h2>\n          <div className=\"grid md:grid-cols-2 gap-6\">\n            {[\n              {\n                name: \"Marie L.\",\n                role: \"Directrice Commerciale\",\n                text: \"LeadMirror a transformé notre approche client. +40% de taux de conversion en 2 mois !\"\n              },\n              {\n                name: \"Thomas R.\", \n                role: \"Coach en Vente\",\n                text: \"L'analyse psychologique est bluffante. Mes clients ferment leurs deals 2x plus vite.\"\n              }\n            ].map((testimonial, index) => (\n              <Card key={index} className=\"bg-white/5 border-white/20 p-6\">\n                <p className=\"text-blue-100 mb-4 italic\">\"{testimonial.text}\"</p>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center\">\n                    {testimonial.name.charAt(0)}\n                  </div>\n                  <div>\n                    <p className=\"font-semibold text-white\">{testimonial.name}</p>\n                    <p className=\"text-sm text-blue-300\">{testimonial.role}</p>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12604},"client/src/components/ErrorBoundary.tsx":{"content":"import React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle, RefreshCw, Home } from \"lucide-react\";\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n}\n\nexport class ErrorBoundary extends React.Component<\n  React.PropsWithChildren<{}>,\n  ErrorBoundaryState\n> {\n  constructor(props: React.PropsWithChildren<{}>) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen w-full flex items-center justify-center bg-background p-4\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-destructive\">\n                <AlertTriangle className=\"h-5 w-5\" />\n                Une erreur s'est produite\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Quelque chose s'est mal passé. Nous avons été notifiés du problème.\n              </p>\n              \n              <div className=\"flex flex-col gap-2\">\n                <Button \n                  onClick={() => window.location.reload()}\n                  variant=\"default\"\n                  className=\"w-full\"\n                >\n                  <RefreshCw className=\"h-4 w-4 mr-2\" />\n                  Actualiser la page\n                </Button>\n                \n                <Button \n                  onClick={() => window.location.href = '/'}\n                  variant=\"outline\"\n                  className=\"w-full\"\n                >\n                  <Home className=\"h-4 w-4 mr-2\" />\n                  Retour à l'accueil\n                </Button>\n              </div>\n              \n              {process.env.NODE_ENV === 'development' && this.state.error && (\n                <details className=\"mt-4\">\n                  <summary className=\"text-xs text-muted-foreground cursor-pointer\">\n                    Détails de l'erreur (dev)\n                  </summary>\n                  <pre className=\"text-xs mt-2 p-2 bg-muted rounded overflow-auto\">\n                    {this.state.error.message}\n                    {this.state.error.stack}\n                  </pre>\n                </details>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}","size_bytes":2786},"client/src/components/LoadingSpinner.tsx":{"content":"interface LoadingSpinnerProps {\n  className?: string;\n  size?: 'sm' | 'md' | 'lg';\n  text?: string;\n}\n\nexport function LoadingSpinner({ className = \"\", size = 'md', text }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: 'w-4 h-4',\n    md: 'w-8 h-8', \n    lg: 'w-12 h-12'\n  };\n\n  return (\n    <div className={`flex flex-col items-center justify-center ${className}`}>\n      <div className={`animate-spin border-4 border-primary border-t-transparent rounded-full ${sizeClasses[size]}`}></div>\n      {text && <p className=\"mt-2 text-sm text-muted-foreground\">{text}</p>}\n    </div>\n  );\n}\n\nexport function FullPageLoader({ text = \"Chargement...\" }: { text?: string }) {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-background\">\n      <LoadingSpinner size=\"lg\" text={text} />\n    </div>\n  );\n}","size_bytes":832},"server/audioProcessor.ts":{"content":"import fs from \"fs\";\nimport path from \"path\";\nimport { createHash } from \"crypto\";\nimport { promisify } from \"util\";\nimport { exec } from \"child_process\";\n\nconst execAsync = promisify(exec);\n\n// Revolutionary audio processing and optimization system\nexport class AdvancedAudioProcessor {\n  private static readonly SUPPORTED_FORMATS = [\n    '.mp3', '.mp4', '.mpeg', '.mpga', '.m4a', '.wav', '.webm', '.flac', '.ogg', '.opus', '.aac'\n  ];\n  \n  private static readonly MAX_FILE_SIZE = 25 * 1024 * 1024; // 25MB (Whisper limit)\n  private static readonly MIN_FILE_SIZE = 1024; // 1KB minimum\n  private static readonly OPTIMAL_SAMPLE_RATE = 16000; // 16kHz optimal for Whisper\n  private static readonly TEMP_DIR = \"/tmp/leadmirror-audio\";\n  \n  static async initialize(): Promise<void> {\n    // Create temp directory for audio processing\n    if (!fs.existsSync(this.TEMP_DIR)) {\n      fs.mkdirSync(this.TEMP_DIR, { recursive: true });\n    }\n  }\n  \n  // Enhanced audio validation with detailed feedback\n  static validateAudioFile(filePath: string): {\n    isValid: boolean;\n    issues: string[];\n    metadata: {\n      size: number;\n      format: string;\n      hash: string;\n    };\n  } {\n    const issues: string[] = [];\n    \n    if (!fs.existsSync(filePath)) {\n      return {\n        isValid: false,\n        issues: [\"Fichier audio introuvable\"],\n        metadata: { size: 0, format: \"\", hash: \"\" }\n      };\n    }\n    \n    const stats = fs.statSync(filePath);\n    const fileSize = stats.size;\n    const fileExt = path.extname(filePath).toLowerCase();\n    const fileHash = this.generateFileHash(filePath);\n    \n    if (fileSize < this.MIN_FILE_SIZE) {\n      issues.push(`Fichier trop petit (minimum ${this.MIN_FILE_SIZE} bytes)`);\n    }\n    \n    if (fileSize > this.MAX_FILE_SIZE) {\n      issues.push(`Fichier trop volumineux (maximum ${Math.round(this.MAX_FILE_SIZE / 1024 / 1024)}MB, reçu ${Math.round(fileSize / 1024 / 1024)}MB)`);\n    }\n    \n    if (!this.SUPPORTED_FORMATS.includes(fileExt)) {\n      issues.push(`Format non supporté: ${fileExt}. Formats acceptés: ${this.SUPPORTED_FORMATS.join(', ')}`);\n    }\n    \n    return {\n      isValid: issues.length === 0,\n      issues,\n      metadata: {\n        size: fileSize,\n        format: fileExt,\n        hash: fileHash\n      }\n    };\n  }\n  \n  // Pre-process audio for optimal transcription\n  static async optimizeAudioForTranscription(inputPath: string): Promise<{\n    optimizedPath: string;\n    optimizations: string[];\n    originalSize: number;\n    optimizedSize: number;\n  }> {\n    await this.initialize();\n    \n    const originalStats = fs.statSync(inputPath);\n    const originalSize = originalStats.size;\n    const inputHash = this.generateFileHash(inputPath);\n    const outputPath = path.join(this.TEMP_DIR, `optimized_${inputHash.substring(0, 8)}.wav`);\n    \n    const optimizations: string[] = [];\n    \n    try {\n      // Check if ffmpeg is available (optional optimization)\n      try {\n        await execAsync('which ffmpeg');\n        \n        // Optimize audio using ffmpeg\n        const ffmpegCommand = [\n          'ffmpeg',\n          '-i', `\"${inputPath}\"`,\n          '-ar', this.OPTIMAL_SAMPLE_RATE.toString(), // Resample to 16kHz\n          '-ac', '1', // Convert to mono\n          '-c:a', 'pcm_s16le', // Uncompressed PCM for best quality\n          '-y', // Overwrite output\n          `\"${outputPath}\"`\n        ].join(' ');\n        \n        console.log(`🔧 Optimisation audio avec FFmpeg: ${ffmpegCommand}`);\n        await execAsync(ffmpegCommand);\n        \n        optimizations.push('Rééchantillonnage à 16kHz');\n        optimizations.push('Conversion en mono');\n        optimizations.push('Format PCM non compressé');\n        \n      } catch (ffmpegError) {\n        console.log('📝 FFmpeg non disponible, utilisation du fichier original');\n        // If ffmpeg is not available, copy original file\n        fs.copyFileSync(inputPath, outputPath);\n        optimizations.push('Fichier original utilisé (FFmpeg non disponible)');\n      }\n      \n      const optimizedStats = fs.statSync(outputPath);\n      const optimizedSize = optimizedStats.size;\n      \n      console.log(`✅ Optimisation terminée:`);\n      console.log(`   Taille originale: ${Math.round(originalSize / 1024)}KB`);\n      console.log(`   Taille optimisée: ${Math.round(optimizedSize / 1024)}KB`);\n      console.log(`   Optimisations: ${optimizations.join(', ')}`);\n      \n      return {\n        optimizedPath: outputPath,\n        optimizations,\n        originalSize,\n        optimizedSize\n      };\n      \n    } catch (error) {\n      console.error('❌ Erreur optimisation audio:', error);\n      \n      // Fallback: use original file\n      fs.copyFileSync(inputPath, outputPath);\n      return {\n        optimizedPath: outputPath,\n        optimizations: ['Erreur optimisation - fichier original utilisé'],\n        originalSize,\n        optimizedSize: originalSize\n      };\n    }\n  }\n  \n  // Extract detailed audio metadata\n  static async extractAudioMetadata(filePath: string): Promise<{\n    duration: number;\n    sampleRate: number;\n    channels: number;\n    bitrate: number;\n    format: string;\n    codec: string;\n  }> {\n    try {\n      // Try to use ffprobe for detailed metadata\n      const ffprobeCommand = [\n        'ffprobe',\n        '-v', 'quiet',\n        '-print_format', 'json',\n        '-show_format',\n        '-show_streams',\n        `\"${filePath}\"`\n      ].join(' ');\n      \n      const { stdout } = await execAsync(ffprobeCommand);\n      const metadata = JSON.parse(stdout);\n      \n      const audioStream = metadata.streams.find((s: any) => s.codec_type === 'audio') || {};\n      const format = metadata.format || {};\n      \n      return {\n        duration: parseFloat(format.duration) || 0,\n        sampleRate: parseInt(audioStream.sample_rate) || 0,\n        channels: parseInt(audioStream.channels) || 0,\n        bitrate: parseInt(format.bit_rate) || 0,\n        format: format.format_name || 'unknown',\n        codec: audioStream.codec_name || 'unknown'\n      };\n      \n    } catch (error) {\n      console.log('📝 FFprobe non disponible, estimation basique des métadonnées');\n      \n      // Fallback: basic estimation\n      const stats = fs.statSync(filePath);\n      const fileSize = stats.size;\n      \n      // Rough estimation: 128kbps average\n      const estimatedDuration = fileSize / (128 * 1024 / 8); // seconds\n      \n      return {\n        duration: estimatedDuration,\n        sampleRate: 44100, // Common default\n        channels: 2, // Stereo default\n        bitrate: 128000, // 128kbps default\n        format: path.extname(filePath).substring(1),\n        codec: 'unknown'\n      };\n    }\n  }\n  \n  static generateFileHash(filePath: string): string {\n    const fileBuffer = fs.readFileSync(filePath);\n    return createHash('sha256').update(fileBuffer).digest('hex');\n  }\n  \n  // Cleanup temporary files\n  static cleanup(): void {\n    try {\n      if (fs.existsSync(this.TEMP_DIR)) {\n        const files = fs.readdirSync(this.TEMP_DIR);\n        for (const file of files) {\n          const filePath = path.join(this.TEMP_DIR, file);\n          const stats = fs.statSync(filePath);\n          \n          // Delete files older than 1 hour\n          if (Date.now() - stats.mtime.getTime() > 60 * 60 * 1000) {\n            fs.unlinkSync(filePath);\n            console.log(`🗑️ Fichier temporaire supprimé: ${file}`);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('⚠️ Erreur nettoyage fichiers temporaires:', error);\n    }\n  }\n  \n  // Audio quality assessment\n  static assessAudioQuality(metadata: {\n    duration: number;\n    sampleRate: number;\n    channels: number;\n    bitrate: number;\n    format: string;\n  }): {\n    score: number; // 0-1\n    issues: string[];\n    recommendations: string[];\n  } {\n    const issues: string[] = [];\n    const recommendations: string[] = [];\n    let score = 1.0;\n    \n    // Duration checks\n    if (metadata.duration < 10) {\n      issues.push('Audio très court (< 10 secondes)');\n      score -= 0.2;\n    } else if (metadata.duration > 3600) {\n      issues.push('Audio très long (> 1 heure)');\n      recommendations.push('Divisez les longs enregistrements en segments');\n      score -= 0.1;\n    }\n    \n    // Sample rate checks\n    if (metadata.sampleRate < 16000) {\n      issues.push('Taux d\\'échantillonnage faible (< 16kHz)');\n      recommendations.push('Utilisez un taux d\\'échantillonnage d\\'au moins 16kHz');\n      score -= 0.3;\n    } else if (metadata.sampleRate > 48000) {\n      recommendations.push('Taux d\\'échantillonnage élevé - 16-44kHz suffisant');\n    }\n    \n    // Bitrate checks\n    if (metadata.bitrate < 64000) {\n      issues.push('Débit faible (< 64kbps)');\n      recommendations.push('Utilisez un débit d\\'au moins 128kbps pour une meilleure qualité');\n      score -= 0.2;\n    }\n    \n    // Format checks\n    const lossyFormats = ['.mp3', '.aac', '.ogg'];\n    if (lossyFormats.includes(metadata.format)) {\n      recommendations.push('Préférez les formats sans perte (WAV, FLAC) pour une qualité optimale');\n    }\n    \n    return {\n      score: Math.max(0, score),\n      issues,\n      recommendations\n    };\n  }\n}\n\n// Auto-cleanup on process exit\nprocess.on('exit', () => {\n  AdvancedAudioProcessor.cleanup();\n});\n\nprocess.on('SIGINT', () => {\n  AdvancedAudioProcessor.cleanup();\n  process.exit();\n});\n\nprocess.on('SIGTERM', () => {\n  AdvancedAudioProcessor.cleanup();\n  process.exit();\n});","size_bytes":9449}}}