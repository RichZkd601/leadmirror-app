#!/usr/bin/env node

/**
 * Script de build pour la production LeadMirror
 * Build le frontend React et configure le serveur
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function buildProduction() {
  log('\nüöÄ BUILD PRODUCTION LEADMIRROR', 'bold');
  log('==============================', 'bold');
  
  try {
    // 1. V√©rifier que nous sommes dans le bon r√©pertoire
    log('\nüìÅ V√©rification du r√©pertoire...', 'blue');
    const packageJsonPath = path.join(process.cwd(), 'package.json');
    if (!fs.existsSync(packageJsonPath)) {
      throw new Error('package.json non trouv√©. Assurez-vous d\'√™tre dans le r√©pertoire du projet.');
    }
    log('‚úÖ R√©pertoire correct', 'green');
    
    // 2. Installer les d√©pendances si n√©cessaire
    log('\nüì¶ V√©rification des d√©pendances...', 'blue');
    if (!fs.existsSync('node_modules')) {
      log('üì¶ Installation des d√©pendances...', 'yellow');
      execSync('npm install', { stdio: 'inherit' });
    }
    log('‚úÖ D√©pendances install√©es', 'green');
    
    // 3. Cr√©er le dossier dist s'il n'existe pas
    log('\nüìÅ Cr√©ation du dossier dist...', 'blue');
    const distPath = path.join(process.cwd(), 'dist');
    if (!fs.existsSync(distPath)) {
      fs.mkdirSync(distPath, { recursive: true });
    }
    log('‚úÖ Dossier dist cr√©√©', 'green');
    
    // 4. Build du frontend React
    log('\nüî® Build du frontend React...', 'blue');
    log('‚è≥ Cela peut prendre quelques minutes...', 'yellow');
    
    // V√©rifier que le dossier client existe
    const clientPath = path.join(process.cwd(), 'client');
    if (!fs.existsSync(clientPath)) {
      throw new Error('Dossier client non trouv√©');
    }
    
    // Build avec Vite
    execSync('npm run build', { 
      stdio: 'inherit',
      cwd: process.cwd()
    });
    
    log('‚úÖ Frontend build√© avec succ√®s', 'green');
    
    // 5. V√©rifier que le build a √©t√© cr√©√©
    log('\nüîç V√©rification du build...', 'blue');
    const buildPath = path.join(process.cwd(), 'dist');
    if (!fs.existsSync(buildPath)) {
      throw new Error('Le dossier dist n\'a pas √©t√© cr√©√©');
    }
    
    const files = fs.readdirSync(buildPath);
    log(`üìÑ Fichiers cr√©√©s: ${files.join(', ')}`, 'green');
    
    // 6. Copier les fichiers n√©cessaires pour le serveur
    log('\nüìã Configuration du serveur...', 'blue');
    
    // Cr√©er le dossier public dans dist
    const publicPath = path.join(buildPath, 'public');
    if (!fs.existsSync(publicPath)) {
      fs.mkdirSync(publicPath, { recursive: true });
    }
    
    // Copier les fichiers build√©s
    const buildFiles = fs.readdirSync(buildPath);
    for (const file of buildFiles) {
      if (file !== 'public') {
        const sourcePath = path.join(buildPath, file);
        const destPath = path.join(publicPath, file);
        
        if (fs.statSync(sourcePath).isDirectory()) {
          // Copier le dossier r√©cursivement
          execSync(`cp -r "${sourcePath}" "${destPath}"`, { stdio: 'inherit' });
        } else {
          // Copier le fichier
          fs.copyFileSync(sourcePath, destPath);
        }
      }
    }
    
    log('‚úÖ Serveur configur√©', 'green');
    
    // 7. Test du build
    log('\nüß™ Test du build...', 'blue');
    const indexHtmlPath = path.join(publicPath, 'index.html');
    if (!fs.existsSync(indexHtmlPath)) {
      throw new Error('index.html non trouv√© dans le build');
    }
    
    const indexHtml = fs.readFileSync(indexHtmlPath, 'utf-8');
    if (!indexHtml.includes('LeadMirror')) {
      log('‚ö†Ô∏è  Attention: index.html ne contient pas "LeadMirror"', 'yellow');
    }
    
    log('‚úÖ Build test√© avec succ√®s', 'green');
    
    // 8. R√©sum√©
    log('\nüìä R√âSUM√â DU BUILD', 'bold');
    log('==================', 'bold');
    log('‚úÖ D√©pendances install√©es', 'green');
    log('‚úÖ Frontend React build√©', 'green');
    log('‚úÖ Serveur configur√©', 'green');
    log('‚úÖ Build test√©', 'green');
    log(`üìÅ Dossier de build: ${publicPath}`, 'green');
    
    log('\nüéâ BUILD PRODUCTION TERMIN√â AVEC SUCC√àS !', 'green');
    log('Votre application est pr√™te pour le d√©ploiement !', 'green');
    
    log('\nüìã PROCHAINES √âTAPES:', 'bold');
    log('1. D√©ployer sur Railway/Vercel', 'blue');
    log('2. Configurer les variables d\'environnement', 'blue');
    log('3. Tester en production', 'blue');
    
  } catch (error) {
    log(`\n‚ùå ERREUR LORS DU BUILD: ${error.message}`, 'red');
    log('V√©rifiez que toutes les d√©pendances sont install√©es', 'yellow');
    process.exit(1);
  }
}

// Ex√©cuter le build
buildProduction(); 