#!/usr/bin/env node

/**
 * Script de d√©marrage pour la production LeadMirror
 * Build le frontend et d√©marre le serveur
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Couleurs pour les logs
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function startProduction() {
  log('\nüöÄ D√âMARRAGE PRODUCTION LEADMIRROR', 'bold');
  log('==================================', 'bold');
  
  try {
    // 1. V√©rifier l'environnement
    log('\nüîç V√©rification de l\'environnement...', 'blue');
    if (process.env.NODE_ENV !== 'production') {
      log('‚ö†Ô∏è  NODE_ENV n\'est pas d√©fini sur "production"', 'yellow');
      log('üí° D√©finition automatique de NODE_ENV=production', 'yellow');
      process.env.NODE_ENV = 'production';
    }
    log('‚úÖ Environnement: production', 'green');
    
    // 2. V√©rifier si le build existe
    log('\nüìÅ V√©rification du build...', 'blue');
    const possiblePaths = [
      path.resolve(process.cwd(), 'dist', 'public'),
      path.resolve(process.cwd(), 'dist'),
      path.resolve(process.cwd(), 'client', 'dist'),
      path.resolve(process.cwd(), 'build'),
    ];
    
    let buildExists = false;
    for (const testPath of possiblePaths) {
      if (fs.existsSync(testPath)) {
        log(`‚úÖ Build trouv√©: ${testPath}`, 'green');
        buildExists = true;
        break;
      }
    }
    
    // 3. Build si n√©cessaire
    if (!buildExists) {
      log('\nüî® Build du frontend...', 'blue');
      log('‚è≥ Cela peut prendre quelques minutes...', 'yellow');
      
      try {
        execSync('npm run build', { 
          stdio: 'inherit',
          cwd: process.cwd(),
          env: { ...process.env, NODE_ENV: 'production' }
        });
        log('‚úÖ Build termin√© avec succ√®s', 'green');
      } catch (error) {
        log('‚ùå Erreur lors du build', 'red');
        log('üí° Tentative de build manuel...', 'yellow');
        
        // Build manuel
        execSync('npx vite build', { 
          stdio: 'inherit',
          cwd: process.cwd(),
          env: { ...process.env, NODE_ENV: 'production' }
        });
        log('‚úÖ Build manuel termin√©', 'green');
      }
    }
    
    // 4. V√©rifier les variables d'environnement
    log('\nüîß V√©rification des variables d\'environnement...', 'blue');
    const requiredVars = ['PORT', 'SESSION_SECRET'];
    const optionalVars = ['DATABASE_URL', 'OPENAI_API_KEY', 'STRIPE_SECRET_KEY'];
    
    for (const varName of requiredVars) {
      if (!process.env[varName]) {
        log(`‚ö†Ô∏è  Variable requise manquante: ${varName}`, 'yellow');
      } else {
        log(`‚úÖ ${varName}: configur√©`, 'green');
      }
    }
    
    for (const varName of optionalVars) {
      if (!process.env[varName]) {
        log(`‚ö†Ô∏è  Variable optionnelle manquante: ${varName}`, 'yellow');
      } else {
        log(`‚úÖ ${varName}: configur√©`, 'green');
      }
    }
    
    // 5. D√©marrer le serveur
    log('\nüöÄ D√©marrage du serveur de production...', 'blue');
    log('‚è≥ Serveur en cours de d√©marrage...', 'yellow');
    
    // D√©marrer le serveur avec tsx
    execSync('npx tsx server/index.ts', { 
      stdio: 'inherit',
      cwd: process.cwd(),
      env: { 
        ...process.env, 
        NODE_ENV: 'production',
        PORT: process.env.PORT || '5000'
      }
    });
    
  } catch (error) {
    log(`\n‚ùå ERREUR LORS DU D√âMARRAGE: ${error.message}`, 'red');
    log('V√©rifiez que toutes les d√©pendances sont install√©es', 'yellow');
    process.exit(1);
  }
}

// Ex√©cuter le d√©marrage
startProduction(); 